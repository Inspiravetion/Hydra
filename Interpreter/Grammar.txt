BASICS BUILDING BLOCKS
--------------------------------------------------------------------------------

IntDigit   => [0-9]
IntDigits  => IntDigit IntDigits
           |  empty

HexDigit   => [0-9a-fA-F]
HexDigits  => HexDigit HexDigits
           |  empty

Ident       => [a-zA-Z_$][a-zA-Z0-9_?!$]*

OptIdent    => Ident | empty

KeyVal      => (Ident | StringLit) ':' Expr

Expr        => NewStmt
            |  InstanceVar
            |  ClassVar
            |  BuiltinLit
            |  SquareBracInd
            |  FuncCall
            |  Ident

OptExpr     => Expr | empty

Stmt        => VarDecl
            |  ReturnStmt
            |  AssignStmt
            |  ControlStructure
            |  Exprs

ChanSendRcv => ChanSend | ChanRcv
ChanSend    => Expr '->' Expr
ChanRcv     => OptIdentList '<-' Expr

Constructor => Ident '(' Exprs ')' '{' Stmts '}'

ClassVarDecl => ClassVar '=' Expr

Comment         => SingleLnComment | MultiLnComment
SingleLnComment => '//' [^\n]*
MultiLnComment  => '/*' [^(*/)]* '*/'

Params      => '(' OptExprs ')'
OptParams   => Params | empty

FuncCall    => DottedExprs Params

SquareBracInd => Ident '[' Expr ']'

VarDecl     => 'var' Exprs optRSAssign

RSAssign    => '=' Exprs

OptRSAssign => RSAssign | empty

AssignStmt  => IdentList RSAssign

ReturnStmt  => 'return' OptExprs

InstanceVar => ('@_' | '@') Ident

ClassVar    => ('#_' | '#') Ident

LISTS
--------------------------------------------------------------------------------

IdentList   => Ident IdentList!
IdentList!  => ',' IdentList
            |  empty

OptIdentList => IdentList | empty

Stmts       => Stmt Stmts!
Stmts!      => ';' Stmts
            |  empty

Exprs       => Expr Exprs!
Exprs!      => ',' Exprs
            |  empty

OptExprs    => Exprs | empty

DottedExprs  => Expr DottedExprs!
DottedExprs! => '.' DottedExprs
             |  empty

KeyValList  => KeyVal KeyValList!
KeyValList! => ',' KeyValList
            |  empty

CONTROL STRUCTURES
--------------------------------------------------------------------------------

ControlStructure => ForInLoop | WhileLoop | IfElse | GivenIs | WaitFor

ForInLoop   => 'for' IdentList 'in' Expr 'do' Stmts 'end'

WhileLoop   => 'while' Stmts 'do' Stmts 'end'

IfElse       => IfBranch ElseIfBranch
IfBranch     => 'if' Stmts 'do' Stmts
ElseIfBranch => 'else if' Stmts ElseIfBranch
             |  ElseBranch
             |  'end'
ElseBranch   => 'else' Stmts 'end'

GivenIs     => 'given' Expr IsBranch
IsBranch    => 'is' Expr 'do' Stmts IsBranch
            |  ElseBranch
ElseBranch  => 'else do' Stmts 'end'
            |  'end'

WaitFor     => 'wait_for' 'either' ChanSendRcv 'then' Stmts OrBranch 'end'
OrBranch    => 'or' ChanSendRcv 'then' Stmts OrBranch
            |  OrDefault
OrDefault   => 'or do' Stmts 'end'
            |  empty

BUILT IN LITERALS
--------------------------------------------------------------------------------

BuiltinLit => IntLit | FloatLit | StringLit | RegexLit | ArrayLit | HashLit | ChanLit | FuncLit

IntLit     => IntDigits | HexLit
HexLit     => '0' ('x' | 'X') HexDigits

FloatLit   => IntDigits '.' IntDigits

StringLit  => SingleStr | DoubleStr
SingleStr  => "'" [^']* "'"
DoubleStr  => '"' [^"]* '"'

RegexLit   => '/' ([^/]|\.)+ '/'

ArrayLit   => '[' Exprs ']'

HashLit    => '{' KeyValList '}'

ChanLit    => '<-' OptExpr '->'

FuncLit    => 'gen' 'function' Ident '(' OptIdentList ')' '{' Stmts '}'
           |  'function' Ident '(' OptIdentList ')' '{' Stmts '}'

ClosureLit  => OptAsterick ClosureDef
OptAsterick => '*'
            |  empty
ClosureDef  => '(' OptIdentList ')' '{' Stmts '}' OptParams

LANGUAGE CONSTRUCTS
--------------------------------------------------------------------------------

ClassDef       => 'class' Ident ExtendInfo ClassInternals 'end'
ExtendInfo     => 'extends' IdentList
ClassInternals => (Constructor | ClassVarDecl | FuncLit | Comment) ClassInternals
               |  empty

SpawnStmt      => 'spawn' (ClosureDef | FuncCall)

NewStmt        => 'new' FuncCall

ImportStmt     => 'import' (FullImport | PartialImport)
FullImport     => PkgLocation
PartialImport  => IdentList 'from' PkgLocation
PkgLocation    => ('std' | 'pkg') '::' Ident
               |  ImportPath
ImportPath     => ('~' | '.') '/' Path
Path           => Ident '/' Path
               |  Ident '.hy'

ExportStmt     =>
