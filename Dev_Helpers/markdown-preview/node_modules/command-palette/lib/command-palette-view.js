(function() {
  var $, $$, CommandPaletteView, SelectListView, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  _ref = require('atom'), $ = _ref.$, $$ = _ref.$$, SelectListView = _ref.SelectListView;

  module.exports = CommandPaletteView = (function(_super) {
    __extends(CommandPaletteView, _super);

    function CommandPaletteView() {
      return CommandPaletteView.__super__.constructor.apply(this, arguments);
    }

    CommandPaletteView.activate = function() {
      return new CommandPaletteView;
    };

    CommandPaletteView.prototype.keyBindings = null;

    CommandPaletteView.prototype.initialize = function() {
      CommandPaletteView.__super__.initialize.apply(this, arguments);
      this.addClass('command-palette overlay from-top');
      return atom.workspaceView.command('command-palette:toggle', (function(_this) {
        return function() {
          return _this.toggle();
        };
      })(this));
    };

    CommandPaletteView.prototype.getFilterKey = function() {
      return 'eventDescription';
    };

    CommandPaletteView.prototype.toggle = function() {
      if (this.hasParent()) {
        return this.cancel();
      } else {
        return this.attach();
      }
    };

    CommandPaletteView.prototype.attach = function() {
      var eventDescription, eventName, events, _ref1;
      this.storeFocusedElement();
      if (this.previouslyFocusedElement[0] && this.previouslyFocusedElement[0] !== document.body) {
        this.eventElement = this.previouslyFocusedElement;
      } else {
        this.eventElement = atom.workspaceView;
      }
      this.keyBindings = atom.keymap.keyBindingsMatchingElement(this.eventElement);
      events = [];
      _ref1 = _.extend($(window).events(), this.eventElement.events());
      for (eventName in _ref1) {
        eventDescription = _ref1[eventName];
        if (eventDescription) {
          events.push({
            eventName: eventName,
            eventDescription: eventDescription
          });
        }
      }
      events = _.sortBy(events, 'eventDescription');
      this.setItems(events);
      atom.workspaceView.append(this);
      return this.focusFilterEditor();
    };

    CommandPaletteView.prototype.viewForItem = function(_arg) {
      var eventDescription, eventName, keyBindings;
      eventName = _arg.eventName, eventDescription = _arg.eventDescription;
      keyBindings = this.keyBindings;
      return $$(function() {
        return this.li({
          "class": 'event',
          'data-event-name': eventName
        }, (function(_this) {
          return function() {
            _this.div({
              "class": 'pull-right'
            }, function() {
              var binding, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = keyBindings.length; _i < _len; _i++) {
                binding = keyBindings[_i];
                if (binding.command === eventName) {
                  _results.push(_this.kbd(_.humanizeKeystroke(binding.keystroke), {
                    "class": 'key-binding'
                  }));
                }
              }
              return _results;
            });
            return _this.span(eventDescription, {
              title: eventName
            });
          };
        })(this));
      });
    };

    CommandPaletteView.prototype.confirmed = function(_arg) {
      var eventName;
      eventName = _arg.eventName;
      this.cancel();
      return this.eventElement.trigger(eventName);
    };

    return CommandPaletteView;

  })(SelectListView);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/command-palette/lib/command-palette-view.js.map
