(function() {
  var SymbolsView, TagGenerator, WorkspaceView, fs, path, temp;

  path = require('path');

  WorkspaceView = require('atom').WorkspaceView;

  fs = require('fs-plus');

  temp = require('temp');

  SymbolsView = require('../lib/symbols-view');

  TagGenerator = require('../lib/tag-generator');

  describe("SymbolsView", function() {
    var activationPromise, symbolsView, _ref;
    _ref = [], symbolsView = _ref[0], activationPromise = _ref[1];
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView;
      atom.workspace = atom.workspaceView.model;
      atom.project.setPath(temp.mkdirSync('atom-symbols-view-'));
      fs.copySync(path.join(__dirname, 'fixtures'), atom.project.getPath());
      activationPromise = atom.packages.activatePackage("symbols-view");
      return atom.workspaceView.attachToDom();
    });
    describe("when tags can be generated for a file", function() {
      it("initially displays all JavaScript functions with line numbers", function() {
        atom.workspaceView.openSync('sample.js');
        atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
        waitsForPromise(function() {
          return activationPromise;
        });
        runs(function() {
          symbolsView = atom.workspaceView.find('.symbols-view').view();
          return expect(symbolsView.loading).toBeVisible();
        });
        waitsFor(function() {
          return symbolsView.list.children('li').length > 0;
        });
        return runs(function() {
          expect(symbolsView.loading).toBeEmpty();
          expect(atom.workspaceView.find('.symbols-view')).toExist();
          expect(symbolsView.list.children('li').length).toBe(2);
          expect(symbolsView.list.children('li:first').find('.primary-line')).toHaveText('quicksort');
          expect(symbolsView.list.children('li:first').find('.secondary-line')).toHaveText('Line 1');
          expect(symbolsView.list.children('li:last').find('.primary-line')).toHaveText('quicksort.sort');
          expect(symbolsView.list.children('li:last').find('.secondary-line')).toHaveText('Line 2');
          return expect(symbolsView.error).not.toBeVisible();
        });
      });
      it("caches tags until the buffer changes", function() {
        var editor;
        editor = atom.workspaceView.openSync('sample.js');
        atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
        waitsForPromise(function() {
          return activationPromise;
        });
        runs(function() {
          return symbolsView = atom.workspaceView.find('.symbols-view').view();
        });
        waitsFor(function() {
          return symbolsView.list.children('li').length > 0;
        });
        runs(function() {
          symbolsView.cancel();
          spyOn(symbolsView, 'generateTags').andCallThrough();
          return atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
        });
        waitsFor(function() {
          return symbolsView.list.children('li').length > 0;
        });
        runs(function() {
          expect(symbolsView.loading).toBeEmpty();
          expect(symbolsView.list.children('li').length).toBe(2);
          expect(symbolsView.generateTags).not.toHaveBeenCalled();
          editor.getBuffer().emit('saved');
          symbolsView.cancel();
          return atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
        });
        waitsFor(function() {
          return symbolsView.list.children('li').length > 0;
        });
        return runs(function() {
          expect(symbolsView.loading).toBeEmpty();
          expect(symbolsView.list.children('li').length).toBe(2);
          expect(symbolsView.generateTags).toHaveBeenCalled();
          editor.destroy();
          return expect(symbolsView.cachedTags).toEqual({});
        });
      });
      return it("displays an error when no tags match text in mini-editor", function() {
        atom.workspaceView.openSync('sample.js');
        atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
        waitsForPromise(function() {
          return activationPromise;
        });
        runs(function() {
          return symbolsView = atom.workspaceView.find('.symbols-view').view();
        });
        waitsFor(function() {
          return symbolsView.list.children('li').length > 0;
        });
        return runs(function() {
          symbolsView.filterEditorView.setText("nothing will match this");
          window.advanceClock(symbolsView.inputThrottle);
          expect(atom.workspaceView.find('.symbols-view')).toExist();
          expect(symbolsView.list.children('li').length).toBe(0);
          expect(symbolsView.error).toBeVisible();
          expect(symbolsView.error.text().length).toBeGreaterThan(0);
          symbolsView.filterEditorView.setText("");
          window.advanceClock(symbolsView.inputThrottle);
          expect(symbolsView.list.children('li').length).toBe(2);
          return expect(symbolsView.error).not.toBeVisible();
        });
      });
    });
    describe("when tags can't be generated for a file", function() {
      return it("shows an error message when no matching tags are found", function() {
        atom.workspaceView.openSync('sample.txt');
        atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
        waitsForPromise(function() {
          return activationPromise;
        });
        runs(function() {
          return symbolsView = atom.workspaceView.find('.symbols-view').view();
        });
        waitsFor(function() {
          return symbolsView.error.isVisible();
        });
        return runs(function() {
          expect(symbolsView).toExist();
          expect(symbolsView.list.children('li').length).toBe(0);
          expect(symbolsView.error).toBeVisible();
          expect(symbolsView.error.text().length).toBeGreaterThan(0);
          return expect(symbolsView.loadingArea).not.toBeVisible();
        });
      });
    });
    it("moves the cursor to the selected function", function() {
      atom.workspaceView.openSync('sample.js');
      expect(atom.workspaceView.getActivePaneItem().getCursorBufferPosition()).toEqual([0, 0]);
      expect(atom.workspaceView.find('.symbols-view')).not.toExist();
      atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
      waitsFor(function() {
        return atom.workspaceView.find('.symbols-view').find('li').length;
      });
      return runs(function() {
        atom.workspaceView.find('.symbols-view').find('li:eq(1)').mousedown().mouseup();
        return expect(atom.workspaceView.getActivePaneItem().getCursorBufferPosition()).toEqual([1, 2]);
      });
    });
    describe("TagGenerator", function() {
      it("generates tags for all JavaScript functions", function() {
        var tags;
        tags = [];
        waitsForPromise(function() {
          var sampleJsPath;
          sampleJsPath = atom.project.resolve('sample.js');
          return new TagGenerator(sampleJsPath).generate().then(function(o) {
            return tags = o;
          });
        });
        return runs(function() {
          expect(tags.length).toBe(2);
          expect(tags[0].name).toBe("quicksort");
          expect(tags[0].position.row).toBe(0);
          expect(tags[1].name).toBe("quicksort.sort");
          return expect(tags[1].position.row).toBe(1);
        });
      });
      return it("generates no tags for text file", function() {
        var tags;
        tags = [];
        waitsForPromise(function() {
          var sampleJsPath;
          sampleJsPath = atom.project.resolve('sample.txt');
          return new TagGenerator(sampleJsPath).generate().then(function(o) {
            return tags = o;
          });
        });
        return runs(function() {
          return expect(tags.length).toBe(0);
        });
      });
    });
    describe("go to declaration", function() {
      it("doesn't move the cursor when no declaration is found", function() {
        var editor;
        atom.workspaceView.openSync("tagged.js");
        editor = atom.workspaceView.getActivePaneItem();
        editor.setCursorBufferPosition([0, 2]);
        atom.workspaceView.getActiveView().trigger('symbols-view:go-to-declaration');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          return expect(editor.getCursorBufferPosition()).toEqual([0, 2]);
        });
      });
      it("moves the cursor to the declaration", function() {
        var editor;
        atom.workspaceView.openSync("tagged.js");
        editor = atom.workspaceView.getActivePaneItem();
        editor.setCursorBufferPosition([6, 24]);
        spyOn(SymbolsView.prototype, "moveToPosition").andCallThrough();
        atom.workspaceView.getActiveView().trigger('symbols-view:go-to-declaration');
        waitsFor(function() {
          return SymbolsView.prototype.moveToPosition.callCount === 1;
        });
        return runs(function() {
          return expect(editor.getCursorBufferPosition()).toEqual([2, 0]);
        });
      });
      it("displays matches when more than one exists and opens the selected match", function() {
        var editor;
        atom.workspaceView.openSync("tagged.js");
        editor = atom.workspaceView.getActivePaneItem();
        editor.setCursorBufferPosition([8, 14]);
        atom.workspaceView.getActiveView().trigger('symbols-view:go-to-declaration');
        waitsFor(function() {
          return atom.workspaceView.find('.symbols-view').find('li').length > 0;
        });
        runs(function() {
          symbolsView = atom.workspaceView.find('.symbols-view').view();
          expect(symbolsView.list.children('li').length).toBe(2);
          expect(symbolsView).toBeVisible();
          spyOn(SymbolsView.prototype, "moveToPosition").andCallThrough();
          return symbolsView.confirmed(symbolsView.items[0]);
        });
        waitsFor(function() {
          return SymbolsView.prototype.moveToPosition.callCount === 1;
        });
        return runs(function() {
          expect(atom.workspaceView.getActivePaneItem().getPath()).toBe(atom.project.resolve("tagged-duplicate.js"));
          return expect(atom.workspaceView.getActivePaneItem().getCursorBufferPosition()).toEqual([0, 4]);
        });
      });
      return describe("when the tag is in a file that doesn't exist", function() {
        return it("doesn't display the tag", function() {
          var editor;
          fs.removeSync(atom.project.resolve("tagged-duplicate.js"));
          atom.workspaceView.openSync("tagged.js");
          editor = atom.workspaceView.getActivePaneItem();
          editor.setCursorBufferPosition([8, 14]);
          atom.workspaceView.getActiveView().trigger('symbols-view:go-to-declaration');
          waitsFor(function() {
            return atom.workspaceView.find('.symbols-view').find('li').length > 0;
          });
          return runs(function() {
            symbolsView = atom.workspaceView.find('.symbols-view').view();
            expect(symbolsView.list.children('li').length).toBe(1);
            return expect(symbolsView.list.children('li:first').find('.primary-line')).toHaveText('tagged.js');
          });
        });
      });
    });
    describe("project symbols", function() {
      it("displays all tags", function() {
        jasmine.unspy(window, 'setTimeout');
        atom.workspaceView.openSync("tagged.js");
        expect(atom.workspaceView.find('.symbols-view')).not.toExist();
        atom.workspaceView.trigger("symbols-view:toggle-project-symbols");
        waitsForPromise(function() {
          return activationPromise;
        });
        runs(function() {
          symbolsView = atom.workspaceView.find('.symbols-view').view();
          return expect(symbolsView.loading).toBeVisible();
        });
        waitsFor(function() {
          return symbolsView.list.children('li').length > 0;
        });
        runs(function() {
          expect(symbolsView.loading).toBeEmpty();
          expect(atom.workspaceView.find('.symbols-view')).toExist();
          expect(symbolsView.list.children('li').length).toBe(4);
          expect(symbolsView.list.children('li:first').find('.primary-line')).toHaveText('callMeMaybe');
          expect(symbolsView.list.children('li:first').find('.secondary-line')).toHaveText('tagged.js');
          expect(symbolsView.list.children('li:last').find('.primary-line')).toHaveText('thisIsCrazy');
          expect(symbolsView.list.children('li:last').find('.secondary-line')).toHaveText('tagged.js');
          expect(symbolsView.error).not.toBeVisible();
          atom.workspaceView.trigger("symbols-view:toggle-project-symbols");
          return fs.removeSync(atom.project.resolve('tags'));
        });
        waitsFor(function() {
          return symbolsView.reloadTags;
        });
        runs(function() {
          return atom.workspaceView.trigger("symbols-view:toggle-project-symbols");
        });
        waitsFor(function() {
          return symbolsView.error.isVisible();
        });
        return runs(function() {
          return expect(symbolsView.list.children('li').length).toBe(0);
        });
      });
      return describe("when selecting a tag", function() {
        return describe("when the file doesn't exist", function() {
          beforeEach(function() {
            return fs.removeSync(atom.project.resolve("tagged.js"));
          });
          return it("doesn't open the editor", function() {
            atom.workspaceView.trigger("symbols-view:toggle-project-symbols");
            waitsForPromise(function() {
              return activationPromise;
            });
            runs(function() {
              return symbolsView = atom.workspaceView.find('.symbols-view').view();
            });
            waitsFor(function() {
              return symbolsView.list.children('li').length > 0;
            });
            return runs(function() {
              spyOn(atom.workspaceView, 'open').andCallThrough();
              symbolsView.list.children('li:first').mousedown().mouseup();
              expect(atom.workspaceView.open).not.toHaveBeenCalled();
              return expect(symbolsView.error.text().length).toBeGreaterThan(0);
            });
          });
        });
      });
    });
    return describe("when useEditorGrammarAsCtagsLanguage is set to true", function() {
      return it("uses the language associated with the editor's grammar", function() {
        atom.config.set('symbols-view.useEditorGrammarAsCtagsLanguage', true);
        waitsForPromise(function() {
          return atom.packages.activatePackage('language-javascript');
        });
        waitsForPromise(function() {
          return atom.workspace.open('sample.javascript');
        });
        runs(function() {
          atom.workspace.getActiveEditor().setText("var test = function() {}");
          atom.workspace.getActiveEditor().save();
          return atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
        });
        waitsForPromise(function() {
          return activationPromise;
        });
        waitsFor(function() {
          return atom.workspaceView.find('.symbols-view').view().error.isVisible();
        });
        runs(function() {
          atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
          atom.workspace.getActiveEditor().setGrammar(atom.syntax.grammarForScopeName('source.js'));
          atom.workspaceView.getActiveView().trigger("symbols-view:toggle-file-symbols");
          symbolsView = atom.workspaceView.find('.symbols-view').view();
          return expect(symbolsView.loading).toBeVisible();
        });
        waitsFor(function() {
          return symbolsView.list.children('li').length === 1;
        });
        return runs(function() {
          expect(symbolsView.loading).toBeEmpty();
          expect(atom.workspaceView.find('.symbols-view')).toExist();
          expect(symbolsView.list.children('li:first').find('.primary-line')).toHaveText('test');
          return expect(symbolsView.list.children('li:first').find('.secondary-line')).toHaveText('Line 1');
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/symbols-view/spec/symbols-view-spec.js.map
