(function() {
  var View, WindowPanelView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('atom').View;

  module.exports = WindowPanelView = (function(_super) {
    __extends(WindowPanelView, _super);

    function WindowPanelView() {
      return WindowPanelView.__super__.constructor.apply(this, arguments);
    }

    WindowPanelView.content = function() {
      return this.div({
        "class": 'padded'
      }, (function(_this) {
        return function() {
          _this.span({
            "class": 'inline-block'
          }, 'Window load time');
          return _this.span({
            "class": 'inline-block',
            outlet: 'windowLoadTime'
          });
        };
      })(this));
    };

    WindowPanelView.prototype.updateWindowLoadTime = function() {
      var highlightClass, time;
      time = atom.getWindowLoadTime();
      highlightClass = 'highlight-info';
      if (time > 800) {
        highlightClass = 'highlight-warning';
      }
      if (time > 1000) {
        highlightClass = 'highlight-error';
      }
      this.windowLoadTime.addClass(highlightClass);
      return this.windowLoadTime.text("" + time + "ms");
    };

    WindowPanelView.prototype.populate = function() {
      return this.updateWindowLoadTime();
    };

    return WindowPanelView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/timecop/lib/window-panel-view.js.map
