(function() {
  var BracketMatcherView, _;

  _ = require('underscore-plus');

  BracketMatcherView = require('./bracket-matcher-view');

  module.exports = {
    pairedCharacters: {
      '(': ')',
      '[': ']',
      '{': '}',
      '"': '"',
      "'": "'"
    },
    activate: function() {
      atom.workspaceView.eachEditorView((function(_this) {
        return function(editorView) {
          if (editorView.attached && (editorView.getPane() != null)) {
            return new BracketMatcherView(editorView);
          }
        };
      })(this));
      return atom.project.eachEditor((function(_this) {
        return function(editor) {
          return _this.subscribeToEditor(editor);
        };
      })(this));
    },
    subscribeToEditor: function(editor) {
      this.bracketMarkers = [];
      _.adviseBefore(editor, 'insertText', (function(_this) {
        return function(text, options) {
          var autoCompleteOpeningBracket, bracketMarker, cursorBufferPosition, hasQuoteBeforeCursor, hasWordAfterCursor, hasWordBeforeCursor, nextCharacter, previousCharacter, range, skipOverExistingClosingBracket;
          if ((options != null ? options.select : void 0) || (options != null ? options.undo : void 0) === 'skip') {
            return true;
          }
          if (editor.hasMultipleCursors()) {
            return true;
          }
          cursorBufferPosition = editor.getCursorBufferPosition();
          previousCharacter = editor.getTextInBufferRange([cursorBufferPosition.add([0, -1]), cursorBufferPosition]);
          nextCharacter = editor.getTextInBufferRange([cursorBufferPosition, cursorBufferPosition.add([0, 1])]);
          if (_this.isOpeningBracket(text) && !editor.getSelection().isEmpty()) {
            _this.wrapSelectionInBrackets(editor, text);
            return false;
          }
          hasWordAfterCursor = /\w/.test(nextCharacter);
          hasWordBeforeCursor = /\w/.test(previousCharacter);
          hasQuoteBeforeCursor = previousCharacter === text[0];
          autoCompleteOpeningBracket = _this.isOpeningBracket(text) && !hasWordAfterCursor && !(_this.isQuote(text) && (hasWordBeforeCursor || hasQuoteBeforeCursor));
          skipOverExistingClosingBracket = false;
          if (_this.isClosingBracket(text) && nextCharacter === text) {
            if (bracketMarker = _.find(_this.bracketMarkers, function(marker) {
              return marker.isValid() && marker.getBufferRange().end.isEqual(cursorBufferPosition);
            })) {
              skipOverExistingClosingBracket = true;
            }
          }
          if (skipOverExistingClosingBracket) {
            bracketMarker.destroy();
            _.remove(_this.bracketMarkers, bracketMarker);
            editor.moveCursorRight();
            return false;
          } else if (autoCompleteOpeningBracket) {
            editor.insertText(text + _this.pairedCharacters[text]);
            editor.moveCursorLeft();
            range = [cursorBufferPosition, cursorBufferPosition.add([0, text.length])];
            _this.bracketMarkers.push(editor.markBufferRange(range));
            return false;
          }
        };
      })(this));
      _.adviseBefore(editor, 'insertNewline', (function(_this) {
        return function() {
          var cursorBufferPosition, nextCharacter, previousCharacter;
          if (editor.hasMultipleCursors()) {
            return;
          }
          if (!editor.getSelection().isEmpty()) {
            return;
          }
          cursorBufferPosition = editor.getCursorBufferPosition();
          previousCharacter = editor.getTextInBufferRange([cursorBufferPosition.add([0, -1]), cursorBufferPosition]);
          nextCharacter = editor.getTextInBufferRange([cursorBufferPosition, cursorBufferPosition.add([0, 1])]);
          if (_this.pairedCharacters[previousCharacter] === nextCharacter) {
            editor.transact(function() {
              var cursorRow;
              editor.insertText("\n\n");
              editor.moveCursorUp();
              cursorRow = editor.getCursorBufferPosition().row;
              return editor.autoIndentBufferRows(cursorRow, cursorRow + 1);
            });
            return false;
          }
        };
      })(this));
      return _.adviseBefore(editor, 'backspace', (function(_this) {
        return function() {
          var cursorBufferPosition, nextCharacter, previousCharacter;
          if (editor.hasMultipleCursors()) {
            return;
          }
          if (!editor.getSelection().isEmpty()) {
            return;
          }
          cursorBufferPosition = editor.getCursorBufferPosition();
          previousCharacter = editor.getTextInBufferRange([cursorBufferPosition.add([0, -1]), cursorBufferPosition]);
          nextCharacter = editor.getTextInBufferRange([cursorBufferPosition, cursorBufferPosition.add([0, 1])]);
          if (_this.pairedCharacters[previousCharacter] === nextCharacter) {
            editor.transact(function() {
              editor.moveCursorLeft();
              editor["delete"]();
              return editor["delete"]();
            });
            return false;
          }
        };
      })(this));
    },
    wrapSelectionInBrackets: function(editor, bracket) {
      var pair;
      pair = this.pairedCharacters[bracket];
      return editor.mutateSelectedText((function(_this) {
        return function(selection) {
          var options, range, selectionEnd, selectionStart;
          if (selection.isEmpty()) {
            return;
          }
          range = selection.getBufferRange();
          options = {
            isReversed: selection.isReversed()
          };
          selection.insertText("" + bracket + (selection.getText()) + pair);
          selectionStart = range.start.add([0, 1]);
          if (range.start.row === range.end.row) {
            selectionEnd = range.end.add([0, 1]);
          } else {
            selectionEnd = range.end;
          }
          return selection.setBufferRange([selectionStart, selectionEnd], options);
        };
      })(this));
    },
    isQuote: function(string) {
      return /'|"/.test(string);
    },
    getInvertedPairedCharacters: function() {
      var close, open, _ref;
      if (this.invertedPairedCharacters) {
        return this.invertedPairedCharacters;
      }
      this.invertedPairedCharacters = {};
      _ref = this.pairedCharacters;
      for (open in _ref) {
        close = _ref[open];
        this.invertedPairedCharacters[close] = open;
      }
      return this.invertedPairedCharacters;
    },
    isOpeningBracket: function(string) {
      return this.pairedCharacters.hasOwnProperty(string);
    },
    isClosingBracket: function(string) {
      return this.getInvertedPairedCharacters().hasOwnProperty(string);
    }
  };

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/bracket-matcher/lib/bracket-matcher.js.map
