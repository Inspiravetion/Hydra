(function() {
  var $, Autosave, WorkspaceView, _ref;

  Autosave = require('../lib/autosave');

  _ref = require('atom'), $ = _ref.$, WorkspaceView = _ref.WorkspaceView;

  describe("Autosave", function() {
    var initialActiveItem, otherItem1, otherItem2, _ref1;
    _ref1 = [], initialActiveItem = _ref1[0], otherItem1 = _ref1[1], otherItem2 = _ref1[2];
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView();
      waitsForPromise(function() {
        return atom.packages.activatePackage("autosave");
      });
      return runs(function() {
        atom.workspaceView.attachToDom();
        initialActiveItem = atom.workspaceView.openSync('sample.js');
        otherItem1 = atom.project.openSync('sample.coffee');
        otherItem2 = otherItem1.copy();
        spyOn(initialActiveItem, 'save');
        spyOn(otherItem1, 'save');
        return spyOn(otherItem2, 'save');
      });
    });
    describe("when the item is not modified", function() {
      return it("does not autosave the item", function() {
        var leftPane, rightPane;
        atom.config.set('autosave.enabled', true);
        leftPane = atom.workspaceView.getActivePane();
        rightPane = leftPane.splitRight(otherItem1);
        return expect(initialActiveItem.save).not.toHaveBeenCalled();
      });
    });
    return describe("when the buffer is modified", function() {
      beforeEach(function() {
        return initialActiveItem.setText("i am modified");
      });
      describe("when a pane loses focus", function() {
        return it("saves the item if autosave is enabled and the item has a uri", function() {
          $('body').focus();
          expect(initialActiveItem.save).not.toHaveBeenCalled();
          atom.workspaceView.focus();
          atom.config.set('autosave.enabled', true);
          $('body').focus();
          return expect(initialActiveItem.save).toHaveBeenCalled();
        });
      });
      describe("when a new pane is created", function() {
        return it("saves the item if autosave is enabled and the item has a uri", function() {
          var leftPane, rightPane;
          leftPane = atom.workspaceView.getActivePane();
          rightPane = leftPane.splitRight(otherItem1);
          expect(initialActiveItem.save).not.toHaveBeenCalled();
          rightPane.remove();
          atom.config.set('autosave.enabled', true);
          leftPane.splitRight(otherItem2);
          return expect(initialActiveItem.save).toHaveBeenCalled();
        });
      });
      describe("when an item is destroyed", function() {
        describe("when the item is the active item", function() {
          return it("does not save the item if autosave is enabled and the item has a uri", function() {
            var leftPane, rightPane;
            leftPane = atom.workspaceView.getActivePane();
            rightPane = leftPane.splitRight(otherItem1);
            leftPane.focus();
            expect(initialActiveItem).toBe(atom.workspaceView.getActivePaneItem());
            leftPane.removeItem(initialActiveItem);
            expect(initialActiveItem.save).not.toHaveBeenCalled();
            otherItem2.setText("I am also modified");
            atom.config.set("autosave.enabled", true);
            leftPane = rightPane.splitLeft(otherItem2);
            expect(otherItem2).toBe(atom.workspaceView.getActivePaneItem());
            leftPane.removeItem(otherItem2);
            return expect(otherItem2.save).toHaveBeenCalled();
          });
        });
        return describe("when the item is NOT the active item", function() {
          return it("does not save the item if autosave is enabled and the item has a uri", function() {
            var leftPane, rightPane;
            leftPane = atom.workspaceView.getActivePane();
            rightPane = leftPane.splitRight(otherItem1);
            expect(initialActiveItem).not.toBe(atom.workspaceView.getActivePaneItem());
            leftPane.removeItem(initialActiveItem);
            expect(initialActiveItem.save).not.toHaveBeenCalled();
            otherItem2.setText("I am also modified");
            atom.config.set("autosave.enabled", true);
            leftPane = rightPane.splitLeft(otherItem2);
            rightPane.focus();
            expect(otherItem2).not.toBe(atom.workspaceView.getActivePaneItem());
            leftPane.removeItem(otherItem2);
            return expect(otherItem2.save).toHaveBeenCalled();
          });
        });
      });
      return describe("when the item does not have a URI", function() {
        return it("does not save the item", function() {
          var pathLessItem;
          pathLessItem = atom.workspaceView.openSync();
          spyOn(pathLessItem, 'save').andCallThrough();
          pathLessItem.setText('text!');
          expect(pathLessItem.getUri()).toBeFalsy();
          atom.config.set('autosave.enabled', true);
          atom.workspaceView.getActivePane().removeItem(pathLessItem);
          return expect(pathLessItem.save).not.toHaveBeenCalled();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/autosave/spec/autosave-spec.js.map
