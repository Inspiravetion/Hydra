(function() {
  var $, KeyBindingResolverView, WorkspaceView, _ref;

  KeyBindingResolverView = require('../lib/keybinding-resolver-view');

  _ref = require('atom'), $ = _ref.$, WorkspaceView = _ref.WorkspaceView;

  describe("KeyBindingResolverView", function() {
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView;
      return waitsForPromise(function() {
        return atom.packages.activatePackage('keybinding-resolver');
      });
    });
    describe("when the key-binding-resolver:toggle event is triggered", function() {
      return it("attaches and then detaches the view", function() {
        expect(atom.workspaceView.find('.key-binding-resolver')).not.toExist();
        atom.workspaceView.trigger('key-binding-resolver:toggle');
        expect(atom.workspaceView.find('.key-binding-resolver')).toExist();
        atom.workspaceView.trigger('key-binding-resolver:toggle');
        return expect(atom.workspaceView.find('.key-binding-resolver')).not.toExist();
      });
    });
    return describe("when a keydown event occurs", function() {
      return it("displays all commands for the event", function() {
        atom.keymap.bindKeys('name', '.workspace', {
          'x': 'match-1'
        });
        atom.keymap.bindKeys('name', '.workspace', {
          'x': 'match-2'
        });
        atom.keymap.bindKeys('name', '.never-again', {
          'x': 'unmatch-2'
        });
        atom.workspaceView.trigger('key-binding-resolver:toggle');
        $(document).trigger(keydownEvent('x', {
          target: atom.workspaceView
        }));
        expect(atom.workspaceView.find('.key-binding-resolver .used')).toHaveLength(1);
        expect(atom.workspaceView.find('.key-binding-resolver .unused')).toHaveLength(1);
        return expect(atom.workspaceView.find('.key-binding-resolver .unmatched')).toHaveLength(1);
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/keybinding-resolver/spec/keybinding-resolver-view-spec.js.map
