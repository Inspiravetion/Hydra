(function() {
  var $, BackgroundTipsView, WorkspaceView, _ref;

  _ref = require('atom'), WorkspaceView = _ref.WorkspaceView, $ = _ref.$;

  BackgroundTipsView = require('../lib/background-tips-view');

  describe("BackgroundTips", function() {
    var activatePackage, backgroundTips, backgroundTipsView, _ref1;
    _ref1 = [], backgroundTips = _ref1[0], backgroundTipsView = _ref1[1];
    beforeEach(function() {
      BackgroundTipsView.displayDuration = 50;
      return BackgroundTipsView.fadeDuration = 1;
    });
    activatePackage = function(callback) {
      waitsForPromise(function() {
        return atom.packages.activatePackage('background-tips').then(function(_arg) {
          var mainModule;
          mainModule = _arg.mainModule;
          return backgroundTipsView = mainModule.backgroundTipsView, mainModule;
        });
      });
      return runs(function() {
        return callback();
      });
    };
    describe("when the package is activated when there is only one pane", function() {
      beforeEach(function() {
        atom.workspaceView = new WorkspaceView;
        return expect(atom.workspaceView.getPanes().length).toBe(1);
      });
      describe("when the pane is empty", function() {
        return it("attaches the view after a delay", function() {
          expect(atom.workspaceView.getActivePane().getItems().length).toBe(0);
          return activatePackage(function() {
            expect(backgroundTipsView.parent()).not.toExist();
            advanceClock(BackgroundTipsView.startDelay + 1);
            return expect(backgroundTipsView.parent()).toExist();
          });
        });
      });
      describe("when the pane is not empty", function() {
        return it("does not attach the view", function() {
          atom.workspaceView.getActivePane().activateItem($("item"));
          return activatePackage(function() {
            advanceClock(BackgroundTipsView.startDelay + 1);
            return expect(backgroundTipsView.parent()).not.toExist();
          });
        });
      });
      return describe("when a second pane is created", function() {
        return it("detaches the view", function() {
          return activatePackage(function() {
            advanceClock(BackgroundTipsView.startDelay + 1);
            expect(backgroundTipsView.parent()).toExist();
            atom.workspaceView.getActivePane().splitRight();
            return expect(backgroundTipsView.parent()).not.toExist();
          });
        });
      });
    });
    describe("when the package is activated when there are multiple panes", function() {
      beforeEach(function() {
        atom.workspaceView = new WorkspaceView;
        atom.workspaceView.getActivePane().splitRight();
        return expect(atom.workspaceView.getPanes().length).toBe(2);
      });
      it("does not attach the view", function() {
        return activatePackage(function() {
          advanceClock(BackgroundTipsView.startDelay + 1);
          return expect(backgroundTipsView.parent()).not.toExist();
        });
      });
      return describe("when all but the last pane is destroyed", function() {
        return it("attaches the view", function() {
          return activatePackage(function() {
            atom.workspaceView.getActivePane().remove();
            advanceClock(BackgroundTipsView.startDelay + 1);
            return expect(backgroundTipsView.parent()).toExist();
          });
        });
      });
    });
    return describe("when the view is attached", function() {
      beforeEach(function() {
        atom.workspaceView = new WorkspaceView;
        expect(atom.workspaceView.getPanes().length).toBe(1);
        return activatePackage(function() {
          return advanceClock(BackgroundTipsView.startDelay + 1);
        });
      });
      it("has text in the message", function() {
        return expect(backgroundTipsView.message.text()).toBeTruthy();
      });
      return it("changes text in the message", function() {
        var oldText;
        oldText = backgroundTipsView.message.text();
        waits(BackgroundTipsView.displayDuration + BackgroundTipsView.fadeDuration);
        return runs(function() {
          return expect(backgroundTipsView.message.text()).not.toEqual(oldText);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/background-tips/spec/background-tips-spec.js.map
