(function() {
  var CursorPositionView, View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('atom').View;

  module.exports = CursorPositionView = (function(_super) {
    __extends(CursorPositionView, _super);

    function CursorPositionView() {
      this.updateCursorPositionText = __bind(this.updateCursorPositionText, this);
      return CursorPositionView.__super__.constructor.apply(this, arguments);
    }

    CursorPositionView.content = function() {
      return this.div({
        "class": 'cursor-position inline-block'
      });
    };

    CursorPositionView.prototype.initialize = function(statusBar) {
      this.statusBar = statusBar;
      this.subscribe(this.statusBar, 'active-buffer-changed', this.updateCursorPositionText);
      return this.subscribe(atom.workspaceView, 'cursor:moved', this.updateCursorPositionText);
    };

    CursorPositionView.prototype.destroy = function() {
      return this.remove();
    };

    CursorPositionView.prototype.afterAttach = function() {
      return this.updateCursorPositionText();
    };

    CursorPositionView.prototype.updateCursorPositionText = function() {
      var editor, position;
      editor = atom.workspace.getActiveEditor();
      if (position = editor != null ? editor.getCursorBufferPosition() : void 0) {
        return this.text("" + (position.row + 1) + "," + (position.column + 1)).show();
      } else {
        return this.hide();
      }
    };

    return CursorPositionView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/status-bar/lib/cursor-position-view.js.map
