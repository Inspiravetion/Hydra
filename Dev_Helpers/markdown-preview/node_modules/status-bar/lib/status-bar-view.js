(function() {
  var StatusBarView, View,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('atom').View;

  module.exports = StatusBarView = (function(_super) {
    __extends(StatusBarView, _super);

    function StatusBarView() {
      return StatusBarView.__super__.constructor.apply(this, arguments);
    }

    StatusBarView.content = function() {
      return this.div({
        "class": 'status-bar tool-panel panel-bottom'
      }, (function(_this) {
        return function() {
          return _this.div({
            "class": 'flexbox-repaint-hack'
          }, function() {
            _this.div({
              outlet: 'rightPanel',
              "class": 'status-bar-right pull-right'
            });
            return _this.div({
              outlet: 'leftPanel',
              "class": 'status-bar-left'
            });
          });
        };
      })(this));
    };

    StatusBarView.prototype.initialize = function() {
      atom.workspaceView.statusBar = this;
      this.bufferSubscriptions = [];
      this.subscribe(atom.workspaceView, 'pane-container:active-pane-item-changed', (function(_this) {
        return function() {
          _this.unsubscribeAllFromBuffer();
          _this.storeActiveBuffer();
          _this.subscribeAllToBuffer();
          return _this.trigger('active-buffer-changed');
        };
      })(this));
      return this.storeActiveBuffer();
    };

    StatusBarView.prototype.attach = function() {
      if (!this.hasParent()) {
        return atom.workspaceView.appendToBottom(this);
      }
    };

    StatusBarView.prototype.destroy = function() {
      this.remove();
      return atom.workspaceView.statusBar = null;
    };

    StatusBarView.prototype.appendLeft = function(view) {
      return this.leftPanel.append(view);
    };

    StatusBarView.prototype.prependLeft = function(view) {
      return this.leftPanel.prepend(view);
    };

    StatusBarView.prototype.appendRight = function(view) {
      return this.rightPanel.append(view);
    };

    StatusBarView.prototype.prependRight = function(view) {
      return this.rightPanel.prepend(view);
    };

    StatusBarView.prototype.getActiveBuffer = function() {
      return this.buffer;
    };

    StatusBarView.prototype.getActiveItem = function() {
      return atom.workspaceView.getActivePaneItem();
    };

    StatusBarView.prototype.storeActiveBuffer = function() {
      var _ref;
      return this.buffer = (_ref = this.getActiveItem()) != null ? typeof _ref.getBuffer === "function" ? _ref.getBuffer() : void 0 : void 0;
    };

    StatusBarView.prototype.subscribeToBuffer = function(event, callback) {
      this.bufferSubscriptions.push([event, callback]);
      if (this.buffer) {
        return this.buffer.on(event, callback);
      }
    };

    StatusBarView.prototype.subscribeAllToBuffer = function() {
      var callback, event, _i, _len, _ref, _ref1, _results;
      if (!this.buffer) {
        return;
      }
      _ref = this.bufferSubscriptions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], event = _ref1[0], callback = _ref1[1];
        _results.push(this.buffer.on(event, callback));
      }
      return _results;
    };

    StatusBarView.prototype.unsubscribeAllFromBuffer = function() {
      var callback, event, _i, _len, _ref, _ref1, _results;
      if (!this.buffer) {
        return;
      }
      _ref = this.bufferSubscriptions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], event = _ref1[0], callback = _ref1[1];
        _results.push(this.buffer.off(event, callback));
      }
      return _results;
    };

    return StatusBarView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/status-bar/lib/status-bar-view.js.map
