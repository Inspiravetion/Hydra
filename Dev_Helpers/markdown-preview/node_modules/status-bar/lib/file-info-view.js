(function() {
  var FileInfoView, View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('atom').View;

  module.exports = FileInfoView = (function(_super) {
    __extends(FileInfoView, _super);

    function FileInfoView() {
      this.update = __bind(this.update, this);
      return FileInfoView.__super__.constructor.apply(this, arguments);
    }

    FileInfoView.content = function() {
      return this.div({
        "class": 'file-info inline-block'
      }, (function(_this) {
        return function() {
          _this.span({
            "class": 'current-path',
            outlet: 'currentPath'
          });
          return _this.span({
            "class": 'buffer-modified',
            outlet: 'bufferModified'
          });
        };
      })(this));
    };

    FileInfoView.prototype.initialize = function(statusBar) {
      this.statusBar = statusBar;
      this.subscribe(this.statusBar, 'active-buffer-changed', this.update);
      this.statusBar.subscribeToBuffer('saved modified-status-changed', this.update);
      return this.subscribe(atom.workspaceView, 'pane:active-item-title-changed', this.update);
    };

    FileInfoView.prototype.destroy = function() {
      return this.remove();
    };

    FileInfoView.prototype.afterAttach = function() {
      return this.updatePathText();
    };

    FileInfoView.prototype.getActiveItem = function() {
      return atom.workspaceView.getActivePaneItem();
    };

    FileInfoView.prototype.update = function() {
      var _ref;
      this.updatePathText();
      return this.updateBufferHasModifiedText((_ref = this.statusBar.getActiveBuffer()) != null ? _ref.isModified() : void 0);
    };

    FileInfoView.prototype.updateBufferHasModifiedText = function(isModified) {
      if (isModified) {
        if (!this.isModified) {
          this.bufferModified.text('*');
        }
        return this.isModified = true;
      } else {
        if (this.isModified) {
          this.bufferModified.text('');
        }
        return this.isModified = false;
      }
    };

    FileInfoView.prototype.updatePathText = function() {
      var path, title, _ref, _ref1;
      if (path = (_ref = this.getActiveItem()) != null ? typeof _ref.getPath === "function" ? _ref.getPath() : void 0 : void 0) {
        return this.currentPath.text(atom.project.relativize(path)).show();
      } else if (title = (_ref1 = this.getActiveItem()) != null ? typeof _ref1.getTitle === "function" ? _ref1.getTitle() : void 0 : void 0) {
        return this.currentPath.text(title).show();
      } else {
        return this.currentPath.hide();
      }
    };

    return FileInfoView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/status-bar/lib/file-info-view.js.map
