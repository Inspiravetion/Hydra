(function() {
  var GitView, View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('atom').View;

  module.exports = GitView = (function(_super) {
    __extends(GitView, _super);

    function GitView() {
      this.update = __bind(this.update, this);
      this.subscribeToRepo = __bind(this.subscribeToRepo, this);
      return GitView.__super__.constructor.apply(this, arguments);
    }

    GitView.content = function() {
      return this.div({
        "class": 'git-view'
      }, (function(_this) {
        return function() {
          _this.div({
            "class": 'git-branch inline-block',
            outlet: 'branchArea'
          }, function() {
            _this.span({
              "class": 'icon icon-git-branch'
            });
            return _this.span({
              "class": 'branch-label',
              outlet: 'branchLabel'
            });
          });
          _this.div({
            "class": 'git-commits inline-block',
            outlet: 'commitsArea'
          }, function() {
            _this.span({
              "class": 'icon icon-arrow-up commits-ahead-label',
              outlet: 'commitsAhead'
            });
            return _this.span({
              "class": 'icon icon-arrow-down commits-behind-label',
              outlet: 'commitsBehind'
            });
          });
          return _this.div({
            "class": 'git-status inline-block',
            outlet: 'gitStatus'
          }, function() {
            return _this.span({
              outlet: 'gitStatusIcon'
            });
          });
        };
      })(this));
    };

    GitView.prototype.initialize = function(statusBar) {
      this.statusBar = statusBar;
      this.statusBar.subscribeToBuffer('saved', this.update);
      this.subscribe(atom.workspaceView, 'pane-container:active-pane-item-changed', this.update);
      this.subscribe(atom.project, 'path-changed', this.subscribeToRepo);
      return this.subscribeToRepo();
    };

    GitView.prototype.destroy = function() {
      if (this.repo != null) {
        this.unsubscribe(this.repo);
      }
      this.repo = null;
      return this.remove();
    };

    GitView.prototype.afterAttach = function() {
      return this.update();
    };

    GitView.prototype.getActiveItemPath = function() {
      var _ref;
      return (_ref = this.getActiveItem()) != null ? typeof _ref.getPath === "function" ? _ref.getPath() : void 0 : void 0;
    };

    GitView.prototype.getActiveItem = function() {
      return atom.workspaceView.getActivePaneItem();
    };

    GitView.prototype.getActiveView = function() {
      return atom.workspaceView.getActiveView();
    };

    GitView.prototype.subscribeToRepo = function() {
      var repo;
      if (this.repo != null) {
        this.unsubscribe(this.repo);
      }
      if (repo = atom.project.getRepo()) {
        this.repo = repo;
        this.subscribe(repo, 'status-changed', (function(_this) {
          return function(path, status) {
            if (path === _this.getActiveItemPath()) {
              return _this.update();
            }
          };
        })(this));
        return this.subscribe(repo, 'statuses-changed', this.update);
      }
    };

    GitView.prototype.update = function() {
      this.updateBranchText();
      return this.updateStatusText();
    };

    GitView.prototype.updateBranchText = function() {
      var head, _ref;
      this.branchArea.hide();
      if (this.showBranchInformation()) {
        head = ((_ref = atom.project.getRepo()) != null ? _ref.getShortHead(this.getActiveItemPath()) : void 0) || '';
        this.branchLabel.text(head);
        if (head) {
          return this.branchArea.show();
        }
      }
    };

    GitView.prototype.showBranchInformation = function() {
      var itemPath;
      if (itemPath = this.getActiveItemPath()) {
        return atom.project.contains(itemPath);
      } else {
        return this.getActiveItem() == null;
      }
    };

    GitView.prototype.updateStatusText = function() {
      var ahead, behind, itemPath, repo, stats, status, _ref, _ref1, _ref2;
      itemPath = this.getActiveItemPath();
      this.gitStatus.hide();
      this.commitsArea.hide();
      repo = atom.project.getRepo();
      if (repo == null) {
        return;
      }
      if (this.showBranchInformation()) {
        _ref1 = (_ref = repo.getCachedUpstreamAheadBehindCount(itemPath)) != null ? _ref : {}, ahead = _ref1.ahead, behind = _ref1.behind;
        if (ahead > 0) {
          this.commitsAhead.text(ahead).show();
        } else {
          this.commitsAhead.hide();
        }
        if (behind > 0) {
          this.commitsBehind.text(behind).show();
        } else {
          this.commitsBehind.hide();
        }
        if (ahead > 0 || behind > 0) {
          this.commitsArea.show();
        }
      }
      status = (_ref2 = repo.getCachedPathStatus(itemPath)) != null ? _ref2 : 0;
      this.gitStatusIcon.removeClass();
      if (repo.isStatusModified(status)) {
        this.gitStatusIcon.addClass('icon icon-diff-modified status-modified');
        stats = repo.getDiffStats(itemPath);
        if (stats.added && stats.deleted) {
          this.gitStatusIcon.text("+" + stats.added + ", -" + stats.deleted);
        } else if (stats.added) {
          this.gitStatusIcon.text("+" + stats.added);
        } else if (stats.deleted) {
          this.gitStatusIcon.text("-" + stats.deleted);
        } else {
          this.gitStatusIcon.text('');
        }
      } else if (repo.isStatusNew(status)) {
        this.gitStatusIcon.addClass('icon icon-diff-added status-added');
        if (this.statusBar.getActiveBuffer() != null) {
          this.gitStatusIcon.text("+" + (this.statusBar.getActiveBuffer().getLineCount()));
        } else {
          this.gitStatusIcon.text('');
        }
      } else if (repo.isPathIgnored(itemPath)) {
        this.gitStatusIcon.addClass('icon icon-diff-ignored status-ignored');
        this.gitStatusIcon.text('');
      }
      if (this.gitStatusIcon.attr('class')) {
        return this.gitStatus.show();
      } else {
        return this.gitStatus.hide();
      }
    };

    return GitView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/status-bar/lib/git-view.js.map
