(function() {
  var MisspellingView, SpellCheckTask, SpellCheckView, View, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  View = require('atom').View;

  MisspellingView = require('./misspelling-view');

  SpellCheckTask = require('./spell-check-task');

  module.exports = SpellCheckView = (function(_super) {
    __extends(SpellCheckView, _super);

    function SpellCheckView() {
      return SpellCheckView.__super__.constructor.apply(this, arguments);
    }

    SpellCheckView.content = function() {
      return this.div({
        "class": 'spell-check'
      });
    };

    SpellCheckView.prototype.initialize = function(editorView) {
      this.editorView = editorView;
      this.views = [];
      this.task = new SpellCheckTask();
      this.subscribe(this.editorView, 'editor:path-changed', (function(_this) {
        return function() {
          return _this.subscribeToBuffer();
        };
      })(this));
      this.subscribe(this.editorView, 'editor:grammar-changed', (function(_this) {
        return function() {
          return _this.subscribeToBuffer();
        };
      })(this));
      this.subscribe(atom.config.observe('editor.fontSize', {
        callNow: false
      }, (function(_this) {
        return function() {
          return _this.subscribeToBuffer();
        };
      })(this)));
      this.subscribe(atom.config.observe('spell-check.grammars', {
        callNow: false
      }, (function(_this) {
        return function() {
          return _this.subscribeToBuffer();
        };
      })(this)));
      return this.subscribeToBuffer();
    };

    SpellCheckView.prototype.beforeRemove = function() {
      this.unsubscribeFromBuffer();
      return this.task.terminate();
    };

    SpellCheckView.prototype.unsubscribeFromBuffer = function() {
      this.destroyViews();
      if (this.buffer != null) {
        this.unsubscribe(this.buffer);
        return this.buffer = null;
      }
    };

    SpellCheckView.prototype.subscribeToBuffer = function() {
      this.unsubscribeFromBuffer();
      if (this.spellCheckCurrentGrammar()) {
        this.buffer = this.editorView.getEditor().getBuffer();
        this.subscribe(this.buffer, 'contents-modified', (function(_this) {
          return function() {
            return _this.updateMisspellings();
          };
        })(this));
        return this.updateMisspellings();
      }
    };

    SpellCheckView.prototype.spellCheckCurrentGrammar = function() {
      var grammar;
      grammar = this.editorView.getEditor().getGrammar().scopeName;
      return _.contains(atom.config.get('spell-check.grammars'), grammar);
    };

    SpellCheckView.prototype.destroyViews = function() {
      var view, _results;
      _results = [];
      while (view = this.views.shift()) {
        _results.push(view.destroy());
      }
      return _results;
    };

    SpellCheckView.prototype.addViews = function(misspellings) {
      var misspelling, view, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = misspellings.length; _i < _len; _i++) {
        misspelling = misspellings[_i];
        view = new MisspellingView(misspelling, this.editorView);
        this.views.push(view);
        _results.push(this.append(view));
      }
      return _results;
    };

    SpellCheckView.prototype.updateMisspellings = function() {
      return this.task.start(this.buffer.getText(), (function(_this) {
        return function(misspellings) {
          _this.destroyViews();
          if (_this.buffer != null) {
            return _this.addViews(misspellings);
          }
        };
      })(this));
    };

    return SpellCheckView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/spell-check/lib/spell-check-view.js.map
