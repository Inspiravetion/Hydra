(function() {
  var WorkspaceView;

  WorkspaceView = require('atom').WorkspaceView;

  describe("Spell check", function() {
    var editorView;
    editorView = [][0];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-text');
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-javascript');
      });
      runs(function() {
        atom.workspaceView = new WorkspaceView;
        atom.workspaceView.openSync('sample.js');
        return atom.config.set('spell-check.grammars', []);
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage('spell-check');
      });
      return runs(function() {
        atom.workspaceView.attachToDom();
        return editorView = atom.workspaceView.getActiveView();
      });
    });
    it("decorates all misspelled words", function() {
      editorView.setText("This middle of thiss sentencts has issues.");
      atom.config.set('spell-check.grammars', ['source.js']);
      waitsFor(function() {
        return editorView.find('.misspelling').length > 0;
      });
      return runs(function() {
        var typo1EndPosition, typo1StartPosition, typo2EndPosition, typo2StartPosition;
        expect(editorView.find('.misspelling').length).toBe(2);
        typo1StartPosition = editorView.pixelPositionForBufferPosition([0, 15]);
        typo1EndPosition = editorView.pixelPositionForBufferPosition([0, 20]);
        expect(editorView.find('.misspelling:eq(0)').position()).toEqual(typo1StartPosition);
        expect(editorView.find('.misspelling:eq(0)').width()).toBe(typo1EndPosition.left - typo1StartPosition.left);
        typo2StartPosition = editorView.pixelPositionForBufferPosition([0, 21]);
        typo2EndPosition = editorView.pixelPositionForBufferPosition([0, 30]);
        expect(editorView.find('.misspelling:eq(1)').position()).toEqual(typo2StartPosition);
        return expect(editorView.find('.misspelling:eq(1)').width()).toBe(typo2EndPosition.left - typo2StartPosition.left);
      });
    });
    it("hides decorations when a misspelled word is edited", function() {
      editorView.setText('notaword');
      advanceClock(editorView.getEditor().getBuffer().stoppedChangingDelay);
      atom.config.set('spell-check.grammars', ['source.js']);
      waitsFor(function() {
        return editorView.find('.misspelling').length > 0;
      });
      return runs(function() {
        expect(editorView.find('.misspelling').length).toBe(1);
        editorView.getEditor().moveCursorToEndOfLine();
        editorView.insertText('a');
        advanceClock(editorView.getEditor().getBuffer().stoppedChangingDelay);
        return expect(editorView.find('.misspelling')).toBeHidden();
      });
    });
    describe("when spell checking for a grammar is removed", function() {
      return it("removes all the misspellings", function() {
        editorView.setText('notaword');
        advanceClock(editorView.getEditor().getBuffer().stoppedChangingDelay);
        atom.config.set('spell-check.grammars', ['source.js']);
        waitsFor(function() {
          return editorView.find('.misspelling').length > 0;
        });
        return runs(function() {
          expect(editorView.find('.misspelling').length).toBe(1);
          atom.config.set('spell-check.grammars', []);
          return expect(editorView.find('.misspelling').length).toBe(0);
        });
      });
    });
    describe("when the editor's grammar changes to one that does not have spell check enabled", function() {
      return it("removes all the misspellings", function() {
        editorView.setText('notaword');
        advanceClock(editorView.getEditor().getBuffer().stoppedChangingDelay);
        atom.config.set('spell-check.grammars', ['source.js']);
        waitsFor(function() {
          return editorView.find('.misspelling').length > 0;
        });
        return runs(function() {
          expect(editorView.find('.misspelling').length).toBe(1);
          atom.syntax.setGrammarOverrideForPath(editorView.getEditor().getPath(), 'text.plain');
          editorView.getEditor().reloadGrammar();
          return expect(editorView.find('.misspelling').length).toBe(0);
        });
      });
    });
    describe("when 'spell-check:correct-misspelling' is triggered on the editor", function() {
      describe("when the cursor touches a misspelling that has corrections", function() {
        return it("displays the corrections for the misspelling and replaces the misspelling when a correction is selected", function() {
          editorView.setText('tofether');
          advanceClock(editorView.getEditor().getBuffer().stoppedChangingDelay);
          atom.config.set('spell-check.grammars', ['source.js']);
          waitsFor(function() {
            return editorView.find('.misspelling').length > 0;
          });
          return runs(function() {
            editorView.trigger('spell-check:correct-misspelling');
            expect(editorView.find('.corrections').length).toBe(1);
            expect(editorView.find('.corrections li').length).toBeGreaterThan(0);
            expect(editorView.find('.corrections li:first').text()).toBe("together");
            editorView.find('.corrections').view().confirmSelection();
            expect(editorView.getText()).toBe('together');
            expect(editorView.getEditor().getCursorBufferPosition()).toEqual([0, 8]);
            advanceClock(editorView.getEditor().getBuffer().stoppedChangingDelay);
            expect(editorView.find('.misspelling')).toBeHidden();
            return expect(editorView.find('.corrections').length).toBe(0);
          });
        });
      });
      return describe("when the cursor touches a misspelling that has no corrections", function() {
        return it("displays a message saying no corrections found", function() {
          editorView.setText('zxcasdfysyadfyasdyfasdfyasdfyasdfyasydfasdf');
          advanceClock(editorView.getEditor().getBuffer().stoppedChangingDelay);
          atom.config.set('spell-check.grammars', ['source.js']);
          waitsFor(function() {
            return editorView.find('.misspelling').length > 0;
          });
          return runs(function() {
            editorView.trigger('spell-check:correct-misspelling');
            expect(editorView.find('.corrections').length).toBe(1);
            expect(editorView.find('.corrections li').length).toBe(0);
            return expect(editorView.find('.corrections').view().error.text()).toBe("No corrections");
          });
        });
      });
    });
    return describe("when the editor is destroyed", function() {
      return it("destroys all misspelling markers", function() {
        editorView.setText("mispelling");
        atom.config.set('spell-check.grammars', ['source.js']);
        waitsFor(function() {
          return editorView.find('.misspelling').length > 0;
        });
        return runs(function() {
          var buffer, view;
          expect(editorView.find('.misspelling').length).toBe(1);
          view = editorView.find('.misspelling').view();
          buffer = editorView.getEditor().getBuffer();
          expect(view.marker.isDestroyed()).toBeFalsy();
          editorView.remove();
          return expect(view.marker.isDestroyed()).toBeTruthy();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/spell-check/spec/spell-check-spec.js.map
