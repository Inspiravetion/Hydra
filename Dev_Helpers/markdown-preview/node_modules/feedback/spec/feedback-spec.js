(function() {
  var $, FeedbackFormView, Q, WorkspaceView, _ref;

  _ref = require('atom'), $ = _ref.$, WorkspaceView = _ref.WorkspaceView;

  Q = require('q');

  FeedbackFormView = require('../lib/feedback-form-view');

  describe("Feedback", function() {
    var form;
    form = [][0];
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView;
      form = new FeedbackFormView;
      return form.email.val('mspacman@pacman.com');
    });
    it("displays the feedback form", function() {
      return expect(atom.workspaceView.find('.feedback')).toExist();
    });
    it("maintains feedback values between toggles", function() {
      form.feedbackText.val('who wants to live forever');
      form.trigger('core:cancel');
      form = new FeedbackFormView;
      return expect(form.feedbackText.val()).toBe('who wants to live forever');
    });
    it("clears feedback values when feedback is sent", function() {
      form.feedbackText.val("text");
      spyOn(form, 'postFeedback').andReturn(Q(''));
      waitsForPromise(function() {
        return form.send();
      });
      return runs(function() {
        atom.workspaceView.trigger('core:cancel');
        form = new FeedbackFormView;
        return expect(form.feedbackText.val()).toBeFalsy();
      });
    });
    it('remembers the user email', function() {
      spyOn(form, 'postFeedback').andReturn(Q(''));
      expect(form.email.val()).not.toBe('blinky@pacman.com');
      form.feedbackText.val('pacman is evil');
      form.email.val("blinky@pacman.com");
      waitsForPromise(function() {
        return form.send();
      });
      return runs(function() {
        form = new FeedbackFormView;
        return expect(form.email.val()).toBe('blinky@pacman.com');
      });
    });
    describe("When there is no feedback text", function() {
      return it("displays an error", function() {
        form.sendButton.click();
        expect(form.sendingError.find(':visible')).toBeTruthy();
        return expect(form.sendingError.text().length).toBeGreaterThan(0);
      });
    });
    return describe("When there is feedback text", function() {
      beforeEach(function() {
        return form.feedbackText.val("pacman");
      });
      it("posts feedback", function() {
        spyOn(form, 'postFeedback').andReturn(Q(''));
        return waitsForPromise(function() {
          return form.send();
        });
      });
      return describe("When there is no email", function() {
        beforeEach(function() {
          spyOn(atom, 'getGitHubAuthToken').andReturn(null);
          return spyOn(form, 'requestViaPromise').andReturn(Q({
            html_url: "some-url"
          }));
        });
        return it("shows an error", function() {
          form.email.val('bad');
          waitsForPromise(function() {
            return form.send();
          });
          return runs(function() {
            return expect(form.sendingError.text()).toBe("'bad' is not a valid email address");
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/feedback/spec/feedback-spec.js.map
