(function() {
  var $, FeedbackFormView, Q, StoredFeedbackText, View, fs, path, request, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  _ref = require('atom'), $ = _ref.$, View = _ref.View;

  Q = require('q');

  request = require('request');

  StoredFeedbackText = null;

  module.exports = FeedbackFormView = (function(_super) {
    __extends(FeedbackFormView, _super);

    function FeedbackFormView() {
      return FeedbackFormView.__super__.constructor.apply(this, arguments);
    }

    FeedbackFormView.content = function() {
      return this.div({
        tabindex: -1,
        "class": 'feedback overlay from-top'
      }, (function(_this) {
        return function() {
          _this.div({
            outlet: 'inputForm',
            "class": 'input'
          }, function() {
            _this.h1("Send us feedback");
            _this.p(function() {
              _this.span("This information will be sent to ");
              return _this.a({
                href: 'mailto:support@atom.io'
              }, 'atom@github.com');
            });
            _this.div({
              "class": 'block'
            }, function() {
              return _this.textarea({
                outlet: 'feedbackText',
                "class": 'native-key-bindings',
                rows: 5,
                placeholder: "Let us know what we can do better."
              });
            });
            _this.div({
              "class": 'block'
            }, function() {
              _this.input({
                outlet: 'email',
                type: 'text',
                "class": 'native-key-bindings',
                placeholder: "Email Address (required)"
              });
              return _this.span({
                type: 'text',
                "class": 'initially-hidden'
              });
            });
            _this.div({
              "class": 'block'
            }, function() {
              return _this.div(function() {
                _this.input({
                  outlet: 'attachDebugInfo',
                  "class": 'native-key-bindings',
                  id: 'attach-debug-info',
                  type: 'checkbox'
                });
                return _this.label({
                  "for": 'attach-debug-info'
                }, "Attach debug info (includes text of open buffers)");
              });
            });
            _this.div(function() {
              return _this.button({
                outlet: 'sendButton',
                "class": 'btn btn-lg'
              }, 'Send Feedback');
            });
            return _this.div({
              outlet: 'sendingError',
              "class": 'sending-error block initially-hidden'
            });
          });
          return _this.div({
            outlet: 'outputForm',
            tabindex: -1,
            "class": 'output initially-hidden'
          }, function() {
            _this.h1("Thanks for the feedback!");
            return _this.div(function() {
              _this.span("An email was sent to ");
              return _this.a({
                href: 'mailto:atom@github.com'
              }, 'atom@github.com');
            });
          });
        };
      })(this));
    };

    FeedbackFormView.prototype.initialize = function() {
      this.subscribe(this.sendButton, 'click', (function(_this) {
        return function() {
          return _this.send();
        };
      })(this));
      this.subscribe(this, 'feedback:send', (function(_this) {
        return function() {
          return _this.send();
        };
      })(this));
      this.subscribe(atom.workspaceView, 'core:cancel', (function(_this) {
        return function() {
          return _this.detach();
        };
      })(this));
      this.subscribe(this, 'focusout', (function(_this) {
        return function() {
          return process.nextTick(function() {
            if (!(_this.is(':focus') || _this.find(':focus').length > 0)) {
              return _this.detach();
            }
          });
        };
      })(this));
      this.subscribe(this, 'feedback:tab', (function(_this) {
        return function() {
          var elements, _ref1;
          elements = _this.find('input, textarea, button');
          return ((_ref1 = elements[elements.index(_this.find(':focus')) + 1]) != null ? _ref1 : _this.feedbackText).focus();
        };
      })(this));
      this.subscribe(this, 'feedback:tab-previous', (function(_this) {
        return function() {
          var elements, _ref1;
          elements = _this.find('input, textarea, button');
          return ((_ref1 = elements[elements.index(_this.find(':focus')) - 1]) != null ? _ref1 : _this.sendButton).focus();
        };
      })(this));
      this.email.val(atom.config.get('feedback.email'));
      this.feedbackText.val(StoredFeedbackText);
      atom.workspaceView.prepend(this);
      return this.feedbackText.focus();
    };

    FeedbackFormView.prototype.detach = function() {
      StoredFeedbackText = this.feedbackText.val();
      this.unsubscribe();
      atom.workspaceView.focus();
      return FeedbackFormView.__super__.detach.call(this);
    };

    FeedbackFormView.prototype.send = function() {
      this.sendingError.hide();
      this.sendButton.disable();
      this.focus();
      if (!this.feedbackText.val().trim()) {
        this.showError("Please enter your feedback");
        return Q("");
      }
      if (!this.email.val().trim()) {
        this.showError("Please enter your email address");
        return Q("");
      }
      if (!/\S+@\S+/.test(this.email.val())) {
        this.showError("'" + (this.email.val()) + "' is not a valid email address");
        return Q("");
      }
      return Q("start").then((function(_this) {
        return function() {
          return _this.postFeedback();
        };
      })(this)).then((function(_this) {
        return function() {
          atom.config.set('feedback.email', _this.email.val());
          _this.feedbackText.val(null);
          _this.inputForm.hide();
          return _this.outputForm.show().focus().one('blur', function() {
            return _this.detach();
          });
        };
      })(this)).fail((function(_this) {
        return function(error) {
          var _ref1, _ref2;
          return _this.showError((_ref1 = error != null ? (_ref2 = error.responseJSON) != null ? _ref2.message : void 0 : void 0) != null ? _ref1 : error);
        };
      })(this));
    };

    FeedbackFormView.prototype.showError = function(message) {
      console.error(message);
      this.sendingError.show().text(message);
      return this.sendButton.enable();
    };

    FeedbackFormView.prototype.postFeedback = function() {
      var data, options;
      data = {
        email: this.email.val().trim(),
        body: this.feedbackText.val().trim(),
        version: atom.getVersion(),
        userAgent: navigator.userAgent
      };
      if (this.attachDebugInfo.is(":checked")) {
        data.debugInfo = JSON.stringify(this.captureDebugInfo(), null, 2);
      }
      options = {
        url: 'https://atom.io/api/feedback',
        method: "POST",
        json: true,
        body: data
      };
      return this.requestViaPromise(options);
    };

    FeedbackFormView.prototype.requestViaPromise = function(options) {
      var deferred;
      if (options.headers == null) {
        options.headers = {};
      }
      options.headers['User-Agent'] = navigator.userAgent;
      deferred = Q.defer();
      request(options, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return deferred.reject(error);
          } else if (body) {
            if (body.errors != null) {
              return deferred.reject(body.errors[0].message);
            } else {
              return deferred.resolve(body);
            }
          } else {
            return deferred.reject("Failed: " + (response != null ? response.statusMessage : void 0));
          }
        };
      })(this));
      return deferred.promise;
    };

    FeedbackFormView.prototype.captureDebugInfo = function() {
      var editor, _i, _ref1, _results;
      editor = atom.workspace.getActiveEditor();
      if (!editor) {
        return {};
      }
      return {
        bufferLines: (function() {
          _results = [];
          for (var _i = 0, _ref1 = editor.getLastBufferRow(); 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this).map(function(row) {
          return "" + row + ": " + (editor.lineForBufferRow(row));
        }),
        dotAtom: this.directoryToObject(atom.config.configDirPath)
      };
    };

    FeedbackFormView.prototype.directoryToObject = function(filepath) {
      var kilobytes, name, results, stats;
      stats = fs.lstatSync(filepath);
      name = path.basename(filepath);
      if (stats.isDirectory()) {
        results = {};
        fs.readdirSync(filepath).forEach((function(_this) {
          return function(subpath) {
            if (/^\./.test(subpath)) {
              return;
            }
            return results[subpath] = _this.directoryToObject(path.join(filepath, subpath));
          };
        })(this));
        return results;
      } else if (stats.isFile()) {
        kilobytes = Math.round(stats.size / 1024);
        if (kilobytes === 0) {
          return "file: " + stats.size + "B";
        } else {
          return "file: " + kilobytes + "kB";
        }
      } else if (stats.isSymbolicLink()) {
        return fs.readlinkSync(filepath);
      }
    };

    return FeedbackFormView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/feedback/lib/feedback-form-view.js.map
