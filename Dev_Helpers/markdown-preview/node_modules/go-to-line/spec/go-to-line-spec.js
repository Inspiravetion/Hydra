(function() {
  var GoToLineView, WorkspaceView;

  WorkspaceView = require('atom').WorkspaceView;

  GoToLineView = require('../lib/go-to-line-view');

  describe('GoToLine', function() {
    var editor, editorView, goToLine, _ref;
    _ref = [], goToLine = _ref[0], editor = _ref[1], editorView = _ref[2];
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView;
      atom.workspace = atom.workspaceView.model;
      atom.workspaceView.openSync('sample.js');
      atom.workspaceView.enableKeymap();
      editorView = atom.workspaceView.getActiveView();
      editor = editorView.editor;
      goToLine = GoToLineView.activate();
      return editor.setCursorBufferPosition([1, 0]);
    });
    describe("when go-to-line:toggle is triggered", function() {
      return it("attaches to the root view", function() {
        expect(goToLine.hasParent()).toBeFalsy();
        editorView.trigger('go-to-line:toggle');
        return expect(goToLine.hasParent()).toBeTruthy();
      });
    });
    describe("when entering a line number", function() {
      return it("only allows 0-9 to be entered in the mini editor", function() {
        expect(goToLine.miniEditor.getText()).toBe('');
        goToLine.miniEditor.textInput('a');
        expect(goToLine.miniEditor.getText()).toBe('');
        goToLine.miniEditor.textInput('40');
        return expect(goToLine.miniEditor.getText()).toBe('40');
      });
    });
    describe("when core:confirm is triggered", function() {
      describe("when a line number has been entered", function() {
        return it("moves the cursor to the first character of the line", function() {
          goToLine.miniEditor.textInput('3');
          goToLine.miniEditor.trigger('core:confirm');
          return expect(editor.getCursorBufferPosition()).toEqual([2, 4]);
        });
      });
      return describe("when no line number has been entered", function() {
        return it("closes the view and does not update the cursor position", function() {
          editorView.trigger('go-to-line:toggle');
          expect(goToLine.hasParent()).toBeTruthy();
          goToLine.miniEditor.trigger('core:confirm');
          expect(goToLine.hasParent()).toBeFalsy();
          return expect(editor.getCursorBufferPosition()).toEqual([1, 0]);
        });
      });
    });
    return describe("when core:cancel is triggered", function() {
      return it("closes the view and does not update the cursor position", function() {
        editorView.trigger('go-to-line:toggle');
        expect(goToLine.hasParent()).toBeTruthy();
        goToLine.miniEditor.trigger('core:cancel');
        expect(goToLine.hasParent()).toBeFalsy();
        return expect(editor.getCursorBufferPosition()).toEqual([1, 0]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/go-to-line/spec/go-to-line-spec.js.map
