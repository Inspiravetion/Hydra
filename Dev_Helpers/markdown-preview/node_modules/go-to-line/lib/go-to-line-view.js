(function() {
  var $, EditorView, GoToLineView, Point, View, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('atom'), $ = _ref.$, EditorView = _ref.EditorView, Point = _ref.Point, View = _ref.View;

  module.exports = GoToLineView = (function(_super) {
    __extends(GoToLineView, _super);

    function GoToLineView() {
      return GoToLineView.__super__.constructor.apply(this, arguments);
    }

    GoToLineView.activate = function() {
      return new GoToLineView;
    };

    GoToLineView.content = function() {
      return this.div({
        "class": 'go-to-line overlay from-top mini'
      }, (function(_this) {
        return function() {
          _this.subview('miniEditor', new EditorView({
            mini: true
          }));
          return _this.div({
            "class": 'message',
            outlet: 'message'
          });
        };
      })(this));
    };

    GoToLineView.prototype.detaching = false;

    GoToLineView.prototype.initialize = function() {
      atom.workspaceView.command('go-to-line:toggle', '.editor', (function(_this) {
        return function() {
          return _this.toggle();
        };
      })(this));
      this.miniEditor.hiddenInput.on('focusout', (function(_this) {
        return function() {
          if (!_this.detaching) {
            return _this.detach();
          }
        };
      })(this));
      this.on('core:confirm', (function(_this) {
        return function() {
          return _this.confirm();
        };
      })(this));
      this.on('core:cancel', (function(_this) {
        return function() {
          return _this.detach();
        };
      })(this));
      return this.miniEditor.preempt('textInput', (function(_this) {
        return function(e) {
          if (!e.originalEvent.data.match(/[0-9]/)) {
            return false;
          }
        };
      })(this));
    };

    GoToLineView.prototype.toggle = function() {
      if (this.hasParent()) {
        return this.detach();
      } else {
        return this.attach();
      }
    };

    GoToLineView.prototype.detach = function() {
      var miniEditorFocused;
      if (!this.hasParent()) {
        return;
      }
      this.detaching = true;
      miniEditorFocused = this.miniEditor.isFocused;
      this.miniEditor.setText('');
      GoToLineView.__super__.detach.apply(this, arguments);
      if (miniEditorFocused) {
        this.restoreFocus();
      }
      return this.detaching = false;
    };

    GoToLineView.prototype.confirm = function() {
      var editorView, lineNumber, position;
      lineNumber = this.miniEditor.getText();
      editorView = atom.workspaceView.getActiveView();
      this.detach();
      if (!((editorView != null) && lineNumber.length)) {
        return;
      }
      position = new Point(parseInt(lineNumber - 1));
      editorView.scrollToBufferPosition(position, {
        center: true
      });
      editorView.editor.setCursorBufferPosition(position);
      return editorView.editor.moveCursorToFirstCharacterOfLine();
    };

    GoToLineView.prototype.storeFocusedElement = function() {
      return this.previouslyFocusedElement = $(':focus');
    };

    GoToLineView.prototype.restoreFocus = function() {
      var _ref1;
      if ((_ref1 = this.previouslyFocusedElement) != null ? _ref1.isOnDom() : void 0) {
        return this.previouslyFocusedElement.focus();
      } else {
        return atom.workspaceView.focus();
      }
    };

    GoToLineView.prototype.attach = function() {
      var editor;
      if (editor = atom.workspace.getActiveEditor()) {
        this.storeFocusedElement();
        atom.workspaceView.append(this);
        this.message.text("Enter a line number 1-" + (editor.getLineCount()));
        return this.miniEditor.focus();
      }
    };

    return GoToLineView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/go-to-line/lib/go-to-line-view.js.map
