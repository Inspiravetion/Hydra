(function() {
  var GrammarListView, SelectListView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SelectListView = require('atom').SelectListView;

  module.exports = GrammarListView = (function(_super) {
    __extends(GrammarListView, _super);

    function GrammarListView() {
      return GrammarListView.__super__.constructor.apply(this, arguments);
    }

    GrammarListView.prototype.initialize = function(editor) {
      this.editor = editor;
      GrammarListView.__super__.initialize.apply(this, arguments);
      this.addClass('grammar-selector from-top overlay');
      this.list.addClass('mark-active');
      this.autoDetect = {
        name: 'Auto Detect'
      };
      this.currentGrammar = this.editor.getGrammar();
      if (this.currentGrammar === atom.syntax.nullGrammar) {
        this.currentGrammar = this.autoDetect;
      }
      this.subscribe(this, 'grammar-selector:show', (function(_this) {
        return function() {
          _this.cancel();
          return false;
        };
      })(this));
      return this.setItems(this.getGrammars());
    };

    GrammarListView.prototype.getFilterKey = function() {
      return 'name';
    };

    GrammarListView.prototype.viewForItem = function(grammar) {
      var element, _ref;
      element = document.createElement('li');
      if (grammar === this.currentGrammar) {
        element.classList.add('active');
      }
      element.textContent = (_ref = grammar.name) != null ? _ref : grammar.scopeName;
      return element;
    };

    GrammarListView.prototype.confirmed = function(grammar) {
      this.cancel();
      if (grammar === this.autoDetect) {
        atom.syntax.clearGrammarOverrideForPath(this.editor.getPath());
        return this.editor.reloadGrammar();
      } else {
        atom.syntax.setGrammarOverrideForPath(this.editor.getPath(), grammar.scopeName);
        return this.editor.setGrammar(grammar);
      }
    };

    GrammarListView.prototype.attach = function() {
      this.storeFocusedElement();
      atom.workspaceView.append(this);
      return this.focusFilterEditor();
    };

    GrammarListView.prototype.getGrammars = function() {
      var grammars;
      grammars = atom.syntax.getGrammars().filter(function(grammar) {
        return grammar !== atom.syntax.nullGrammar;
      });
      grammars.sort(function(grammarA, grammarB) {
        var _ref, _ref1, _ref2, _ref3;
        if (grammarA.scopeName === 'text.plain') {
          return -1;
        } else if (grammarB.scopeName === 'text.plain') {
          return 1;
        } else {
          return (_ref = (_ref1 = (_ref2 = grammarA.name) != null ? typeof _ref2.localeCompare === "function" ? _ref2.localeCompare(grammarB.name) : void 0 : void 0) != null ? _ref1 : (_ref3 = grammarA.scopeName) != null ? typeof _ref3.localeCompare === "function" ? _ref3.localeCompare(grammarB.name) : void 0 : void 0) != null ? _ref : 1;
        }
      });
      grammars.unshift(this.autoDetect);
      return grammars;
    };

    return GrammarListView;

  })(SelectListView);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/grammar-selector/lib/grammar-list-view.js.map
