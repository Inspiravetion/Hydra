(function() {
  var GrammarStatusView, View,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('atom').View;

  module.exports = GrammarStatusView = (function(_super) {
    __extends(GrammarStatusView, _super);

    function GrammarStatusView() {
      return GrammarStatusView.__super__.constructor.apply(this, arguments);
    }

    GrammarStatusView.content = function() {
      return this.a({
        href: '#',
        "class": 'inline-block'
      });
    };

    GrammarStatusView.prototype.initialize = function(statusBar) {
      this.statusBar = statusBar;
      this.subscribe(this.statusBar, 'active-buffer-changed', (function(_this) {
        return function() {
          return _this.updateGrammarText();
        };
      })(this));
      this.subscribe(atom.workspaceView, 'editor:grammar-changed', (function(_this) {
        return function() {
          return _this.updateGrammarText();
        };
      })(this));
      return this.subscribe(this, 'click', function() {
        atom.workspaceView.trigger('grammar-selector:show');
        return false;
      });
    };

    GrammarStatusView.prototype.attach = function() {
      return this.statusBar.appendLeft(this);
    };

    GrammarStatusView.prototype.afterAttach = function() {
      return this.updateGrammarText();
    };

    GrammarStatusView.prototype.updateGrammarText = function() {
      var grammar, grammarName, _ref, _ref1;
      grammar = (_ref = atom.workspace.getActiveEditor()) != null ? typeof _ref.getGrammar === "function" ? _ref.getGrammar() : void 0 : void 0;
      if (grammar != null) {
        if (grammar === atom.syntax.nullGrammar) {
          grammarName = 'Plain Text';
        } else {
          grammarName = (_ref1 = grammar.name) != null ? _ref1 : grammar.scopeName;
        }
        return this.text(grammarName).show();
      } else {
        return this.hide();
      }
    };

    return GrammarStatusView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/grammar-selector/lib/grammar-status-view.js.map
