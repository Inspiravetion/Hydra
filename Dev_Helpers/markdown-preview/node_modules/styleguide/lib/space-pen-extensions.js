(function() {
  var $, $$, $$$, EditorView, OverlaySelectListView, View, beautifyHtml, coffee, _, _ref;

  _ = require('underscore-plus');

  _ref = require('atom'), $ = _ref.$, $$ = _ref.$$, $$$ = _ref.$$$, EditorView = _ref.EditorView, View = _ref.View;

  coffee = require('coffee-script');

  beautifyHtml = require('js-beautify').html;

  OverlaySelectListView = require('./overlay-select-list-view');

  _.extend(View, {
    exampleCode: function(spacePenCoffee) {
      var html, line, wrappedCode;
      wrappedCode = "evaluator = ->\n" + (((function() {
        var _i, _len, _ref1, _results;
        _ref1 = spacePenCoffee.split('\n');
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          line = _ref1[_i];
          _results.push('  ' + line);
        }
        return _results;
      })()).join('\n')) + "\nevaluator";
      html = $$$(function() {
        return coffee["eval"](wrappedCode).apply(this);
      });
      return this.div({
        "class": 'example'
      }, (function(_this) {
        return function() {
          _this.div({
            "class": 'example-rendered'
          }, function() {
            return _this.raw(html);
          });
          return _this.div({
            "class": 'example-code show-example-space-pen'
          }, function() {
            _this.div({
              "class": 'btn-group btn-group-xs btn-toggle'
            }, function() {
              _this.button({
                "class": 'btn selected',
                'data-display-class': 'show-example-space-pen'
              }, 'space-pen');
              return _this.button({
                "class": 'btn',
                'data-display-class': 'show-example-html'
              }, 'html');
            });
            _this.colorizedCodeBlock('example-space-pen', 'source.coffee', spacePenCoffee);
            return _this.colorizedCodeBlock('example-html', 'text.xml', beautifyHtml(html));
          });
        };
      })(this));
    },
    colorizedCodeBlock: function(cssClass, grammarScopeName, code) {
      var editorBlock, grammar, refreshHtml;
      editorBlock = $$(function() {
        return this.pre({
          "class": cssClass + ' editor-colors editor'
        }, '');
      });
      refreshHtml = function(grammar) {
        var tokens, _i, _len, _ref1, _results;
        editorBlock.empty();
        _ref1 = grammar.tokenizeLines(code);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          tokens = _ref1[_i];
          _results.push(editorBlock.append(EditorView.buildLineHtml({
            tokens: tokens,
            text: code
          })));
        }
        return _results;
      };
      if (grammar = atom.syntax.grammarForScopeName(grammarScopeName)) {
        refreshHtml(grammar);
      } else {
        atom.syntax.on('grammar-added grammar-updated', function(grammar) {
          if (grammar.scopeName !== grammarScopeName) {
            return;
          }
          return refreshHtml(grammar);
        });
      }
      return this.subview('__', editorBlock);
    },
    exampleOverlaySelectList: function(array) {
      var coffeeScript, html, selectList;
      selectList = new OverlaySelectListView(array, function(item) {
        return $$(function() {
          return this.li((function(_this) {
            return function() {
              return _this.raw(item);
            };
          })(this));
        });
      });
      html = $('<div/>').append(selectList).html();
      coffeeScript = "class OverlaySelectListView extends SelectListView\n  initialize: (@listOfItems) ->\n    super\n    @addClass('overlay from-top')\n    @setItems(@listOfItems)\n\n  attach: ->\n    atom.workspaceView.append(this)\n    @focusFilterEditor()\n\n  # Here you specify the view for an item\n  viewForItem: (item) ->\n    $$ ->\n      @li =>\n        @raw item\n\n  confirmed: (item) ->\n    console.log(item)\n\nview = new OverlaySelectListView([" + array + "])\nview.attach()";
      return this.div({
        "class": 'example'
      }, (function(_this) {
        return function() {
          _this.div({
            "class": 'example-rendered'
          }, function() {
            return _this.subview('__', selectList);
          });
          return _this.div({
            "class": 'example-code show-example-space-pen'
          }, function() {
            _this.div({
              "class": 'btn-group btn-group-xs btn-toggle'
            }, function() {
              _this.button({
                "class": 'btn selected',
                'data-display-class': 'show-example-space-pen'
              }, 'space-pen');
              return _this.button({
                "class": 'btn',
                'data-display-class': 'show-example-html'
              }, 'html');
            });
            _this.colorizedCodeBlock('example-space-pen', 'source.coffee', coffeeScript);
            return _this.colorizedCodeBlock('example-html', 'text.xml', beautifyHtml(html));
          });
        };
      })(this));
    }
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/styleguide/lib/space-pen-extensions.js.map
