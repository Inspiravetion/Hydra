(function() {
  var $, ExampleSection, ScrollView, StyleguideView, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ref = require('atom'), $ = _ref.$, ScrollView = _ref.ScrollView;

  require('./space-pen-extensions');

  ExampleSection = require('./example-section');

  module.exports = StyleguideView = (function(_super) {
    __extends(StyleguideView, _super);

    function StyleguideView() {
      this.collapseAllSections = __bind(this.collapseAllSections, this);
      return StyleguideView.__super__.constructor.apply(this, arguments);
    }

    StyleguideView.content = function() {
      return this.div({
        "class": 'styleguide padded pane-item native-key-bindings',
        tabindex: -1
      }, (function(_this) {
        return function() {
          _this.button({
            outlet: 'collapseAllButton',
            "class": 'btn btn-collapse-all'
          }, 'Collapse All Sections');
          _this.exampleSection('styleguide', 'Styleguide', function() {
            return this.p('This exercises all UI components and acts as a styleguide.');
          });
          _this.exampleSection('text', 'Text classes', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('There are a number of text classes.');
              };
            })(this));
            this.h2('text-* classes');
            this.exampleCode('@p class: \'text-smaller\', \'Smaller text\'\n@div \'Normal text\'\n@div class: \'text-subtle\', \'Subtle text\'\n@div class: \'text-highlight\', \'Highlighted text\'\n@div class: \'text-info\', \'Info text\'\n@div class: \'text-success\', \'Success text\'\n@div class: \'text-warning\', \'Warning text\'\n@div class: \'text-error\', \'Error text\'');
            this.h2('highlight-* classes');
            return this.exampleCode('@span class: \'inline-block\', \'Normal text\'\n@span class: \'inline-block highlight\', \'Highlighted\'\n@span class: \'inline-block highlight-info\', \'Info\'\n@span class: \'inline-block highlight-success\', \'Success\'\n@span class: \'inline-block highlight-warning\', \'Warning\'\n@span class: \'inline-block highlight-error\', \'Error\'');
          });
          _this.exampleSection('layout', 'Layout classes', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('A few things that might be useful for general layout.');
              };
            })(this));
            this.h2('.block');
            this.p('Sometimes you need to separate components vertically. Say in a form.');
            this.exampleCode('@div class: \'block\', =>\n  @label \'You might want to type something here.\'\n  @div class: \'editor mini editor-colors\', \'Something you typed...\'\n@div class: \'block\', =>\n  @label class: \'icon icon-file-directory\', \'Another field with an icon\'\n  @div class: \'editor mini editor-colors\', \'Something else you typed...\'\n@div class: \'block\', =>\n  @button class: \'btn\', \'Do it\'');
            this.h2('.inline-block');
            this.p('Sometimes you need to separate components horizontally.');
            this.exampleCode('@div class: \'block\', =>\n  @label \'This is a thing with stuff in it\'\n  @div =>\n    @div class: \'inline-block editor mini editor-colors\', \'Something you typed...\'\n    @div class: \'inline-block btn-group\', =>\n      @button class: \'btn\', \'One\'\n      @button class: \'btn\', \'Two\'\n\n@div class: \'block\', =>\n  @button class: \'inline-block btn\', \'Do it\'\n  @button class: \'inline-block btn\', \'Another\'\n  @button class: \'inline-block btn\', \'OMG again\'');
            this.h2('.inline-block-tight');
            this.p('You might want things to be a little closer to each other.');
            return this.exampleCode('@div class: \'block\', =>\n  @button class: \'inline-block-tight btn\', \'Do it\'\n  @button class: \'inline-block-tight btn\', \'Another\'\n  @button class: \'inline-block-tight btn\', \'OMG again\'');
          });
          _this.exampleSection('git', 'Git related classes', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Often we need git related classes to specify status.');
              };
            })(this));
            this.h2('status-* classes');
            this.exampleCode('@div class: \'status-ignored\', \'Ignored\'\n@div class: \'status-added\', \'Added\'\n@div class: \'status-modified\', \'Modified\'\n@div class: \'status-removed\', \'Removed\'\n@div class: \'status-renamed\', \'Renamed\'');
            this.h2('status-* classes with related icons');
            return this.exampleCode('@span class: \'inline-block status-ignored icon icon-diff-ignored\', \'\'\n@span class: \'inline-block status-added icon icon-diff-added\', \'\'\n@span class: \'inline-block status-modified icon icon-diff-modified\', \'\'\n@span class: \'inline-block status-removed icon icon-diff-removed\', \'\'\n@span class: \'inline-block status-renamed icon icon-diff-renamed\', \'\'');
          });
          _this.exampleSection('site-highlight', 'Site colors', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Site colors are used for collaboration. A site is another collaborator.');
              };
            })(this));
            this.h2('ui-site-* classes');
            this.p((function(_this) {
              return function() {
                return _this.raw('These classes only set the background color, no other styles.\nYou can also use LESS variables <code>@ui-site-#</code> in your plugins where\n<code>#</code> is a number between 1 and 5.');
              };
            })(this));
            this.p((function(_this) {
              return function() {
                return _this.raw('Site colors will always be in the color progression you see here.');
              };
            })(this));
            return this.exampleCode('@div class: \'block ui-site-1\'\n@div class: \'block ui-site-2\'\n@div class: \'block ui-site-3\'\n@div class: \'block ui-site-4\'\n@div class: \'block ui-site-5\'');
          });
          _this.exampleSection('buttons', 'Buttons', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Buttons are similar to bootstrap buttons');
              };
            })(this));
            this.h2('Standalone buttons');
            this.exampleCode('@div class: \'block\', =>\n  @button class: \'btn\', \'Button\'\n@div class: \'block\', =>\n  @button class: \'btn btn-xs\', \'Extra Small Button\'\n@div class: \'block\', =>\n  @button class: \'btn btn-sm\', \'Small Button\'\n@div class: \'block\', =>\n  @button class: \'btn btn-lg\', \'Large Button\'');
            this.h2('Colored buttons');
            this.exampleCode('@div class: \'block\', =>\n  @button class: \'btn btn-primary inline-block-tight\', \'Primary\'\n  @button class: \'btn btn-primary selected inline-block-tight\', \'Selected Primary\'\n\n@div class: \'block\', =>\n  @button class: \'btn btn-info inline-block-tight\', \'Info\'\n  @button class: \'btn btn-info selected inline-block-tight\', \'Selected Info\'\n\n@div class: \'block\', =>\n  @button class: \'btn btn-success inline-block-tight\', \'Success\'\n  @button class: \'btn btn-success selected inline-block-tight\', \'Selected Success\'\n\n@div class: \'block\', =>\n  @button class: \'btn btn-warning inline-block-tight\', \'Warning\'\n  @button class: \'btn btn-warning selected inline-block-tight\', \'Selected Warning\'\n\n@div class: \'block\', =>\n  @button class: \'btn btn-error inline-block-tight\', \'Error\'\n  @button class: \'btn btn-error selected inline-block-tight\', \'Selected Error\'');
            this.h2('Button Groups');
            this.exampleCode('@div class: \'block\', =>\n  @div \'Normal size\'\n  @div class: \'btn-group\', =>\n    @button class: \'btn\', \'One\'\n    @button class: \'btn\', \'Two\'\n    @button class: \'btn\', \'Three\'\n@div class: \'block\', =>\n  @div \'Extra Small\'\n  @div class: \'btn-group btn-group-xs\', =>\n    @button class: \'btn\', \'One\'\n    @button class: \'btn\', \'Two\'\n    @button class: \'btn\', \'Three\'\n@div class: \'block\', =>\n  @div \'Small\'\n  @div class: \'btn-group btn-group-sm\', =>\n    @button class: \'btn\', \'One\'\n    @button class: \'btn\', \'Two\'\n    @button class: \'btn\', \'Three\'\n@div class: \'block\', =>\n  @div \'Large\'\n  @div class: \'btn-group btn-group-lg\', =>\n    @button class: \'btn\', \'One\'\n    @button class: \'btn\', \'Two\'\n    @button class: \'btn\', \'Three\'');
            this.h2('Button Toolbars');
            this.exampleCode('@div class: \'btn-toolbar\', =>\n  @div class: \'btn-group\', =>\n    @button class: \'btn\', \'One\'\n    @button class: \'btn\', \'Two\'\n    @button class: \'btn\', \'Three\'\n  @div class: \'btn-group\', =>\n    @button class: \'btn\', \'Four\'\n    @button class: \'btn\', \'Five\'\n  @button class: \'btn\', \'Six\'\n  @button class: \'btn\', \'Seven\'');
            this.h2('Selected buttons');
            this.p((function(_this) {
              return function() {
                return _this.raw('Buttons can be marked selected by adding a <code>.selected</code> class. Useful for toggle groups.');
              };
            })(this));
            return this.exampleCode('@div class: \'block\', =>\n  @div class: \'btn-group\', =>\n    @button class: \'btn selected\', \'One\'\n    @button class: \'btn\', \'Two\'\n    @button class: \'btn\', \'Three\'\n@div class: \'block\', =>\n  @div class: \'btn-group\', =>\n    @button class: \'btn\', \'One\'\n    @button class: \'btn selected\', \'Two\'\n    @button class: \'btn\', \'Three\'\n@div class: \'block\', =>\n  @div class: \'btn-group\', =>\n    @button class: \'btn\', \'One\'\n    @button class: \'btn\', \'Two\'\n    @button class: \'btn selected\', \'Three\'\n@div class: \'block\', =>\n  @div class: \'btn-group\', =>\n    @button class: \'btn selected\', \'One\'\n    @button class: \'btn selected\', \'Two\'\n    @button class: \'btn\', \'Three\'');
          });
          _this.exampleSection('panels', 'Panels', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Useful when you want a block of content with a heading.');
              };
            })(this));
            this.h2('With a heading');
            this.exampleCode('@div class: "panel", =>\n  @div class: "panel-heading", \'A .panel heading\'\n  @div class: "panel-body padded", \'Some Content goes here. I am padded!\'');
            this.h2('Bordered with a heading');
            this.p((function(_this) {
              return function() {
                return _this.raw('You can add the class <code>.bordered</code> to the panel to add a border.');
              };
            })(this));
            return this.exampleCode('@div class: "panel bordered", =>\n  @div class: "panel-heading", \'A .panel heading\'\n  @div class: "panel-body padded", \'Some Content goes here. I am padded!\'');
          });
          _this.exampleSection('tool-panel', 'Tool Panel', function() {
            this.p('A container attached to some side of the Atom UI. This styleguide is in a tool panel.');
            this.exampleCode('@div class: \'tool-panel panel-bottom padded\', =>\n  @div \'Some content\'');
            return this.p((function(_this) {
              return function() {
                return _this.raw('Supports <code>.panel-bottom</code> and <code>.panel-left</code> classes.');
              };
            })(this));
          });
          _this.exampleSection('inset-panel', 'Inset Panel', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Use inside another panel, like a <code>.tool-panel</code>.');
              };
            })(this));
            this.h2('Without a heading');
            this.exampleCode('@div class: "tool-panel panel-bottom padded", =>\n  @div class: "inset-panel padded", \'Some content\'');
            this.h2('With a heading');
            this.exampleCode('@div class: "tool-panel panel-bottom padded", =>\n  @div class: "inset-panel", =>\n    @div class: "panel-heading", \'An inset-panel heading\'\n    @div class: "panel-body padded", \'Some Content\'');
            this.h2('With buttons in the heading');
            return this.exampleCode('@div class: "tool-panel panel-bottom padded", =>\n  @div class: "inset-panel", =>\n    @div class: "panel-heading", =>\n      @div class: \'btn-toolbar pull-right\', =>\n        @div class: \'btn-group\', =>\n          @button class: \'btn\', \'Group Button\'\n          @button class: \'btn\', \'Second Group Button\'\n        @button class: \'btn\', \'A button\'\n        @button class: \'btn selected\', \'Selected\'\n      @span \'An inset-panel heading\'\n    @div class: "panel-body padded", \'Some Content\'');
          });
          _this.exampleSection('list-group', 'List Group', function() {
            this.p('Use for anything that requires a list.');
            this.exampleCode('@ul class: \'list-group\', =>\n  @li class: \'list-item\', \'Normal item\'\n  @li class: \'list-item selected\', =>\n    @span \'This is the Selected item.\'\n  @li class: \'list-item text-subtle\', \'Subtle\'\n  @li class: \'list-item text-info\', \'Info\'\n  @li class: \'list-item text-success\', \'Success\'\n  @li class: \'list-item text-warning\', \'Warning\'\n  @li class: \'list-item text-error\', \'Error\'');
            this.h2('With icons');
            this.exampleCode('@ul class: \'list-group\', =>\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-directory\', \'Using a span with an icon\'\n  @li class: \'list-item\', =>\n    @i class: \'icon icon-file-directory\', \'\'\n    @span \'With .icon-file-directory using <i> tags\'\n  @li class: \'list-item selected\', =>\n    @span class: \'icon icon-file-directory\', \'Selected with .icon-file-directory\'\n  @li class: \'list-item\', =>\n    @span class: \'no-icon\', \'With .no-icon\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-text\', \'With icon-file-text\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-media\', \'With icon-file-media\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-symlink-file\', \'With icon-file-symlink-file\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-submodule\', \'With icon-file-submodule\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-book\', \'With icon-book\'');
            this.h2('In an .inset-panel');
            return this.exampleCode('@div class: \'tool-panel panel-bottom padded\', =>\n  @div class: \'inset-panel\', =>\n    @div class: \'panel-heading\', \'My list-group with icons\'\n    @div class: \'panel-body padded\', =>\n      @ul class: \'list-group\', =>\n        @li class: \'list-item\', =>\n          @span class: \'icon icon-file-text\', \'With icon-file-text\'\n        @li class: \'list-item\', =>\n          @span class: \'icon icon-file-media\', \'With icon-file-media\'\n        @li class: \'list-item\', =>\n          @span class: \'icon icon-book\', \'With icon-book\'');
          });
          _this.exampleSection('list-tree', 'List Tree', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('A <code>.list-tree</code> is a special case of <code>.list-group</code>.');
              };
            })(this));
            this.exampleCode('@ul class: \'list-tree\', =>\n  @li class: \'list-nested-item\', =>\n    @div class: \'list-item\', =>\n      @span class: \'icon icon-file-directory\', \'A Directory\'\n    @ul class: \'list-tree\', =>\n      @li class: \'list-nested-item\', =>\n        @div class: \'list-item\', =>\n          @span class: \'icon icon-file-directory\', \'Nested Directory\'\n        @ul class: \'list-tree\', =>\n          @li class: \'list-item\', =>\n            @span class: \'icon icon-file-text\', \'File one\'\n      @li class: \'list-nested-item collapsed\', =>\n        @div class: \'list-item\', =>\n          @span class: \'icon icon-file-directory\', \'Collpased Nested Directory\'\n        @ul class: \'list-tree\', =>\n          @li class: \'list-item\', =>\n            @span class: \'icon icon-file-text\', \'File one\'\n      @li class: \'list-item\', =>\n        @span class: \'icon icon-file-text\', \'File one\'\n      @li class: \'list-item selected\', =>\n        @span class: \'icon icon-file-text\', \'File three .selected!\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-text\', \'.icon-file-text\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-symlink-file\', \'.icon-file-symlink-file\'');
            this.h2('With disclosure arrows');
            this.p((function(_this) {
              return function() {
                return _this.raw('Add the class <code>.has-collapsable-children</code> to give the children with nested items disclosure arrows.');
              };
            })(this));
            this.exampleCode('@ul class: \'list-tree has-collapsable-children\', =>\n  @li class: \'list-nested-item\', =>\n    @div class: \'list-item\', =>\n      @span class: \'icon icon-file-directory\', \'A Directory\'\n    @ul class: \'list-tree\', =>\n      @li class: \'list-nested-item\', =>\n        @div class: \'list-item\', =>\n          @span class: \'icon icon-file-directory\', \'Nested Directory\'\n        @ul class: \'list-tree\', =>\n          @li class: \'list-item\', =>\n            @span class: \'icon icon-file-text\', \'File one\'\n      @li class: \'list-nested-item collapsed\', =>\n        @div class: \'list-item\', =>\n          @span class: \'icon icon-file-directory\', \'Collpased Nested Directory\'\n        @ul class: \'list-tree\', =>\n          @li class: \'list-item\', =>\n            @span class: \'icon icon-file-text\', \'File one\'\n      @li class: \'list-item\', =>\n        @span class: \'icon icon-file-text\', \'File one\'\n      @li class: \'list-item selected\', =>\n        @span class: \'icon icon-file-text\', \'File three .selected!\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-text\', \'.icon-file-text\'\n  @li class: \'list-item\', =>\n    @span class: \'icon icon-file-symlink-file\', \'.icon-file-symlink-file\'');
            this.h2('With disclosure arrows at only one level.');
            this.p((function(_this) {
              return function() {
                return _this.raw('Add the class <code>.has-flat-children</code> to sub-<code>.list-tree</code>s to indicate that the children will not be collapsable.');
              };
            })(this));
            return this.exampleCode('@ul class: \'list-tree has-collapsable-children \', =>\n  @li class: \'list-nested-item\', =>\n    @div class: \'list-item\', =>\n      @span class: \'icon icon-file-text\', \'This is a collapsable section\'\n    @ul class: \'list-tree has-flat-children\', =>\n      @li class: \'list-item\', \'Something is here\'\n      @li class: \'list-item selected\', \'Something .selected\'\n  @li class: \'list-nested-item\', =>\n    @div class: \'list-item\', =>\n      @span class: \'icon icon-file-directory\', \'Another collapsable section\'\n    @ul class: \'list-tree has-flat-children\', =>\n      @li class: \'list-item\', \'Something is here\'\n      @li class: \'list-item\', \'Something else\'');
          });
          _this.exampleSection('overlay', 'Overlays', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Overlays are like dialog boxes.');
              };
            })(this));
            this.p((function(_this) {
              return function() {
                return _this.raw('Supported classes: <code>.from-top</code>, <code>.from-bottom</code> and <code>.floating</code>.\n<code>.from-top</code> will come down from the top of the UI, etc.');
              };
            })(this));
            return this.exampleCode('@div class: \'overlay from-top\', =>\n  @div \'Some content\'');
          });
          _this.exampleSection('select-list', 'Select List', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('You wont be creating a <code>.select-list</code> directly, but will do so\nby extending the <code>SelectListView</code> class. Your\n<code>SelectListView</code> will usually specify only the list items,\nand hide/show the errors or loading message.');
              };
            })(this));
            this.p((function(_this) {
              return function() {
                return _this.raw('This is how you will typically specify a <code>.select-list</code>.');
              };
            })(this));
            this.exampleOverlaySelectList(['one', 'two', 'three']);
            this.p((function(_this) {
              return function() {
                return _this.raw('The list items have many options you can use, and shows you how they will display.');
              };
            })(this));
            this.h2('Basic example with one item selected');
            this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @ol class: \'list-group\', =>\n    @li class: \'selected\', \'one\'\n    @li \'two\'\n    @li \'three\'');
            this.h2('Single line with icons');
            this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @ol class: \'list-group\', =>\n    @li class: \'selected\', =>\n      @div class: \'status status-added icon icon-diff-added\', \'\'\n      @div class: \'icon icon-file-text\', \'Some file\'\n    @li =>\n      @div class: \'status status-modified icon icon-diff-modified\', \'\'\n      @div class: \'icon icon-file-text\', \'Another file\'\n    @li =>\n      @div class: \'status status-removed icon icon-diff-removed\', \'\'\n      @div class: \'icon icon-file-text\', \'Yet another file\'');
            this.h2('Single line with key-bindings');
            this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @ol class: \'list-group\', =>\n    @li class: \'selected\', =>\n      @div class: \'pull-right\', =>\n        @kbd class: \'key-binding pull-right\', \'⌘⌥↓\'\n      @span class: \'icon icon-file-text\', \'Some file\'\n    @li =>\n      @div class: \'pull-right key-bindings\', =>\n        @kbd class: \'key-binding\', \'⌘⌥A\'\n        @kbd class: \'key-binding\', \'⌘⌥O\'\n        @kbd class: \'key-binding\', \'⌘⌥1\'\n        @kbd class: \'key-binding\', \'⌘⌥↓\'\n        @kbd class: \'key-binding\', \'⌘⌥5\'\n        @kbd class: \'key-binding\', \'⌘⌥↓\'\n      @span class: \'icon icon-file-text\', \'Another file with a really long name\'\n    @li =>\n      @div class: \'pull-right\', =>\n        @kbd class: \'key-binding\', \'⌘⌥↓\'\n      @span class: \'icon icon-file-text\', \'Yet another file\'');
            this.h2('Multiple lines with no icons');
            this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @ol class: \'list-group\', =>\n    @li class: \'two-lines\', =>\n      @div class: \'primary-line\', \'Primary line\'\n      @div class: \'secondary-line\', \'Secondary line\'\n    @li class: \'two-lines selected\', =>\n      @div class: \'primary-line\', \'A thing\'\n      @div class: \'secondary-line\', \'Description of the thing\'');
            this.h2('Multiple lines with icons');
            this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @ol class: \'list-group\', =>\n    @li class: \'two-lines\', =>\n      @div class: \'status status-added icon icon-diff-added\', \'\'\n      @div class: \'primary-line icon icon-file-text\', \'Primary line\'\n      @div class: \'secondary-line no-icon\', \'Secondary line\'\n    @li class: \'two-lines selected\', =>\n      @div class: \'status status-modified icon icon-diff-modified\', \'\'\n      @div class: \'primary-line icon icon-file-symlink-file\', \'A thing\'\n      @div class: \'secondary-line no-icon\', \'Description of the thing\'\n    @li class: \'two-lines\', =>\n      @div class: \'status status-renamed icon icon-diff-renamed\', \'\'\n      @div class: \'primary-line icon icon-file-symlink-file\', \'A thing\'\n      @div class: \'secondary-line no-icon\', \'Description of the thing\'');
            this.h2('Using mark-active class to indicate the active item');
            this.p((function(_this) {
              return function() {
                return _this.raw('Use ...');
              };
            })(this));
            this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @ol class: \'list-group mark-active\', =>\n    @li \'Normal item\'\n    @li class: \'selected\', \'Selected &mdash; user is arrowing through the list.\'\n    @li class: \'active\', \'This is the active item\'\n    @li class: \'selected active\', \'Selected AND Active!\'');
            this.h2('Error messages');
            this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @div class: \'editor editor-colors mini\', \'I searched for this\'\n  @div class: \'error-message\', \'Nothing has been found!\'');
            this.h2('Loading message');
            return this.exampleCode('@div class: \'overlay from-top select-list\', =>\n  @div class: \'editor editor-colors mini\', \'User input\'\n  @div class: \'loading\', =>\n    @span class: \'loading-message\', \'Chill, bro. Things are loading.\'\n    @span class: \'badge\', \'1234\'');
          });
          _this.exampleSection('popover-list', 'Popover List', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('A <code>.popover-list</code> is a <code>.select-list</code> that\nis meant to popover the code for something like autocomplete.');
              };
            })(this));
            this.h2('Basic example with one item selected');
            return this.exampleCode('@div class: \'select-list popover-list\', =>\n  @div class: \'editor mini editor-colors\', \'User types here..\'\n  @ol class: \'list-group\', =>\n    @li class: \'selected\', \'one\'\n    @li \'two\'\n    @li \'three\'');
          });
          _this.exampleSection('tooltips', 'Tooltips', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('You do not create the markup directly. You call\n<code>element.setTooltip(title, {command, commandElement}={})</code>.\nPassing in a <code>command</code> (like <code>find-and-replace:show-find</code>) and\n<code>commandElement</code> (context for the command) will yield a tip with a keystroke.');
              };
            })(this));
            return this.exampleCode('@div class: \'tooltip top\', =>\n  @div class: \'tooltip-arrow\'\n  @div class: \'tooltip-inner\', \'This is a message\'\n\n@div class: \'tooltip top\', =>\n  @div class: \'tooltip-arrow\'\n  @div class: \'tooltip-inner\', =>\n    @raw \'With a keystroke <span class="keystroke">cmd-shift-o</span>\'');
          });
          _this.exampleSection('error-messages', 'Messages', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Use to convey info to the user when something happens. See <code>find-and-replace</code>\nfor an example.');
              };
            })(this));
            this.h2('Error messages');
            this.exampleCode('@ul class: \'error-messages block\', =>\n  @li \'This is an error!\'\n  @li \'And another\'');
            this.h2('Info messages');
            return this.exampleCode('@ul class: \'info-messages block\', =>\n  @li \'Info line\'\n  @li \'Another info line\'');
          });
          _this.exampleSection('background-messages', 'Background Messages', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Subtle background messages for panes. Use for cases when there are no results.');
              };
            })(this));
            this.exampleCode('@ul class: \'background-message\', =>\n  @li \'No Results\'');
            this.p((function(_this) {
              return function() {
                return _this.raw('Centered background messages will center horizontally and vertically.\nYour container for this element must have <code>position</code> set with <code>relative</code> or\n<code>absolute</code>.');
              };
            })(this));
            return this.exampleCode('@ul class: \'background-message centered\', =>\n  @li \'No Results\'');
          });
          _this.exampleSection('error-messages', 'Messages', function() {
            this.p((function(_this) {
              return function() {
                return _this.raw('Use to convey info to the user when something happens. See <code>find-and-replace</code>\nfor an example.');
              };
            })(this));
            this.h2('Error messages');
            return this.exampleCode('@ul class: \'error-messages block\', =>\n  @li \'This is an error!\'\n  @li \'And another\'');
          });
          return _this.exampleSection('progress', 'Loading/Progress', function() {
            this.h2('Progress Bars');
            this.exampleCode('@div class: \'block\', =>\n  @progress class: \'inline-block\'\n  @span class: \'inline-block\', \'Indeterminate\'\n\n@div class: \'block\', =>\n  @progress class: \'inline-block\', max: \'100\', value: \'25\'\n  @span class: \'inline-block\', \'At 25%\'\n\n@div class: \'block\', =>\n  @progress class: \'inline-block\', max: \'100\', value: \'50\'\n  @span class: \'inline-block\', \'At 50%\'\n\n@div class: \'block\', =>\n  @progress class: \'inline-block\', max: \'100\', value: \'75\'\n  @span class: \'inline-block\', \'At 75%\'\n\n@div class: \'block\', =>\n  @progress class: \'inline-block\', max: \'100\', value: \'100\'\n  @span class: \'inline-block\', \'At 100%\'');
            this.h2('Loading Spinners');
            return this.exampleCode('@span class: \'loading loading-spinner-tiny inline-block\'\n@span class: \'loading loading-spinner-small inline-block\'\n@span class: \'loading loading-spinner-medium inline-block\'\n@span class: \'loading loading-spinner-large inline-block\'');
          });
        };
      })(this));
    };

    StyleguideView.deserialize = function(options) {
      if (options == null) {
        options = {};
      }
      return new StyleguideView(options);
    };

    StyleguideView.exampleSections = {};

    StyleguideView.exampleSection = function(name, title, buildFn) {
      return this.exampleSections[name] = ExampleSection.build(this, name, title, buildFn);
    };

    StyleguideView.prototype.initialize = function(_arg) {
      var collapsedSections, section, __, _ref1, _ref2;
      _ref1 = _arg != null ? _arg : {}, this.uri = _ref1.uri, collapsedSections = _ref1.collapsedSections;
      this.on('click', '.section-heading', function() {
        return StyleguideView.exampleSections[$(this).parent().attr('data-name')].toggle();
      });
      this.on('click', '.example-code .btn-group .btn', function() {
        var btn, clas, example;
        btn = $(this);
        example = btn.parents('.example-code');
        clas = btn.attr('data-display-class');
        example.find('.btn').removeClass('selected');
        example.removeClass('show-example-html show-example-space-pen');
        example.addClass(clas);
        return btn.addClass('selected');
      });
      this.collapseAllButton.click(this.collapseAllSections);
      _ref2 = StyleguideView.exampleSections;
      for (__ in _ref2) {
        section = _ref2[__];
        this.append(section.el);
      }
      return this.setCollapsedSections(collapsedSections);
    };

    StyleguideView.prototype.serialize = function() {
      return {
        deserializer: this.constructor.name,
        collapsedSections: this.getCollapsedSections(),
        uri: this.getUri()
      };
    };

    StyleguideView.prototype.getUri = function() {
      return this.uri;
    };

    StyleguideView.prototype.getTitle = function() {
      return "Styleguide";
    };

    StyleguideView.prototype.collapseAllSections = function() {
      var name, section, _ref1, _results;
      _ref1 = StyleguideView.exampleSections;
      _results = [];
      for (name in _ref1) {
        section = _ref1[name];
        if (name === 'styleguide') {
          continue;
        }
        _results.push(section.collapse());
      }
      return _results;
    };

    StyleguideView.prototype.getCollapsedSections = function() {
      var sec, _i, _len, _ref1, _results;
      _ref1 = this.find('section.collapsed');
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        sec = _ref1[_i];
        _results.push($(sec).attr('data-name'));
      }
      return _results;
    };

    StyleguideView.prototype.setCollapsedSections = function(collapsedSections) {
      var name, section, _ref1;
      if (collapsedSections == null) {
        collapsedSections = [];
      }
      _ref1 = StyleguideView.exampleSections;
      for (name in _ref1) {
        section = _ref1[name];
        if (__indexOf.call(collapsedSections, name) < 0) {
          section.expand();
        }
      }
      return null;
    };

    StyleguideView.prototype.isEqual = function(other) {
      return other instanceof StyleguideView;
    };

    return StyleguideView;

  })(ScrollView);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/styleguide/lib/styleguide-view.js.map
