{
  "main": "./lib/keytar.js",
  "name": "keytar",
  "description": "Bindings to native Mac/Linux/Windows password APIs",
  "version": "1.0.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/node-keytar/raw/master/LICENSE.md"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/atom/node-keytar.git"
  },
  "bugs": {
    "url": "https://github.com/atom/node-keytar/issues"
  },
  "homepage": "http://atom.github.io/node-keytar",
  "keywords": [
    "keychain",
    "password",
    "passwords",
    "credential",
    "credentials",
    "vault",
    "credential vault"
  ],
  "scripts": {
    "prepublish": "grunt clean coffee lint",
    "test": "grunt test",
    "install": "node-gyp rebuild"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-coffee": "~0.9.0",
    "grunt-cli": "~0.1.7",
    "grunt-shell": "~0.2.2",
    "jasmine-focused": "~1.x",
    "rimraf": "~2.1.4",
    "node-cpplint": "~0.1.5",
    "grunt-coffeelint": "0.0.6"
  },
  "dependencies": {
    "nan": "0.8.0",
    "bindings": "~1.1.0"
  },
  "gypfile": true,
  "readme": "# keytar - Node module to manage system keychain\n\nA native Node module to get, add, replace, and delete passwords in system's\nkeychain. On OS X the passwords are managed by the Keychain, on Linux they are\nmanaged by Gnome Keyring and on Windows they are managed by Credential Vault.\n\n## Installing\n\n```sh\nnpm install keytar\n```\n\n## Building\n  * Clone the repository\n  * Run `npm install`\n  * Run `grunt` to compile the native and CoffeeScript code\n  * Run `grunt test` to run the specs\n\n## Docs\n\n```coffeescript\nkeytar = require 'keytar'\n```\n\n### getPassword(service, account)\n\nGet the stored password for the `service` and `account`.\n\n`service` - The string service name.\n\n`account` - The string account name.\n\nReturns the string password or `null` on failures.\n\n### addPassword(service, account, password)\n\nAdd the `password` for the `service` and `account` to the keychain.\n\n`service` - The string service name.\n\n`account` - The string account name.\n\n`password` - The string password.\n\nReturns `true` on success, `false` on failure.\n\n### deletePassword(service, account)\n\nDelete the stored password for the `service` and `account`.\n\n`service` - The string service name.\n\n`account` - The string account name.\n\nReturns the string password or `null` on failures.\n\n### replacePassword(service, account, password)\n\nReplace the `password` for the `service` and `account` in the keychain.\n\nThis is a simple convenience function that internally calls\n`deletePassword(service, account)` followed by\n`addPassword(service, account, password)`.\n\n`service` - The string service name.\n\n`account` - The string account name.\n\n`password` - The string password.\n\nReturns `true` on success, `false` on failure.\n\n### findPassword(service)\n\nFind a password for the `service` in the keychain.\n\n`service` - The string service name.\n\nReturns the string password or `null` on failures.\n",
  "readmeFilename": "README.md",
  "_id": "keytar@1.0.0",
  "dist": {
    "shasum": "fad55e40a27f8bf27760159f53defe14fde28fb3"
  },
  "_from": "keytar@1.x",
  "_resolved": "https://registry.npmjs.org/keytar/-/keytar-1.0.0.tgz"
}
