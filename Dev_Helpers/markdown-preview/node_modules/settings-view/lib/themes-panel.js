(function() {
  var $$, AvailablePackageView, EditorView, ErrorView, PackageManager, ThemesPanel, View, fs, path, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  fs = require('fs-plus');

  _ = require('underscore-plus');

  _ref = require('atom'), $$ = _ref.$$, EditorView = _ref.EditorView, View = _ref.View;

  AvailablePackageView = require('./available-package-view');

  ErrorView = require('./error-view');

  PackageManager = require('./package-manager');

  module.exports = ThemesPanel = (function(_super) {
    __extends(ThemesPanel, _super);

    function ThemesPanel() {
      return ThemesPanel.__super__.constructor.apply(this, arguments);
    }

    ThemesPanel.content = function() {
      return this.div((function(_this) {
        return function() {
          _this.div({
            "class": 'section packages'
          }, function() {
            _this.div({
              "class": 'section-heading icon icon-device-desktop'
            }, 'Choose a Theme');
            _this.div({
              "class": 'text padded native-key-bindings',
              tabindex: -1
            }, function() {
              _this.span({
                "class": 'icon icon-question'
              }, 'You can also style Atom by editing ');
              return _this.a({
                "class": 'link',
                outlet: 'openUserStysheet'
              }, 'your stylesheet');
            });
            return _this.form({
              "class": 'form-horizontal theme-chooser'
            }, function() {
              _this.div({
                "class": 'form-group'
              }, function() {
                _this.label({
                  "class": 'col-sm-2 col-lg-2 control-label themes-label text'
                }, 'UI Theme');
                return _this.div({
                  "class": 'col-sm-10 col-lg-4 col-md-4'
                }, function() {
                  _this.select({
                    outlet: 'uiMenu',
                    "class": 'form-control'
                  });
                  return _this.div({
                    "class": 'text theme-description'
                  }, 'This styles the tabs, status bar, tree view, and dropdowns');
                });
              });
              return _this.div({
                "class": 'form-group'
              }, function() {
                _this.label({
                  "class": 'col-sm-2 col-lg-2 control-label themes-label text'
                }, 'Syntax Theme');
                return _this.div({
                  "class": 'col-sm-10 col-lg-4 col-md-4'
                }, function() {
                  _this.select({
                    outlet: 'syntaxMenu',
                    "class": 'form-control'
                  });
                  return _this.div({
                    "class": 'text theme-description'
                  }, 'This styles the text inside the editor');
                });
              });
            });
          });
          _this.div({
            "class": 'section packages'
          }, function() {
            _this.div({
              "class": 'section-heading icon icon-cloud-download'
            }, 'Install Themes');
            _this.div({
              "class": 'text padded native-key-bindings',
              tabindex: -1
            }, function() {
              _this.span({
                "class": 'icon icon-question'
              });
              _this.span('Themes are published to  ');
              _this.a({
                "class": 'link',
                outlet: "openAtomIo"
              }, "atom.io");
              return _this.span(" and are installed to " + (path.join(fs.getHomeDirectory(), '.atom', 'packages')));
            });
            _this.div({
              "class": 'editor-container padded'
            }, function() {
              return _this.subview('searchEditorView', new EditorView({
                mini: true
              }));
            });
            _this.div({
              outlet: 'searchErrors'
            });
            _this.div({
              outlet: 'searchMessage',
              "class": 'alert alert-info icon icon-search search-message'
            });
            return _this.div({
              outlet: 'resultsContainer',
              "class": 'container package-container'
            });
          });
          return _this.div({
            "class": 'section packages'
          }, function() {
            _this.div({
              "class": 'section-heading icon icon-star'
            }, 'Featured Themes');
            _this.div({
              outlet: 'featuredErrors'
            });
            _this.div({
              outlet: 'loadingMessage',
              "class": 'alert alert-info icon icon-hourglass featured-message'
            }, 'Loading featured themes\u2026');
            _this.div({
              outlet: 'emptyMessage',
              "class": 'alert alert-info icon icon-heart featured-message'
            }, 'You have every featured theme installed already!');
            return _this.div({
              outlet: 'featuredContainer',
              "class": 'container package-container'
            });
          });
        };
      })(this));
    };

    ThemesPanel.prototype.initialize = function(packageManager) {
      this.packageManager = packageManager;
      this.openAtomIo.on('click', (function(_this) {
        return function() {
          require('shell').openExternal('https://atom.io/packages');
          return false;
        };
      })(this));
      this.searchMessage.hide();
      this.emptyMessage.hide();
      this.searchEditorView.setPlaceholderText('Search themes');
      this.searchEditorView.on('core:confirm', (function(_this) {
        return function() {
          var query;
          if (query = _this.searchEditorView.getText().trim()) {
            return _this.search(query);
          }
        };
      })(this));
      this.subscribe(this.packageManager, 'theme-install-failed', (function(_this) {
        return function(pack, error) {
          return _this.searchErrors.append(new ErrorView(error));
        };
      })(this));
      this.openUserStysheet.on('click', (function(_this) {
        return function() {
          atom.workspaceView.trigger('application:open-your-stylesheet');
          return false;
        };
      })(this));
      this.subscribe(this.packageManager, 'theme-installed', (function(_this) {
        return function() {
          return _this.populateThemeMenus();
        };
      })(this));
      this.subscribe(atom.themes, 'reloaded', (function(_this) {
        return function() {
          return _this.updateActiveThemes();
        };
      })(this));
      this.updateActiveThemes();
      this.syntaxMenu.change((function(_this) {
        return function() {
          _this.activeSyntaxTheme = _this.syntaxMenu.val();
          return _this.updateThemeConfig();
        };
      })(this));
      this.uiMenu.change((function(_this) {
        return function() {
          _this.activeUiTheme = _this.uiMenu.val();
          return _this.updateThemeConfig();
        };
      })(this));
      return this.loadFeaturedThemes();
    };

    ThemesPanel.prototype.updateActiveThemes = function() {
      this.activeUiTheme = this.getActiveUiTheme();
      this.activeSyntaxTheme = this.getActiveSyntaxTheme();
      return this.populateThemeMenus();
    };

    ThemesPanel.prototype.populateThemeMenus = function() {
      var availableThemes, metadata, name, themeItem, _i, _len, _ref1, _results;
      this.uiMenu.empty();
      this.syntaxMenu.empty();
      availableThemes = _.sortBy(atom.themes.getLoadedThemes(), 'name');
      _results = [];
      for (_i = 0, _len = availableThemes.length; _i < _len; _i++) {
        _ref1 = availableThemes[_i], name = _ref1.name, metadata = _ref1.metadata;
        switch (metadata.theme) {
          case 'ui':
            themeItem = this.createThemeMenuItem(name);
            if (name === this.activeUiTheme) {
              themeItem.prop('selected', true);
            }
            _results.push(this.uiMenu.append(themeItem));
            break;
          case 'syntax':
            themeItem = this.createThemeMenuItem(name);
            if (name === this.activeSyntaxTheme) {
              themeItem.prop('selected', true);
            }
            _results.push(this.syntaxMenu.append(themeItem));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    ThemesPanel.prototype.getActiveUiTheme = function() {
      var metadata, name, _i, _len, _ref1, _ref2;
      _ref1 = atom.themes.getActiveThemes();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        _ref2 = _ref1[_i], name = _ref2.name, metadata = _ref2.metadata;
        if (metadata.theme === 'ui') {
          return name;
        }
      }
      return null;
    };

    ThemesPanel.prototype.getActiveSyntaxTheme = function() {
      var metadata, name, _i, _len, _ref1, _ref2;
      _ref1 = atom.themes.getActiveThemes();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        _ref2 = _ref1[_i], name = _ref2.name, metadata = _ref2.metadata;
        if (metadata.theme === 'syntax') {
          return name;
        }
      }
      return null;
    };

    ThemesPanel.prototype.updateThemeConfig = function() {
      return setTimeout((function(_this) {
        return function() {
          var themes;
          themes = [];
          if (_this.activeUiTheme) {
            themes.push(_this.activeUiTheme);
          }
          if (_this.activeSyntaxTheme) {
            themes.push(_this.activeSyntaxTheme);
          }
          if (themes.length > 0) {
            return atom.themes.setEnabledThemes(themes);
          }
        };
      })(this), 100);
    };

    ThemesPanel.prototype.createThemeMenuItem = function(themeName) {
      var title;
      title = this.getThemeTitle(themeName);
      return $$(function() {
        return this.option({
          value: themeName
        }, title);
      });
    };

    ThemesPanel.prototype.getThemeTitle = function(themeName) {
      var title;
      if (themeName == null) {
        themeName = '';
      }
      title = themeName.replace(/-(ui|syntax)/g, '');
      return _.undasherize(_.uncamelcase(title));
    };

    ThemesPanel.prototype.addThemeViews = function(container, themes) {
      var index, theme, themeRow, _i, _len, _results;
      container.empty();
      _results = [];
      for (index = _i = 0, _len = themes.length; _i < _len; index = ++_i) {
        theme = themes[index];
        if (index % 3 === 0) {
          themeRow = $$(function() {
            return this.div({
              "class": 'row'
            });
          });
          container.append(themeRow);
        }
        _results.push(themeRow.append(new AvailablePackageView(theme, this.packageManager)));
      }
      return _results;
    };

    ThemesPanel.prototype.filterThemes = function(themes) {
      return themes.filter(function(_arg) {
        var theme;
        theme = _arg.theme;
        return theme;
      });
    };

    ThemesPanel.prototype.loadFeaturedThemes = function() {
      this.loadingMessage.show();
      this.emptyMessage.hide();
      return this.packageManager.getFeatured().then((function(_this) {
        return function(themes) {
          themes = _this.filterThemes(themes);
          if (themes.length === 0) {
            _this.loadingMessage.hide();
            _this.emptyMessage.removeClass('icon-heart').addClass('icon-rocket');
            _this.emptyMessage.text('No featured themes, create and publish one!');
            return _this.emptyMessage.show();
          } else {
            themes = _this.filterThemes(themes);
            _this.loadingMessage.hide();
            _this.addThemeViews(_this.featuredContainer, themes);
            if (themes.length === 0) {
              return _this.emptyMessage.show();
            }
          }
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          _this.loadingMessage.hide();
          return _this.featuredErrors.append(new ErrorView(error));
        };
      })(this));
    };

    ThemesPanel.prototype.search = function(query) {
      if (this.resultsContainer.children().length === 0) {
        this.searchMessage.text("Searching for \u201C" + query + "\u201D\u2026").show();
      }
      return this.packageManager.search(query, {
        themes: true
      }).then((function(_this) {
        return function(themes) {
          if (themes == null) {
            themes = [];
          }
          if (themes.length === 0) {
            _this.searchMessage.text("No theme results for \u201C" + query + "\u201D").show();
          } else {
            _this.searchMessage.hide();
          }
          return _this.addThemeViews(_this.resultsContainer, themes);
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          _this.searchMessage.hide();
          return _this.searchErrors.append(new ErrorView(error));
        };
      })(this));
    };

    return ThemesPanel;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/themes-panel.js.map
