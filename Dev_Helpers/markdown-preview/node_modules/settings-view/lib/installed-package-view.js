(function() {
  var ErrorView, InstalledPackageView, PackageGrammarsView, PackageKeymapView, PackageSnippetsView, SettingsPanel, View, fs, path, shell, url, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  url = require('url');

  _ = require('underscore-plus');

  fs = require('fs-plus');

  shell = require('shell');

  View = require('atom').View;

  ErrorView = require('./error-view');

  PackageGrammarsView = require('./package-grammars-view');

  PackageKeymapView = require('./package-keymap-view');

  PackageSnippetsView = require('./package-snippets-view');

  SettingsPanel = require('./settings-panel');

  module.exports = InstalledPackageView = (function(_super) {
    __extends(InstalledPackageView, _super);

    function InstalledPackageView() {
      return InstalledPackageView.__super__.constructor.apply(this, arguments);
    }

    InstalledPackageView.content = function() {
      return this.form({
        "class": 'installed-package-view section'
      }, (function(_this) {
        return function() {
          _this.div({
            outlet: 'updateArea',
            "class": 'alert alert-success package-update'
          }, function() {
            _this.span({
              outlet: 'updateLabel',
              "class": 'icon icon-squirrel update-message'
            });
            return _this.span({
              outlet: 'updateLink',
              "class": 'alert-link update-link icon icon-cloud-download'
            }, 'Install');
          });
          _this.h3({
            "class": 'native-key-bindings',
            tabindex: -1
          }, function() {
            _this.span({
              outlet: 'title',
              "class": 'text'
            });
            _this.span(' ');
            _this.span({
              outlet: 'version',
              "class": 'label label-primary'
            });
            _this.span(' ');
            return _this.span({
              outlet: 'disabledLabel',
              "class": 'label label-warning'
            }, 'Disabled');
          });
          _this.p({
            outlet: 'packageRepo',
            "class": 'link icon icon-repo repo-link'
          });
          _this.p({
            outlet: 'description',
            "class": 'text-subtle native-key-bindings',
            tabindex: -1
          });
          _this.p({
            outlet: 'startupTime',
            "class": 'text-subtle icon icon-dashboard native-key-bindings',
            tabindex: -1
          });
          _this.div({
            outlet: 'buttons',
            "class": 'btn-group'
          }, function() {
            _this.button({
              outlet: 'disableButton',
              "class": 'btn btn-default icon'
            });
            _this.button({
              outlet: 'uninstallButton',
              "class": 'btn btn-default icon icon-trashcan'
            }, 'Uninstall');
            _this.button({
              outlet: 'issueButton',
              "class": 'btn btn-default icon icon-bug'
            }, 'Report Issue');
            _this.button({
              outlet: 'readmeButton',
              "class": 'btn btn-default icon icon-book'
            }, 'Open README');
            _this.button({
              outlet: 'changelogButton',
              "class": 'btn btn-default icon icon-squirrel'
            }, 'Open CHANGELOG');
            return _this.button({
              outlet: 'openButton',
              "class": 'btn btn-default icon icon-link-external'
            }, 'Open in Atom');
          });
          _this.div({
            outlet: 'errors'
          });
          return _this.div({
            outlet: 'sections'
          });
        };
      })(this));
    };

    InstalledPackageView.prototype.initialize = function(pack, packageManager) {
      this.pack = pack;
      this.packageManager = packageManager;
      this.populate();
      this.handleButtonEvents();
      this.updateEnablement();
      this.updateFileButtons();
      return this.checkForUpdate();
    };

    InstalledPackageView.prototype.populate = function() {
      var repoName, repoUrl;
      this.title.text("" + (_.undasherize(_.uncamelcase(this.pack.name))));
      if (atom.packages.isBundledPackage(this.pack.name)) {
        this.uninstallButton.hide();
      }
      this.type = this.pack.metadata.theme ? 'theme' : 'package';
      this.startupTime.text("This " + this.type + " added " + (this.getStartupTime()) + "ms to startup time.");
      if (repoUrl = this.packageManager.getRepositoryUrl(this.pack)) {
        repoName = url.parse(repoUrl).pathname;
        this.packageRepo.text(repoName.substring(1)).show();
      } else {
        this.packageRepo.hide();
      }
      this.description.text(this.pack.metadata.description);
      this.version.text(this.pack.metadata.version);
      if (this.pack.metadata.theme) {
        this.disableButton.hide();
      }
      this.sections.empty();
      this.sections.append(new SettingsPanel(this.pack.name, {
        includeTitle: false
      }));
      this.sections.append(new PackageKeymapView(this.pack.name));
      this.sections.append(new PackageGrammarsView(this.pack.path));
      return this.sections.append(new PackageSnippetsView(this.pack.path));
    };

    InstalledPackageView.prototype.handleButtonEvents = function() {
      this.disableButton.on('click', (function(_this) {
        return function() {
          if (atom.packages.isPackageDisabled(_this.pack.name)) {
            atom.packages.enablePackage(_this.pack.name);
          } else {
            atom.packages.disablePackage(_this.pack.name);
          }
          _this.updateEnablement();
          return false;
        };
      })(this));
      this.uninstallButton.on('click', (function(_this) {
        return function() {
          _this.uninstallButton.prop('disabled', true);
          _this.packageManager.uninstall(_this.pack, function(error) {
            var _ref;
            if (error != null) {
              _this.errors.append(new ErrorView(error));
              _this.uninstallButton.prop('disabled', false);
              return console.error("Uninstalling " + _this.type + " " + _this.pack.name + " failed", (_ref = error.stack) != null ? _ref : error, error.stderr);
            }
          });
          return false;
        };
      })(this));
      this.packageRepo.on('click', (function(_this) {
        return function() {
          var repoUrl;
          if (repoUrl = _this.packageManager.getRepositoryUrl(_this.pack)) {
            shell.openExternal(repoUrl);
          }
          return false;
        };
      })(this));
      this.issueButton.on('click', (function(_this) {
        return function() {
          var repoUrl;
          if (repoUrl = _this.packageManager.getRepositoryUrl(_this.pack)) {
            shell.openExternal("" + repoUrl + "/issues/new");
          }
          return false;
        };
      })(this));
      this.readmeButton.on('click', (function(_this) {
        return function() {
          if (_this.readmePath) {
            atom.workspaceView.open(_this.readmePath);
          }
          return false;
        };
      })(this));
      this.changelogButton.on('click', (function(_this) {
        return function() {
          if (_this.changelogPath) {
            atom.workspaceView.open(_this.changelogPath);
          }
          return false;
        };
      })(this));
      return this.openButton.on('click', (function(_this) {
        return function() {
          if (fs.existsSync(_this.pack.path)) {
            atom.open({
              pathsToOpen: [_this.pack.path]
            });
          }
          return false;
        };
      })(this));
    };

    InstalledPackageView.prototype.updateFileButtons = function() {
      var child, _i, _len, _ref;
      this.changelogPath = null;
      this.readmePath = null;
      _ref = fs.listSync(this.pack.path);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        switch (path.basename(child, path.extname(child)).toLowerCase()) {
          case 'changelog':
          case 'history':
            this.changelogPath = child;
            break;
          case 'readme':
            this.readmePath = child;
        }
        if (this.readmePath && this.changelogPath) {
          break;
        }
      }
      if (this.changelogPath) {
        this.changelogButton.show();
      } else {
        this.changelogButton.hide();
      }
      if (this.readmePath) {
        return this.readmeButton.show();
      } else {
        return this.readmeButton.hide();
      }
    };

    InstalledPackageView.prototype.updateEnablement = function() {
      if (atom.packages.isPackageDisabled(this.pack.name)) {
        this.disableButton.text('Enable');
        this.disableButton.addClass('icon-playback-play');
        this.disableButton.removeClass('icon-playback-pause');
        return this.disabledLabel.show();
      } else {
        this.disableButton.text('Disable');
        this.disableButton.addClass('icon-playback-pause');
        this.disableButton.removeClass('icon-playback-play');
        return this.disabledLabel.hide();
      }
    };

    InstalledPackageView.prototype.getStartupTime = function() {
      var activateTime, loadTime, _ref, _ref1;
      loadTime = (_ref = this.pack.loadTime) != null ? _ref : 0;
      activateTime = (_ref1 = this.pack.activateTime) != null ? _ref1 : 0;
      return loadTime + activateTime;
    };

    InstalledPackageView.prototype.installUpdate = function() {
      if (this.updateLink.prop('disabled')) {
        return;
      }
      if (!this.availableVersion) {
        return;
      }
      this.disableButton.prop('disabled', true);
      this.uninstallButton.prop('disabled', true);
      this.updateLink.prop('disabled', true);
      this.updateLink.text('Installing\u2026');
      return this.packageManager.update(this.pack, this.availableVersion, (function(_this) {
        return function(error) {
          var updatedPackage;
          _this.disableButton.prop('disabled', false);
          _this.uninstallButton.prop('disabled', false);
          if (error != null) {
            _this.updateLink.prop('disabled', false);
            _this.updateLink.text('Install');
            return _this.errors.append(new ErrorView(error));
          } else {
            _this.updateFileButtons();
            _this.updateArea.hide();
            if (updatedPackage = atom.packages.getLoadedPackage(_this.pack.name)) {
              _this.pack = updatedPackage;
              return _this.populate();
            }
          }
        };
      })(this));
    };

    InstalledPackageView.prototype.checkForUpdate = function() {
      this.updateArea.hide();
      if (atom.packages.isBundledPackage(this.pack.name)) {
        return;
      }
      this.updateLink.on('click', (function(_this) {
        return function() {
          return _this.installUpdate();
        };
      })(this));
      return this.packageManager.getPackage(this.pack.name).then((function(_this) {
        return function(available) {
          if (available == null) {
            return;
          }
          if (!_this.packageManager.canUpgrade(_this.pack, available)) {
            return;
          }
          _this.availableVersion = available.version;
          _this.updateLabel.text("Version " + _this.availableVersion + " is now available!");
          return _this.updateArea.show();
        };
      })(this));
    };

    return InstalledPackageView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/installed-package-view.js.map
