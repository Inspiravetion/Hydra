(function() {
  var $$, AvailablePackageView, EditorView, ErrorView, PackageManager, PackagesPanel, View, fs, path, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  _ = require('underscore-plus');

  fs = require('fs-plus');

  _ref = require('atom'), $$ = _ref.$$, EditorView = _ref.EditorView, View = _ref.View;

  ErrorView = require('./error-view');

  PackageManager = require('./package-manager');

  AvailablePackageView = require('./available-package-view');

  module.exports = PackagesPanel = (function(_super) {
    __extends(PackagesPanel, _super);

    function PackagesPanel() {
      return PackagesPanel.__super__.constructor.apply(this, arguments);
    }

    PackagesPanel.content = function() {
      return this.div((function(_this) {
        return function() {
          _this.div({
            "class": 'section packages'
          }, function() {
            _this.div({
              "class": 'section-heading icon icon-cloud-download'
            }, 'Install Packages');
            _this.div({
              "class": 'text padded native-key-bindings',
              tabindex: -1
            }, function() {
              _this.span({
                "class": 'icon icon-question'
              });
              _this.span('Packages are published to  ');
              _this.a({
                "class": 'link',
                outlet: "openAtomIo"
              }, "atom.io");
              return _this.span(" and are installed to " + (path.join(fs.getHomeDirectory(), '.atom', 'packages')));
            });
            _this.div({
              "class": 'editor-container padded'
            }, function() {
              return _this.subview('searchEditorView', new EditorView({
                mini: true
              }));
            });
            _this.div({
              outlet: 'searchErrors'
            });
            _this.div({
              outlet: 'searchMessage',
              "class": 'alert alert-info search-message icon icon-search'
            });
            return _this.div({
              outlet: 'resultsContainer',
              "class": 'container package-container'
            });
          });
          return _this.div({
            "class": 'section packages'
          }, function() {
            _this.div({
              "class": 'section-heading icon icon-star'
            }, 'Featured Packages');
            _this.div({
              outlet: 'featuredErrors'
            });
            _this.div({
              outlet: 'loadingMessage',
              "class": 'alert alert-info featured-message icon icon-hourglass'
            }, 'Loading featured packages\u2026');
            _this.div({
              outlet: 'emptyMessage',
              "class": 'alert alert-info featured-message icon icon-heart'
            }, 'You have every featured package installed already!');
            return _this.div({
              outlet: 'featuredContainer',
              "class": 'container package-container'
            });
          });
        };
      })(this));
    };

    PackagesPanel.prototype.initialize = function(packageManager) {
      this.packageManager = packageManager;
      this.openAtomIo.on('click', (function(_this) {
        return function() {
          require('shell').openExternal('https://atom.io/packages');
          return false;
        };
      })(this));
      this.searchMessage.hide();
      this.emptyMessage.hide();
      this.searchEditorView.setPlaceholderText('Search packages');
      this.searchEditorView.on('core:confirm', (function(_this) {
        return function() {
          var query;
          if (query = _this.searchEditorView.getText().trim()) {
            return _this.search(query);
          }
        };
      })(this));
      this.subscribe(this.packageManager, 'package-install-failed', (function(_this) {
        return function(pack, error) {
          return _this.searchErrors.append(new ErrorView(error));
        };
      })(this));
      return this.loadFeaturedPackages();
    };

    PackagesPanel.prototype.focus = function() {
      return this.searchEditorView.focus();
    };

    PackagesPanel.prototype.search = function(query) {
      if (this.resultsContainer.children().length === 0) {
        this.searchMessage.text("Searching for \u201C" + query + "\u201D\u2026").show();
      }
      return this.packageManager.search(query, {
        packages: true
      }).then((function(_this) {
        return function(packages) {
          if (packages == null) {
            packages = [];
          }
          if (packages.length === 0) {
            _this.searchMessage.text("No package results for \u201C" + query + "\u201D").show();
          } else {
            _this.searchMessage.hide();
          }
          return _this.addPackageViews(_this.resultsContainer, packages);
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          _this.searchMessage.hide();
          return _this.searchErrors.append(new ErrorView(error));
        };
      })(this));
    };

    PackagesPanel.prototype.addPackageViews = function(container, packages) {
      var index, pack, packageRow, _i, _len, _results;
      container.empty();
      _results = [];
      for (index = _i = 0, _len = packages.length; _i < _len; index = ++_i) {
        pack = packages[index];
        if (index % 3 === 0) {
          packageRow = $$(function() {
            return this.div({
              "class": 'row'
            });
          });
          container.append(packageRow);
        }
        _results.push(packageRow.append(new AvailablePackageView(pack, this.packageManager)));
      }
      return _results;
    };

    PackagesPanel.prototype.filterPackages = function(packages) {
      return packages.filter(function(_arg) {
        var theme;
        theme = _arg.theme;
        return !theme;
      });
    };

    PackagesPanel.prototype.loadFeaturedPackages = function() {
      this.loadingMessage.show();
      return this.packageManager.getFeatured().then((function(_this) {
        return function(packages) {
          packages = _this.filterPackages(packages);
          _this.loadingMessage.hide();
          if (packages.length === 0) {
            _this.emptyMessage.show();
          }
          return _this.addPackageViews(_this.featuredContainer, packages);
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          _this.loadingMessage.hide();
          return _this.featuredErrors.append(new ErrorView(error));
        };
      })(this));
    };

    return PackagesPanel;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/packages-panel.js.map
