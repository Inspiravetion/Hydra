(function() {
  var AvailablePackageView, View, shell, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  View = require('atom').View;

  shell = require('shell');

  module.exports = AvailablePackageView = (function(_super) {
    __extends(AvailablePackageView, _super);

    function AvailablePackageView() {
      return AvailablePackageView.__super__.constructor.apply(this, arguments);
    }

    AvailablePackageView.content = function(_arg) {
      var description, downloads, name;
      name = _arg.name, description = _arg.description, downloads = _arg.downloads;
      return this.div({
        "class": 'col-lg-4 available-package-view'
      }, (function(_this) {
        return function() {
          return _this.div({
            "class": 'thumbnail text'
          }, function() {
            return _this.div({
              "class": 'caption'
            }, function() {
              _this.span({
                outlet: 'status',
                "class": 'package-status icon'
              });
              _this.h4({
                "class": 'package-name native-key-bindings',
                tabindex: -1
              }, _.undasherize(_.uncamelcase(name)));
              if (downloads >= 0) {
                _this.p({
                  "class": 'downloads native-key-bindings',
                  tabindex: -1
                }, _.pluralize(downloads, 'download'));
              }
              _this.p({
                "class": 'description native-key-bindings',
                tabindex: -1
              }, description != null ? description : '');
              return _this.div({
                "class": 'btn-toolbar'
              }, function() {
                _this.button({
                  outlet: 'installButton',
                  "class": 'btn btn-primary'
                }, 'Install');
                return _this.button({
                  outlet: 'learnMoreButton',
                  "class": 'btn btn-default'
                }, 'Learn More');
              });
            });
          });
        };
      })(this));
    };

    AvailablePackageView.prototype.initialize = function(pack, packageManager) {
      this.pack = pack;
      this.packageManager = packageManager;
      this.type = this.pack.theme ? 'theme' : 'package';
      this.handlePackageEvents();
      this.installButton.on('click', (function(_this) {
        return function() {
          _this.packageManager.emit('package-installing', _this.pack);
          return _this.packageManager.install(_this.pack, function(error) {
            var _ref;
            if (error != null) {
              return console.error("Installing " + _this.type + " " + _this.pack.name + " failed", (_ref = error.stack) != null ? _ref : error, error.stderr);
            }
          });
        };
      })(this));
      return this.learnMoreButton.on('click', (function(_this) {
        return function() {
          return shell.openExternal("https://atom.io/packages/" + _this.pack.name);
        };
      })(this));
    };

    AvailablePackageView.prototype.handlePackageEvents = function() {
      this.subscribe(this.packageManager, 'package-installed package-install-failed theme-installed theme-install-failed', (function(_this) {
        return function(pack, error) {
          if (pack.name === _this.pack.name) {
            if (error != null) {
              _this.setStatusIcon('alert');
              return _this.installButton.prop('disabled', false);
            } else {
              _this.setStatusIcon('check');
              return _this.installButton.text('Installed');
            }
          }
        };
      })(this));
      this.subscribe(this.packageManager, 'package-installing', (function(_this) {
        return function(pack) {
          if (pack.name === _this.pack.name) {
            _this.installButton.prop('disabled', true);
            return _this.setStatusIcon('cloud-download');
          }
        };
      })(this));
      this.subscribe(this.packageManager, 'package-uninstalled package-uninstall-failed theme-uninstalled theme-uninstall-failed', (function(_this) {
        return function(pack, error) {
          if (pack.name === _this.pack.name) {
            if (error != null) {
              return _this.setStatusIcon('alert');
            } else {
              _this.installButton.prop('disabled', false);
              _this.installButton.text('Install');
              return _this.setStatusIcon();
            }
          }
        };
      })(this));
      if (atom.packages.isPackageLoaded(this.pack.name)) {
        this.installButton.prop('disabled', true);
        this.installButton.text('Installed');
        return this.setStatusIcon('check');
      } else if (atom.packages.isPackageDisabled(this.pack.name)) {
        return this.installButton.prop('disabled', true);
      }
    };

    AvailablePackageView.prototype.setStatusIcon = function(iconName) {
      this.status.removeClass('icon-check icon-alert icon-cloud-download');
      if (iconName) {
        this.status.addClass("icon-" + iconName);
      }
      this.status.destroyTooltip();
      switch (iconName) {
        case 'check':
          return this.status.setTooltip(_.capitalize("" + this.type + " installed"));
        case 'alert':
          return this.status.setTooltip(_.capitalize("" + this.type + " failed to install"));
        case 'cloud-download':
          return this.status.setTooltip(_.capitalize("" + this.type + " installing"));
      }
    };

    return AvailablePackageView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/available-package-view.js.map
