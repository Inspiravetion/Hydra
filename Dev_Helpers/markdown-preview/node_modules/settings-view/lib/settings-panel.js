(function() {
  var $, $$, EditorView, SettingsPanel, View, appendArray, appendCheckbox, appendEditor, appendObject, appendSetting, getSettingTitle, isEditableArray, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('atom'), $ = _ref.$, $$ = _ref.$$, EditorView = _ref.EditorView, View = _ref.View;

  _ = require('underscore-plus');

  module.exports = SettingsPanel = (function(_super) {
    __extends(SettingsPanel, _super);

    function SettingsPanel() {
      return SettingsPanel.__super__.constructor.apply(this, arguments);
    }

    SettingsPanel.content = function() {
      return this.div({
        "class": 'settings-panel'
      });
    };

    SettingsPanel.prototype.initialize = function(namespace, options) {
      var settings;
      this.options = options != null ? options : {};
      settings = atom.config.getSettings();
      this.appendSettings(namespace, settings[namespace]);
      this.bindFormFields();
      return this.bindEditors();
    };

    SettingsPanel.prototype.appendSettings = function(namespace, settings) {
      var includeTitle, title, _ref1;
      if (_.isEmpty(settings)) {
        return;
      }
      includeTitle = (_ref1 = this.options.includeTitle) != null ? _ref1 : true;
      if (includeTitle) {
        title = "" + (_.undasherize(_.uncamelcase(namespace))) + " Settings";
      } else {
        title = "Settings";
      }
      return this.append($$(function() {
        return this.section({
          "class": 'config-section'
        }, (function(_this) {
          return function() {
            _this.div({
              "class": 'block section-heading icon icon-gear'
            }, title);
            return _this.div({
              "class": 'section-body'
            }, function() {
              var name, _i, _len, _ref2, _results;
              _ref2 = _.keys(settings).sort();
              _results = [];
              for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                name = _ref2[_i];
                _results.push(appendSetting.call(_this, namespace, name, settings[name]));
              }
              return _results;
            });
          };
        })(this));
      }));
    };

    SettingsPanel.prototype.bindFormFields = function() {
      var input, _i, _len, _ref1, _results;
      _ref1 = this.find('input[id]').toArray();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        input = _ref1[_i];
        _results.push((function(_this) {
          return function(input) {
            var name, type;
            input = $(input);
            name = input.attr('id');
            type = input.attr('type');
            _this.subscribe(atom.config.observe(name, function(value) {
              if (type === 'checkbox') {
                return input.prop('checked', value);
              } else {
                if (value) {
                  return input.val(value);
                }
              }
            }));
            return input.on('change', function() {
              var value;
              value = input.val();
              if (type === 'checkbox') {
                value = !!input.prop('checked');
              } else {
                value = _this.parseValue(type, value);
              }
              return atom.config.set(name, value);
            });
          };
        })(this)(input));
      }
      return _results;
    };

    SettingsPanel.prototype.bindEditors = function() {
      var editorView, _i, _len, _ref1, _results;
      _ref1 = this.find('.editor[id]').views();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        editorView = _ref1[_i];
        _results.push((function(_this) {
          return function(editorView) {
            var name, type;
            name = editorView.attr('id');
            type = editorView.attr('type');
            _this.subscribe(atom.config.observe(name, function(value) {
              var stringValue;
              stringValue = _this.valueToString(value);
              if (stringValue === editorView.getText()) {
                return;
              }
              if (stringValue == null) {
                stringValue = "";
              }
              return editorView.setText(stringValue);
            }));
            return editorView.getEditor().getBuffer().on('contents-modified', function() {
              return atom.config.set(name, _this.parseValue(type, editorView.getText()));
            });
          };
        })(this)(editorView));
      }
      return _results;
    };

    SettingsPanel.prototype.valueToString = function(value) {
      if (_.isArray(value)) {
        return value.join(", ");
      } else {
        return value != null ? value.toString() : void 0;
      }
    };

    SettingsPanel.prototype.parseValue = function(type, value) {
      var arrayValue, floatValue, intValue, val;
      if (value === '') {
        value = void 0;
      } else if (type === 'int') {
        intValue = parseInt(value);
        if (!isNaN(intValue)) {
          value = intValue;
        }
      } else if (type === 'float') {
        floatValue = parseFloat(value);
        if (!isNaN(floatValue)) {
          value = floatValue;
        }
      } else if (type === 'array') {
        arrayValue = (value || '').split(',');
        value = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = arrayValue.length; _i < _len; _i++) {
            val = arrayValue[_i];
            if (val) {
              _results.push(val.trim());
            }
          }
          return _results;
        })();
      }
      return value;
    };

    return SettingsPanel;

  })(View);


  /*
   * Space Pen Helpers
   */

  isEditableArray = function(array) {
    var item, _i, _len;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (!_.isString(item)) {
        return false;
      }
    }
    return true;
  };

  appendSetting = function(namespace, name, value) {
    if (namespace === 'core') {
      if (name === 'themes') {
        return;
      }
      if (name === 'disabledPackages') {
        return;
      }
    }
    return this.div({
      "class": 'control-group'
    }, (function(_this) {
      return function() {
        return _this.div({
          "class": 'controls'
        }, function() {
          if (_.isBoolean(value)) {
            return appendCheckbox.call(_this, namespace, name, value);
          } else if (_.isArray(value)) {
            if (isEditableArray(value)) {
              return appendArray.call(_this, namespace, name, value);
            }
          } else if (_.isObject(value)) {
            return appendObject.call(_this, namespace, name, value);
          } else {
            return appendEditor.call(_this, namespace, name, value);
          }
        });
      };
    })(this));
  };

  getSettingTitle = function(name) {
    if (name == null) {
      name = '';
    }
    return _.uncamelcase(name).split('.').map(_.capitalize).join(' ');
  };

  appendCheckbox = function(namespace, name, value) {
    var keyPath;
    keyPath = "" + namespace + "." + name;
    return this.div({
      "class": 'checkbox'
    }, (function(_this) {
      return function() {
        return _this.label({
          "for": keyPath
        }, function() {
          _this.input({
            id: keyPath,
            type: 'checkbox'
          });
          return _this.text(getSettingTitle(name));
        });
      };
    })(this));
  };

  appendEditor = function(namespace, name, value) {
    var keyPath, type;
    keyPath = "" + namespace + "." + name;
    if (_.isNumber(value)) {
      type = value % 1 === 0 ? 'int' : 'float';
    } else {
      type = 'string';
    }
    this.label({
      "class": 'control-label'
    }, getSettingTitle(name));
    return this.div({
      "class": 'controls'
    }, (function(_this) {
      return function() {
        return _this.div({
          "class": 'editor-container'
        }, function() {
          return _this.subview(keyPath.replace(/\./g, ''), new EditorView({
            mini: true,
            attributes: {
              id: keyPath,
              type: type
            }
          }));
        });
      };
    })(this));
  };

  appendArray = function(namespace, name, value) {
    var keyPath;
    keyPath = "" + namespace + "." + name;
    this.label({
      "class": 'control-label'
    }, getSettingTitle(name));
    return this.div({
      "class": 'controls'
    }, (function(_this) {
      return function() {
        return _this.div({
          "class": 'editor-container'
        }, function() {
          return _this.subview(keyPath.replace(/\./g, ''), new EditorView({
            mini: true,
            attributes: {
              id: keyPath,
              type: 'array'
            }
          }));
        });
      };
    })(this));
  };

  appendObject = function(namespace, name, value) {
    var key, _i, _len, _ref1, _results;
    _ref1 = _.keys(value).sort();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      key = _ref1[_i];
      _results.push(appendSetting.call(this, namespace, "" + name + "." + key, value[key]));
    }
    return _results;
  };

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/settings-panel.js.map
