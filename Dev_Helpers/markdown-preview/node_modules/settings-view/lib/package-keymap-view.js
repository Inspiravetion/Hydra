(function() {
  var $$$, PackageKeymapView, View, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  _ref = require('atom'), $$$ = _ref.$$$, View = _ref.View;

  module.exports = PackageKeymapView = (function(_super) {
    __extends(PackageKeymapView, _super);

    function PackageKeymapView() {
      return PackageKeymapView.__super__.constructor.apply(this, arguments);
    }

    PackageKeymapView.content = function() {
      return this.section((function(_this) {
        return function() {
          _this.div({
            "class": 'section-heading icon icon-keyboard'
          }, 'Keybindings');
          return _this.table({
            "class": 'package-keymap-table table native-key-bindings text',
            tabindex: -1
          }, function() {
            _this.thead(function() {
              return _this.tr(function() {
                _this.th('Keystroke');
                _this.th('Command');
                return _this.th('Selector');
              });
            });
            return _this.tbody({
              outlet: 'keybindingItems'
            });
          });
        };
      })(this));
    };

    PackageKeymapView.prototype.initialize = function(namespace) {
      var command, keystroke, otherPlatformPattern, selector, _i, _len, _ref1, _ref2;
      otherPlatformPattern = new RegExp("\\.platform-(?!" + (_.escapeRegExp(process.platform)) + "\\b)");
      _ref1 = atom.keymap.getKeyBindings();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        _ref2 = _ref1[_i], command = _ref2.command, keystroke = _ref2.keystroke, selector = _ref2.selector;
        if ((command != null ? typeof command.indexOf === "function" ? command.indexOf("" + namespace + ":") : void 0 : void 0) !== 0) {
          continue;
        }
        if (otherPlatformPattern.test(selector)) {
          continue;
        }
        this.keybindingItems.append($$$(function() {
          return this.tr((function(_this) {
            return function() {
              _this.td(keystroke);
              _this.td(command);
              return _this.td(selector);
            };
          })(this));
        }));
      }
      if (!(this.keybindingItems.children().length > 0)) {
        return this.hide();
      }
    };

    return PackageKeymapView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/package-keymap-view.js.map
