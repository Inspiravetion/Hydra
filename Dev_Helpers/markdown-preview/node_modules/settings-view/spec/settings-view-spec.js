(function() {
  var $$, SettingsView, WorkspaceView, path, _ref;

  path = require('path');

  _ref = require('atom'), $$ = _ref.$$, WorkspaceView = _ref.WorkspaceView;

  SettingsView = require('../lib/settings-view');

  describe("SettingsView", function() {
    var settingsView;
    settingsView = null;
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView();
      settingsView = new SettingsView;
      spyOn(settingsView, "initializePanels").andCallThrough();
      window.advanceClock(10000);
      return waitsFor(function() {
        return settingsView.initializePanels.callCount > 0;
      });
    });
    describe("serialization", function() {
      it("remembers which panel was visible", function() {
        var newSettingsView;
        settingsView.showPanel('Themes');
        newSettingsView = new SettingsView(settingsView.serialize());
        settingsView.remove();
        newSettingsView.attachToDom();
        newSettingsView.initializePanels();
        return expect(newSettingsView.activePanelName).toBe('Themes');
      });
      it("shows the previously active panel if it is added after deserialization", function() {
        var newSettingsView;
        settingsView.addCorePanel('Panel 1', 'panel1', function() {
          return $$(function() {
            return this.div({
              id: 'panel-1'
            });
          });
        });
        settingsView.showPanel('Panel 1');
        newSettingsView = new SettingsView(settingsView.serialize());
        newSettingsView.addPanel('Panel 1', 'panel1', function() {
          return $$(function() {
            return this.div({
              id: 'panel-1'
            });
          });
        });
        newSettingsView.initializePanels();
        newSettingsView.attachToDom();
        return expect(newSettingsView.activePanelName).toBe('Panel 1');
      });
      it("shows the Settings panel if the last saved active panel name no longer exists", function() {
        var newSettingsView;
        settingsView.addCorePanel('Panel 1', 'panel1', function() {
          return $$(function() {
            return this.div({
              id: 'panel-1'
            });
          });
        });
        settingsView.showPanel('Panel 1');
        newSettingsView = new SettingsView(settingsView.serialize());
        settingsView.remove();
        newSettingsView.attachToDom();
        newSettingsView.initializePanels();
        return expect(newSettingsView.activePanelName).toBe('Settings');
      });
      return it("serializes the active panel name even when the panels were never initialized", function() {
        var settingsView2, settingsView3;
        settingsView.showPanel('Themes');
        settingsView2 = new SettingsView(settingsView.serialize());
        settingsView3 = new SettingsView(settingsView2.serialize());
        settingsView3.attachToDom();
        settingsView3.initializePanels();
        return expect(settingsView3.activePanelName).toBe('Themes');
      });
    });
    describe(".addCorePanel(name, iconName, view)", function() {
      return it("adds a menu entry to the left and a panel that can be activated by clicking it", function() {
        settingsView.addCorePanel('Panel 1', 'panel1', function() {
          return $$(function() {
            return this.div({
              id: 'panel-1'
            });
          });
        });
        settingsView.addCorePanel('Panel 2', 'panel2', function() {
          return $$(function() {
            return this.div({
              id: 'panel-2'
            });
          });
        });
        expect(settingsView.panelMenu.find('li a:contains(Panel 1)')).toExist();
        expect(settingsView.panelMenu.find('li a:contains(Panel 2)')).toExist();
        expect(settingsView.panelMenu.children(':first')).toHaveClass('active');
        settingsView.attachToDom();
        settingsView.panelMenu.find('li a:contains(Panel 1)').click();
        expect(settingsView.panelMenu.children('.active').length).toBe(1);
        expect(settingsView.panelMenu.find('li:contains(Panel 1)')).toHaveClass('active');
        expect(settingsView.panels.find('#panel-1')).toBeVisible();
        expect(settingsView.panels.find('#panel-2')).not.toExist();
        settingsView.panelMenu.find('li a:contains(Panel 2)').click();
        expect(settingsView.panelMenu.children('.active').length).toBe(1);
        expect(settingsView.panelMenu.find('li:contains(Panel 2)')).toHaveClass('active');
        expect(settingsView.panels.find('#panel-1')).toBeHidden();
        return expect(settingsView.panels.find('#panel-2')).toBeVisible();
      });
    });
    return describe(".addPackagePanel(package)", function() {
      return it("adds a menu entry to the left and a panel that can be activated by clicking it", function() {
        waitsForPromise(function() {
          return atom.packages.activatePackage(path.join(__dirname, 'fixtures', 'a-theme'));
        });
        return runs(function() {
          var pack;
          pack = atom.packages.getActivePackage('a-theme');
          settingsView.addPackagePanel(pack);
          expect(settingsView.panelPackages.find('li a:contains(A Theme)')).toExist();
          settingsView.attachToDom();
          expect(settingsView.panels.find('.installed-package-view')).not.toExist();
          settingsView.panelPackages.find('li a:contains(A Theme)').click();
          expect(settingsView.panelPackages.children('.active').length).toBe(1);
          expect(settingsView.panelPackages.find('li:contains(A Theme)')).toHaveClass('active');
          return expect(settingsView.panels.find('.installed-package-view')).toBeVisible();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/spec/settings-view-spec.js.map
