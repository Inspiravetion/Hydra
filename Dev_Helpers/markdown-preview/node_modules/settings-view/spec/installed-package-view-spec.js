(function() {
  var InstalledPackageView, PackageManager, WorkspaceView, path;

  path = require('path');

  WorkspaceView = require('atom').WorkspaceView;

  InstalledPackageView = require('../lib/installed-package-view');

  PackageManager = require('../lib/package-manager');

  describe("InstalledPackageView", function() {
    it("display the grammars registered by the package", function() {
      var grammarTable;
      grammarTable = null;
      waitsForPromise(function() {
        return atom.packages.activatePackage(path.join(__dirname, 'fixtures', 'language-test'));
      });
      runs(function() {
        var pack, view;
        pack = atom.packages.getActivePackage('language-test');
        view = new InstalledPackageView(pack, new PackageManager());
        return grammarTable = view.find('.package-grammars-table tbody');
      });
      waitsFor(function() {
        return grammarTable.children().length === 2;
      });
      return runs(function() {
        expect(grammarTable.find('tr:eq(0) td:eq(0)').text()).toBe('A Grammar');
        expect(grammarTable.find('tr:eq(0) td:eq(1)').text()).toBe('.a, .aa, a');
        expect(grammarTable.find('tr:eq(0) td:eq(2)').text()).toBe('source.a');
        expect(grammarTable.find('tr:eq(1) td:eq(0)').text()).toBe('B Grammar');
        expect(grammarTable.find('tr:eq(1) td:eq(1)').text()).toBe('');
        return expect(grammarTable.find('tr:eq(1) td:eq(2)').text()).toBe('source.b');
      });
    });
    it("displays the snippets registered by the package", function() {
      var snippetsTable;
      snippetsTable = null;
      atom.workspaceView = new WorkspaceView();
      waitsForPromise(function() {
        return atom.packages.activatePackage('snippets');
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage(path.join(__dirname, 'fixtures', 'language-test'));
      });
      runs(function() {
        var pack, view;
        pack = atom.packages.getActivePackage('language-test');
        view = new InstalledPackageView(pack, new PackageManager());
        return snippetsTable = view.find('.package-snippets-table tbody');
      });
      waitsFor(function() {
        return snippetsTable.children().length === 2;
      });
      return runs(function() {
        expect(snippetsTable.find('tr:eq(0) td:eq(0)').text()).toBe('b');
        expect(snippetsTable.find('tr:eq(0) td:eq(1)').text()).toBe('BAR');
        expect(snippetsTable.find('tr:eq(0) td:eq(2)').text()).toBe('bar?');
        expect(snippetsTable.find('tr:eq(1) td:eq(0)').text()).toBe('f');
        expect(snippetsTable.find('tr:eq(1) td:eq(1)').text()).toBe('FOO');
        return expect(snippetsTable.find('tr:eq(1) td:eq(2)').text()).toBe('foo!');
      });
    });
    return it("does not display keybindings from other platforms", function() {
      var keybindingsTable;
      keybindingsTable = null;
      waitsForPromise(function() {
        return atom.packages.activatePackage(path.join(__dirname, 'fixtures', 'language-test'));
      });
      return runs(function() {
        var pack, view;
        pack = atom.packages.getActivePackage('language-test');
        view = new InstalledPackageView(pack, new PackageManager());
        keybindingsTable = view.find('.package-keymap-table tbody');
        return expect(keybindingsTable.children().length).toBe(0);
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/settings-view/spec/installed-package-view-spec.js.map
