{
  "name": "space-pen",
  "version": "3.1.1",
  "description": "Write markup on the final frontier",
  "main": "./lib/space-pen.js",
  "scripts": {
    "prepublish": "grunt clean lint coffee",
    "test": "grunt test",
    "start": "grunt start"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/space-pen/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/atom/space-pen.git"
  },
  "bugs": {
    "url": "https://github.com/atom/space-pen/issues"
  },
  "devDependencies": {
    "express": "~3.4.0",
    "coffee-script": "~1.6.3",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-cli": "~0.1.8",
    "grunt": "~0.4.1",
    "grunt-coffeelint": "0.0.6",
    "browserify": "~2.34.1",
    "jasmine-focused": "~0.15.0",
    "grunt-shell": "~0.5.0",
    "coffeeify": "~0.5.1",
    "grunt-contrib-connect": "~0.5.0"
  },
  "dependencies": {
    "underscore-plus": "1.x"
  },
  "readme": "# SpacePen [![Build Status](https://travis-ci.org/atom/space-pen.png?branch=master)](https://travis-ci.org/atom/space-pen)\n\n## Write markup on the final frontier\n\nSpacePen is a powerful but minimalist client-side view framework for\nCoffeeScript. It combines the \"view\" and \"controller\" into a single jQuery\nobject, whose markup is expressed with an embedded DSL similar to Markaby for\nRuby.\n\n## Basics\n\nView objects extend from the View class and have a @content class method where\nyou express their HTML contents with an embedded markup DSL:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: ->\n    @div =>\n      @h1 \"Spacecraft\"\n      @ol =>\n        @li \"Apollo\"\n        @li \"Soyuz\"\n        @li \"Space Shuttle\"\n```\n\nViews descend from jQuery's prototype, so when you construct one you can call\njQuery methods on it just as you would a DOM fragment created with `$(...)`.\n\n```coffeescript\nview = new Spacecraft\nview.find('ol').append('<li>Star Destroyer</li>')\n\nview.on 'click', 'li', ->\n  alert \"They clicked on #{$(this).text()}\"\n```\n\nBut SpacePen views are more powerful than normal jQuery fragments because they\nlet you define custom methods:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  addSpacecraft: (name) ->\n    @find('ol').append \"<li>#{name}</li>\"\n\n\nview = new Spacecraft\nview.addSpacecraft \"Enterprise\"\n```\n\nYou can also pass arguments on construction, which get passed to both the\n`@content` method and the view's constructor.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: (params) ->\n    @div =>\n      @h1 params.title\n      @ol =>\n        @li name for name in params.spacecraft\n\nview = new Spacecraft(title: \"Space Weapons\", spacecraft: [\"TIE Fighter\", \"Death Star\", \"Warbird\"])\n```\n\nMethods from the jQuery prototype can be gracefully overridden using `super`:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  hide: ->\n    console.log \"Hiding Spacecraft List\"\n    super()\n```\n\nIf you override the View class's constructor, ensure you call `super`.\nAlternatively, you can define an `initialize` method, which the constructor will\ncall for you automatically with the constructor's arguments.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  initialize: (params) ->\n    @title = params.title\n```\n\n## Outlets and Events\n\nSpacePen will automatically create named reference for any element with an\n`outlet` attribute. For example, if the `ol` element has an attribute\n`outlet=list`, the view object will have a `list` entry pointing to a jQuery\nwrapper for the `ol` element.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: ->\n    @div =>\n      @h1 \"Spacecraft\"\n      @ol outlet: \"list\", =>\n        @li \"Apollo\"\n        @li \"Soyuz\"\n        @li \"Space Shuttle\"\n\n  addSpacecraft: (name) ->\n    @list.append(\"<li>#{name}</li>\")\n```\n\nElements can also have event name attributes whose value references a custom\nmethod. For example, if a `button` element has an attribute\n`click=launchSpacecraft`, then SpacePen will invoke the `launchSpacecraft`\nmethod on the button`s parent view when it is clicked:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: ->\n    @div =>\n      @h1 \"Spacecraft\"\n      @ol =>\n        @li click: 'launchSpacecraft', \"Saturn V\"\n\n  launchSpacecraft: (event, element) ->\n    console.log \"Preparing #{element.name} for launch!\"\n```\n## Markup DSL Details\n\n### Tag Methods (`@div`, `@h1`, etc.)\n\nAs you've seen so far, the markup DSL is pretty straightforward. From the\n`@content` class method or any method it calls, just invoke instance methods\nnamed for the HTML tags you want to generate. There are 3 types of arguments you\ncan pass to a tag method:\n\n* Strings\n  The string will be HTML-escaped and used as the text contents of the generated tag.\n\n* Hashes\n  The key-value pairs will be used as the attributes of the generated tag.\n\n* Functions (bound with `=>`)\n  The function will be invoked in-between the open and closing tag to produce\n  the HTML element's contents.\n\nIf you need to emit a non-standard tag, you can use the `@tag(name, args...)`\nmethod to name the tag with a string:\n\n```coffeescript\n@tag 'bubble', type: \"speech\", => ...\n```\n\n### Text Methods\n\n* `@text(string)`\n  Emits the HTML-escaped string as text wherever it is called.\n\n* `@raw(string)`\n  Passes the given string through unescaped. Use this when you need to emit markup directly that was generated beforehand.\n\n## Subviews\n\nSubviews are a great way to make your view code more modular. The\n`@subview(name, view)` method takes a name and another view object. The view\nobject will be inserted at the location of the call, and a reference with the\ngiven name will be wired to it from the parent view. A `parentView` reference\nwill be created on the subview pointing at the parent.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: (params) ->\n    @div =>\n      @subview 'launchController', new LaunchController(countdown: params.countdown)\n      @h1 \"Spacecraft\"\n      ...\n```\n\n## Freeform Markup Generation\n\nYou don't need a View class to use the SpacePen markup DSL. Call `View.render`\nwith an unbound function (`->`, not `=>`) that calls tag methods, and it will\nreturn a document fragment for ad-hoc use. This method is also assigned to the\n`$$` global variable for convenience.\n\n```coffeescript\nview.list.append $$ ->\n  @li =>\n    @text \"Starship\"\n    @em \"Enterprise\"\n```\n\n## jQuery extensions\n\n### $.fn.view\nYou can retrieve the view object for any DOM element by calling `view()` on it.\nThis usually shouldn't be necessary, as most DOM manipulation will take place\nwithin the view itself using outlet references, but is occasionally helpful.\n\n```coffeescript\nview = new Spacecraft\n$('body').append(view)\n\n# assuming no other li elements on the DOM, for example purposes,\n# the following expression should be true\n$('li').view() == view\n```\n\n### After Attach Hooks\nThe `initialize` method is always called when the view is still a detached DOM\nfragment, before it is appended to the DOM. This is usually okay, but\noccasionally you'll have some initialization logic that depends on the view\nactually being on the DOM. For example, you may depend on applying a CSS rule\nbefore measuring an element's height.\n\nSpacePen extends jQuery manipulation methods like `append`, `replaceWith`, etc.\nto call `afterAttach` hooks on your view objects when they are appended to other\nelements. The hook will be called with a boolean value indicating whether the\nview is attached to the main DOM or just to another DOM fragment. If\n`afterAttach` is called with `true`, you can assume your object is attached to\nthe page.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  afterAttach: (onDom) ->\n    if onDom\n      console.log \"With CSS applied, my height is\", @height()\n    else\n      console.log \"I just attached to\", @parent()\n```\n\n### Before Remove Hooks\nSpacePen calls the `beforeRemove` hook whenever a view is removed from the DOM\nvia a jQuery method. This works if the view is removed directly with `remove` or\nindirectly when a method like `empty` or `html` is called on a parent element.\nThis is a good place to clean up subscriptions and other view-specific state.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  initialize: ->\n    $(window).on 'resize.spacecraft', -> ...\n\n  beforeRemove: ->\n    $(window).off('.spacecraft')\n```\n\n## Anticipated Concerns / Objections\n\n### What about the view/controller distinction?\nMVC was invented in a setting where graphics rendering was substantially more\ncomplex than it is in a web browser. In Cocoa development, for example, a view\nobject's primary role is to implement `drawRect` and forward UI events to the\ncontroller. But in a browser, you don't need to handle your own rendering with\n`drawRect`. Instead, you express the view declaratively using markup and CSS,\nand the browser takes care of the rest. The closest thing to a MVC \"view\" in\nthis world is a fragment of markup, but this contains very little logic. On the\nweb, the view/controller distinction is like a vestigial organ: It's a solution\nto a problem we no longer have, and no longer justifies the conceptual overhead\nof using two objects where one would do.\n\n### Our designers can't handle writing markup in CoffeeScript\nOkay. SpacePen might not be the right fit for you. But are you sure they can't\nhandle it? What if you pair with them for a couple hours and teach them what to\ndo? There's also the potential of plugging in another template language for\ncontent generation, while keeping the rest of the framework. But if developers\nare writing the majority of the markup, expressing it directly in CoffeeScript\nis a productivity win.\n\n\n## Hacking on SpacePen\n\n```sh\ngit clone https://github.com/atom/space-pen.git\ncd space-pen\nnpm install\nnpm start\n```\n\n* Open http://localhost:1337 to run the specs\n* Open http://localhost:1337/benchmark to run the benchmarks\n* Open http://localhost:1337/examples to browse the examples\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/atom/space-pen",
  "_id": "space-pen@3.1.1",
  "dist": {
    "shasum": "48f2ac19289a1a2d06d8613792f60e65f150a122"
  },
  "_from": "space-pen@3.1.1",
  "_resolved": "https://registry.npmjs.org/space-pen/-/space-pen-3.1.1.tgz"
}
