(function() {
  var WorkspaceView, shell;

  WorkspaceView = require('atom').WorkspaceView;

  shell = require('shell');

  describe("link package", function() {
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-gfm');
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-javascript');
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-hyperlink');
      });
      atom.workspaceView = new WorkspaceView;
      atom.workspace = atom.workspaceView.model;
      return waitsForPromise(function() {
        return atom.packages.activatePackage('link');
      });
    });
    return describe("when the cursor is on a link", function() {
      it("opens the link using the 'open' command", function() {
        var editor, editorView;
        atom.workspaceView.openSync('sample.js');
        editorView = atom.workspaceView.getActiveView();
        editor = editorView.editor;
        editor.setText("// \"http://github.com\"");
        spyOn(shell, 'openExternal');
        editorView.trigger('link:open');
        expect(shell.openExternal).not.toHaveBeenCalled();
        editor.setCursorBufferPosition([0, 4]);
        editorView.trigger('link:open');
        expect(shell.openExternal).toHaveBeenCalled();
        expect(shell.openExternal.argsForCall[0][0]).toBe('http://github.com');
        shell.openExternal.reset();
        editor.setCursorBufferPosition([0, 8]);
        editorView.trigger('link:open');
        expect(shell.openExternal).toHaveBeenCalled();
        expect(shell.openExternal.argsForCall[0][0]).toBe('http://github.com');
        shell.openExternal.reset();
        editor.setCursorBufferPosition([0, 21]);
        editorView.trigger('link:open');
        expect(shell.openExternal).toHaveBeenCalled();
        return expect(shell.openExternal.argsForCall[0][0]).toBe('http://github.com');
      });
      describe("when the cursor is on a [name][url-name] style markdown link", function() {
        return it("opens the named url", function() {
          var editor, editorView;
          atom.workspaceView.openSync('README.md');
          editorView = atom.workspaceView.getActiveView();
          editor = editorView.editor;
          editor.setText("you should [click][here]\nyou should not [click][her]\n\n[here]: http://github.com");
          spyOn(shell, 'openExternal');
          editor.setCursorBufferPosition([0, 0]);
          editorView.trigger('link:open');
          expect(shell.openExternal).not.toHaveBeenCalled();
          editor.setCursorBufferPosition([0, 20]);
          editorView.trigger('link:open');
          expect(shell.openExternal).toHaveBeenCalled();
          expect(shell.openExternal.argsForCall[0][0]).toBe('http://github.com');
          shell.openExternal.reset();
          editor.setCursorBufferPosition([1, 24]);
          editorView.trigger('link:open');
          return expect(shell.openExternal).not.toHaveBeenCalled();
        });
      });
      return it("does not open non http/https links", function() {
        var editor, editorView;
        atom.workspaceView.openSync('sample.js');
        editorView = atom.workspaceView.getActiveView();
        editor = editorView.editor;
        editor.setText("// ftp://github.com\n");
        spyOn(shell, 'openExternal');
        editorView.trigger('link:open');
        expect(shell.openExternal).not.toHaveBeenCalled();
        editor.setCursorBufferPosition([0, 5]);
        editorView.trigger('link:open');
        return expect(shell.openExternal).not.toHaveBeenCalled();
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/link/spec/link-spec.js.map
