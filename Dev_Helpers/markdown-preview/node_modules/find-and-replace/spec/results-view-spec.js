(function() {
  var ResultsPaneView, WorkspaceView, path, waitsForPromise, _;

  path = require('path');

  _ = require('underscore-plus');

  WorkspaceView = require('atom').WorkspaceView;

  path = require('path');

  ResultsPaneView = require('../lib/project/results-pane');

  waitsForPromise = function(fn) {
    return window.waitsForPromise({
      timeout: 30000
    }, fn);
  };

  describe('ResultsView', function() {
    var getExistingResultsPane, getResultsView, pack, projectFindView, resultsView, searchPromise, _ref;
    _ref = [], pack = _ref[0], projectFindView = _ref[1], resultsView = _ref[2], searchPromise = _ref[3];
    getExistingResultsPane = function() {
      var pane;
      pane = atom.workspaceView.panes.paneForUri(ResultsPaneView.URI);
      if (pane != null) {
        return pane.itemForUri(ResultsPaneView.URI);
      }
      return null;
    };
    getResultsView = function() {
      return resultsView = getExistingResultsPane().resultsView;
    };
    beforeEach(function() {
      var promise;
      atom.workspaceView = new WorkspaceView();
      atom.workspaceView.height(1000);
      atom.project.setPath(path.join(__dirname, 'fixtures'));
      atom.workspaceView.attachToDom();
      promise = atom.packages.activatePackage("find-and-replace").then(function(_arg) {
        var mainModule, spy;
        mainModule = _arg.mainModule;
        mainModule.createProjectFindView();
        projectFindView = mainModule.projectFindView;
        return spy = spyOn(projectFindView, 'confirm').andCallFake(function() {
          return searchPromise = spy.originalValue.call(projectFindView);
        });
      });
      atom.workspaceView.trigger('project-find:show');
      return waitsForPromise(function() {
        return promise;
      });
    });
    describe("when the result is for a long line", function() {
      return it("renders the context around the match", function() {
        projectFindView.findEditor.setText('ghijkl');
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          resultsView = getResultsView();
          expect(resultsView.find('.preview').length).toBe(1);
          expect(resultsView.find('.preview').text()).toBe('test test test test test test test test test test test a b c d e f g h i j k l abcdefghijklmnopqrstuvwxyz');
          return expect(resultsView.find('.match').text()).toBe('ghijkl');
        });
      });
    });
    describe("rendering replacement text", function() {
      var modifiedDelay;
      modifiedDelay = null;
      beforeEach(function() {
        projectFindView.findEditor.setText('ghijkl');
        return modifiedDelay = projectFindView.replaceEditor.getEditor().getBuffer().stoppedChangingDelay;
      });
      it("renders the replacement when doing a search and there is a replacement pattern", function() {
        projectFindView.replaceEditor.setText('cats');
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          resultsView = getResultsView();
          expect(resultsView.find('.preview').length).toBe(1);
          expect(resultsView.find('.match').text()).toBe('ghijkl');
          return expect(resultsView.find('.replacement').text()).toBe('cats');
        });
      });
      return it("renders the replacement when changing the text in the replacement field", function() {
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          resultsView = getResultsView();
          expect(resultsView.find('.match').text()).toBe('ghijkl');
          expect(resultsView.find('.match')).toHaveClass('highlight-info');
          expect(resultsView.find('.replacement').text()).toBe('');
          expect(resultsView.find('.replacement')).toBeHidden();
          projectFindView.replaceEditor.setText('cats');
          advanceClock(modifiedDelay);
          expect(resultsView.find('.match').text()).toBe('ghijkl');
          expect(resultsView.find('.match')).toHaveClass('highlight-error');
          expect(resultsView.find('.replacement').text()).toBe('cats');
          expect(resultsView.find('.replacement')).toBeVisible();
          projectFindView.replaceEditor.setText('');
          advanceClock(modifiedDelay);
          expect(resultsView.find('.match').text()).toBe('ghijkl');
          expect(resultsView.find('.match')).toHaveClass('highlight-info');
          return expect(resultsView.find('.replacement')).toBeHidden();
        });
      });
    });
    describe("when list is scrollable", function() {
      it("adds more operations to the DOM when `scrollBottom` nears the `pixelOverdraw`", function() {
        projectFindView.findEditor.setText(' ');
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          var previousOperationCount, previousScrollHeight;
          resultsView = getResultsView();
          expect(resultsView.prop('scrollHeight')).toBeGreaterThan(resultsView.height());
          previousScrollHeight = resultsView.prop('scrollHeight');
          previousOperationCount = resultsView.find("li").length;
          resultsView.scrollTop(resultsView.pixelOverdraw / 2);
          resultsView.trigger('scroll');
          expect(resultsView.prop('scrollHeight')).toBe(previousScrollHeight);
          expect(resultsView.find("li").length).toBe(previousOperationCount);
          resultsView.scrollToBottom();
          resultsView.trigger('scroll');
          expect(resultsView.prop('scrollHeight')).toBeGreaterThan(previousScrollHeight);
          return expect(resultsView.find("li").length).toBeGreaterThan(previousOperationCount);
        });
      });
      return it("renders all operations when core:move-to-bottom is triggered", function() {
        atom.workspaceView.height(300);
        projectFindView.findEditor.setText('so');
        projectFindView.confirm();
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          var previousScrollHeight;
          resultsView = getResultsView();
          expect(resultsView.prop('scrollHeight')).toBeGreaterThan(resultsView.height());
          previousScrollHeight = resultsView.prop('scrollHeight');
          resultsView.trigger('core:move-to-bottom');
          return expect(resultsView.find("li").length).toBe(resultsView.getPathCount() + resultsView.getMatchCount());
        });
      });
    });
    describe("arrowing through the list", function() {
      describe("when nothing is selected", function() {
        beforeEach(function() {
          projectFindView.findEditor.setText('items');
          return projectFindView.trigger('core:confirm');
        });
        it("doesnt error when the user arrows down", function() {
          waitsForPromise(function() {
            return searchPromise;
          });
          return runs(function() {
            resultsView = getResultsView();
            resultsView.find('.selected').removeClass('selected');
            expect(resultsView.find('.selected')).not.toExist();
            resultsView.trigger('core:move-down');
            return expect(resultsView.find('.selected')).toExist();
          });
        });
        return it("doesnt error when the user arrows up", function() {
          waitsForPromise(function() {
            return searchPromise;
          });
          return runs(function() {
            resultsView = getResultsView();
            resultsView.find('.selected').removeClass('selected');
            expect(resultsView.find('.selected')).not.toExist();
            resultsView.trigger('core:move-up');
            return expect(resultsView.find('.selected')).toExist();
          });
        });
      });
      it("arrows through the list without selecting paths", function() {
        var openHandler;
        atom.workspaceView.openSync('sample.js');
        projectFindView.findEditor.setText('items');
        projectFindView.trigger('core:confirm');
        openHandler = jasmine.createSpy("open handler");
        atom.workspaceView.model.on('uri-opened', openHandler);
        waitsForPromise(function() {
          return searchPromise;
        });
        runs(function() {
          resultsView = getResultsView();
          resultsView.selectFirstResult();
          _.times(3, function() {
            return resultsView.trigger('core:move-down');
          });
          openHandler.reset();
          return resultsView.trigger('core:confirm');
        });
        waitsFor(function() {
          return openHandler.callCount === 1;
        });
        runs(function() {
          expect(atom.workspaceView.getActivePaneItem().getPath()).toContain('sample.');
          resultsView.focus();
          _.times(6, function() {
            return resultsView.trigger('core:move-down');
          });
          openHandler.reset();
          return resultsView.trigger('core:confirm');
        });
        waitsFor(function() {
          return openHandler.callCount === 1;
        });
        return runs(function() {
          var activePane;
          activePane = atom.workspaceView.getActivePane();
          return expect(atom.workspaceView.getActivePaneItem().getPath()).toContain('sample.');
        });
      });
      it("arrows through the list without selecting paths", function() {
        atom.workspaceView.openSync('sample.js');
        projectFindView.findEditor.setText('items');
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          var lastSelectedItem, length;
          resultsView = getResultsView();
          lastSelectedItem = null;
          length = resultsView.find("li > ul > li").length;
          expect(length).toBe(13);
          resultsView.selectFirstResult();
          _.times(length - 1, function() {
            var selectedItem;
            resultsView.trigger('core:move-down');
            selectedItem = resultsView.find('.selected');
            expect(selectedItem).toHaveClass('search-result');
            expect(selectedItem[0]).not.toBe(lastSelectedItem);
            return lastSelectedItem = selectedItem[0];
          });
          _.times(2, function() {
            var selectedItem;
            resultsView.trigger('core:move-down');
            selectedItem = resultsView.find('.selected');
            expect(selectedItem[0]).toBe(lastSelectedItem);
            return lastSelectedItem = selectedItem[0];
          });
          _.times(length - 1, function() {
            var selectedItem;
            resultsView.trigger('core:move-up');
            selectedItem = resultsView.find('.selected');
            expect(selectedItem).toHaveClass('search-result');
            expect(selectedItem[0]).not.toBe(lastSelectedItem);
            return lastSelectedItem = selectedItem[0];
          });
          return _.times(2, function() {
            var selectedItem;
            resultsView.trigger('core:move-up');
            selectedItem = resultsView.find('.selected');
            expect(selectedItem[0]).toBe(lastSelectedItem);
            return lastSelectedItem = selectedItem[0];
          });
        });
      });
      it("moves to the proper next search-result when a path is selected", function() {
        projectFindView.findEditor.setText('items');
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          var selectedItem;
          resultsView = getResultsView();
          resultsView.find('.selected').removeClass('selected');
          resultsView.find('.path:eq(0)').addClass('selected');
          resultsView.trigger('core:move-up');
          selectedItem = resultsView.find('.selected');
          expect(selectedItem).toHaveClass('path');
          resultsView.trigger('core:move-down');
          selectedItem = resultsView.find('.selected');
          expect(selectedItem).toHaveClass('search-result');
          return expect(selectedItem[0]).toBe(resultsView.find('.path:eq(0) .search-result:first')[0]);
        });
      });
      return it("moves to the proper previous search-result when a path is selected", function() {
        projectFindView.findEditor.setText('items');
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          var selectedItem;
          resultsView = getResultsView();
          resultsView.find('.selected').removeClass('selected');
          resultsView.find('.path:eq(1)').addClass('selected');
          resultsView.trigger('core:move-up');
          selectedItem = resultsView.find('.selected');
          expect(selectedItem).toHaveClass('search-result');
          return expect(selectedItem[0]).toBe(resultsView.find('.path:eq(0) .search-result:last')[0]);
        });
      });
    });
    return describe("when the results view is empty", function() {
      return it("ignores core:confirm events", function() {
        projectFindView.findEditor.setText('thiswillnotmatchanythingintheproject');
        projectFindView.trigger('core:confirm');
        waitsForPromise(function() {
          return searchPromise;
        });
        return runs(function() {
          resultsView = getResultsView();
          return expect(function() {
            return resultsView.trigger('core:confirm');
          }).not.toThrow();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/spec/results-view-spec.js.map
