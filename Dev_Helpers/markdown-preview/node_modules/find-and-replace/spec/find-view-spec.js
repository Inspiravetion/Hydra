(function() {
  var $, WorkspaceView, path, _, _ref;

  _ = require('underscore-plus');

  _ref = require('atom'), $ = _ref.$, WorkspaceView = _ref.WorkspaceView;

  path = require('path');

  describe('FindView', function() {
    var activationPromise, editor, editorView, findView, _ref1;
    _ref1 = [], editorView = _ref1[0], editor = _ref1[1], findView = _ref1[2], activationPromise = _ref1[3];
    beforeEach(function() {
      spyOn(atom, 'beep');
      atom.workspaceView = new WorkspaceView();
      atom.project.setPath(path.join(__dirname, 'fixtures'));
      atom.workspaceView.openSync('sample.js');
      atom.workspaceView.attachToDom();
      editorView = atom.workspaceView.getActiveView();
      editor = editorView.getEditor();
      return activationPromise = atom.packages.activatePackage("find-and-replace").then(function(_arg) {
        var mainModule;
        mainModule = _arg.mainModule;
        mainModule.createFindView();
        return findView = mainModule.findView, mainModule;
      });
    });
    describe("when find-and-replace:show is triggered", function() {
      it("attaches FindView to the root view", function() {
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          return expect(atom.workspaceView.find('.find-and-replace')).toExist();
        });
      });
      it("populates the findEditor with selection when there is a selection", function() {
        editor.setSelectedBufferRange([[2, 8], [2, 13]]);
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          expect(atom.workspaceView.find('.find-and-replace')).toExist();
          expect(findView.findEditor.getText()).toBe('items');
          findView.findEditor.setText('');
          editor.setSelectedBufferRange([[2, 14], [2, 20]]);
          editorView.trigger('find-and-replace:show');
          expect(atom.workspaceView.find('.find-and-replace')).toExist();
          return expect(findView.findEditor.getText()).toBe('length');
        });
      });
      it("does not change the findEditor text when there is no selection", function() {
        editor.setSelectedBufferRange([[2, 8], [2, 8]]);
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          findView.findEditor.setText('kitten');
          editorView.trigger('find-and-replace:show');
          return expect(findView.findEditor.getText()).toBe('kitten');
        });
      });
      return it("does not change the findEditor text when there is a multiline selection", function() {
        editor.setSelectedBufferRange([[2, 8], [3, 12]]);
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          expect(atom.workspaceView.find('.find-and-replace')).toExist();
          return expect(findView.findEditor.getText()).toBe('');
        });
      });
    });
    describe("when FindView's replace editor is visible", function() {
      return it("keeps the replace editor visible when find-and-replace:show is triggered", function() {
        editorView.trigger('find-and-replace:show-replace');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          editorView.trigger('find-and-replace:show');
          return expect(findView.replaceEditor).toBeVisible();
        });
      });
    });
    describe("when core:cancel is triggered", function() {
      beforeEach(function() {
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          findView.findEditor.setText('items');
          findView.findEditor.trigger('core:confirm');
          return findView.focus();
        });
      });
      it("detaches from the root view", function() {
        $(document.activeElement).trigger('core:cancel');
        return expect(atom.workspaceView.find('.find-and-replace')).not.toExist();
      });
      return it("removes highlighted matches", function() {
        var findResultsView;
        findResultsView = editorView.find('.search-results');
        $(document.activeElement).trigger('core:cancel');
        return expect(findResultsView.parent()).not.toExist();
      });
    });
    describe("serialization", function() {
      it("serializes find and replace history", function() {
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        runs(function() {
          findView.findEditor.setText("items");
          findView.replaceEditor.setText("cat");
          findView.replaceAll();
          findView.findEditor.setText("sort");
          findView.replaceEditor.setText("dog");
          findView.replaceNext();
          findView.findEditor.setText("shift");
          findView.replaceEditor.setText("ok");
          findView.findNext(false);
          atom.packages.deactivatePackage("find-and-replace");
          activationPromise = atom.packages.activatePackage("find-and-replace").then(function(_arg) {
            var mainModule;
            mainModule = _arg.mainModule;
            mainModule.createFindView();
            return findView = mainModule.findView, mainModule;
          });
          return editorView.trigger('find-and-replace:show');
        });
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toBe('shift');
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toBe('sort');
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toBe('items');
          findView.replaceEditor.trigger('core:move-up');
          expect(findView.replaceEditor.getText()).toBe('dog');
          findView.replaceEditor.trigger('core:move-up');
          return expect(findView.replaceEditor.getText()).toBe('cat');
        });
      });
      return it("serializes find options ", function() {
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        runs(function() {
          expect(findView.caseOptionButton).not.toHaveClass('selected');
          expect(findView.regexOptionButton).not.toHaveClass('selected');
          expect(findView.selectionOptionButton).not.toHaveClass('selected');
          findView.caseOptionButton.click();
          findView.regexOptionButton.click();
          findView.selectionOptionButton.click();
          expect(findView.caseOptionButton).toHaveClass('selected');
          expect(findView.regexOptionButton).toHaveClass('selected');
          expect(findView.selectionOptionButton).toHaveClass('selected');
          atom.packages.deactivatePackage("find-and-replace");
          activationPromise = atom.packages.activatePackage("find-and-replace").then(function(_arg) {
            var mainModule;
            mainModule = _arg.mainModule;
            mainModule.createFindView();
            return findView = mainModule.findView, mainModule;
          });
          return editorView.trigger('find-and-replace:show');
        });
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          expect(findView.caseOptionButton).toHaveClass('selected');
          expect(findView.regexOptionButton).toHaveClass('selected');
          return expect(findView.selectionOptionButton).toHaveClass('selected');
        });
      });
    });
    describe("finding", function() {
      beforeEach(function() {
        atom.config.set('find-and-replace.focusEditorAfterSearch', false);
        editor.setCursorBufferPosition([2, 0]);
        editorView.trigger('find-and-replace:show');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          findView.findEditor.setText('items');
          return findView.findEditor.trigger('core:confirm');
        });
      });
      describe("when the find string contains an escaped char", function() {
        beforeEach(function() {
          editor.setText("\t\n\\t");
          return editor.setCursorBufferPosition([0, 0]);
        });
        it("finds the escape char", function() {
          findView.findEditor.setText('\\t');
          findView.findEditor.trigger('core:confirm');
          return expect(editor.getSelectedBufferRange()).toEqual([[0, 0], [0, 1]]);
        });
        return it("doesn't insert a escaped char if there are multiple backslashs in front of the char", function() {
          findView.findEditor.setText('\\\\t');
          findView.findEditor.trigger('core:confirm');
          return expect(editor.getSelectedBufferRange()).toEqual([[1, 0], [1, 2]]);
        });
      });
      describe("when focusEditorAfterSearch is set", function() {
        beforeEach(function() {
          atom.config.set('find-and-replace.focusEditorAfterSearch', true);
          return findView.findEditor.trigger('core:confirm');
        });
        return it("selects the first match following the cursor and correctly focuses the editor", function() {
          expect(findView.resultCounter.text()).toEqual('3 of 6');
          expect(editor.getSelectedBufferRange()).toEqual([[2, 34], [2, 39]]);
          return expect(editorView).toHaveFocus();
        });
      });
      it("doesn't change the selection, beeps if there are no matches and keeps focus on the find view", function() {
        editor.setCursorBufferPosition([2, 0]);
        findView.findEditor.setText('notinthefilebro');
        findView.findEditor.focus();
        findView.findEditor.trigger('core:confirm');
        expect(editor.getCursorBufferPosition()).toEqual([2, 0]);
        expect(atom.beep).toHaveBeenCalled();
        expect(findView).toHaveFocus();
        return expect(findView.descriptionLabel.text()).toEqual("No results found for 'notinthefilebro'");
      });
      it("properly handles the info message when there are no results", function() {
        findView.findEditor.setText('item');
        findView.findEditor.trigger('core:confirm');
        expect(findView.descriptionLabel.text()).toEqual("6 results found for 'item'");
        findView.findEditor.setText('notinthefilenope');
        findView.findEditor.trigger('core:confirm');
        expect(findView.descriptionLabel.text()).toEqual("No results found for 'notinthefilenope'");
        findView.findEditor.setText('item');
        findView.findEditor.trigger('core:confirm');
        return expect(findView.descriptionLabel.text()).toEqual("6 results found for 'item'");
      });
      it("selects the first match following the cursor", function() {
        expect(findView.resultCounter.text()).toEqual('2 of 6');
        expect(editor.getSelectedBufferRange()).toEqual([[2, 8], [2, 13]]);
        findView.findEditor.trigger('core:confirm');
        expect(findView.resultCounter.text()).toEqual('3 of 6');
        expect(editor.getSelectedBufferRange()).toEqual([[2, 34], [2, 39]]);
        return expect(findView.findEditor).toHaveFocus();
      });
      it("selects the next match when the next match button is pressed", function() {
        findView.nextButton.click();
        expect(findView.resultCounter.text()).toEqual('3 of 6');
        return expect(editor.getSelectedBufferRange()).toEqual([[2, 34], [2, 39]]);
      });
      it("selects the next match when the 'find-and-replace:find-next' event is triggered and correctly focuses the editor", function() {
        expect(findView).toHaveFocus();
        editorView.trigger('find-and-replace:find-next');
        expect(findView.resultCounter.text()).toEqual('3 of 6');
        expect(editor.getSelectedBufferRange()).toEqual([[2, 34], [2, 39]]);
        return expect(editorView).toHaveFocus();
      });
      it("will re-run search if 'find-and-replace:find-next' is triggered after changing the findEditor's text", function() {
        findView.findEditor.setText('sort');
        findView.findEditor.trigger('find-and-replace:find-next');
        expect(findView.resultCounter.text()).toEqual('3 of 5');
        return expect(editor.getSelectedBufferRange()).toEqual([[8, 11], [8, 15]]);
      });
      it("'find-and-replace:find-next' adds to the findEditor's history", function() {
        findView.findEditor.setText('sort');
        findView.findEditor.trigger('find-and-replace:find-next');
        expect(findView.resultCounter.text()).toEqual('3 of 5');
        findView.findEditor.setText('nope');
        findView.findEditor.trigger('core:move-up');
        return expect(findView.findEditor.getText()).toEqual('sort');
      });
      it("selects the previous match when the previous match button is pressed", function() {
        findView.previousButton.click();
        expect(findView.resultCounter.text()).toEqual('1 of 6');
        return expect(editor.getSelectedBufferRange()).toEqual([[1, 27], [1, 22]]);
      });
      it("selects the previous match when the 'find-and-replace:find-previous' event is triggered and correctly focuses the editor", function() {
        expect(findView).toHaveFocus();
        editorView.trigger('find-and-replace:find-previous');
        expect(findView.resultCounter.text()).toEqual('1 of 6');
        expect(editor.getSelectedBufferRange()).toEqual([[1, 27], [1, 22]]);
        return expect(editorView).toHaveFocus();
      });
      it("will re-run search if 'find-and-replace:find-previous' is triggered after changing the findEditor's text", function() {
        findView.findEditor.setText('sort');
        findView.findEditor.trigger('find-and-replace:find-previous');
        expect(findView.resultCounter.text()).toEqual('2 of 5');
        return expect(editor.getSelectedBufferRange()).toEqual([[1, 6], [1, 10]]);
      });
      it("replaces results counter with number of results found when user moves the cursor", function() {
        editor.moveCursorDown();
        return expect(findView.resultCounter.text()).toBe('6 found');
      });
      it("replaces results counter x of y text when user selects a marked range", function() {
        editor.moveCursorDown();
        editor.setSelectedBufferRange([[2, 34], [2, 39]]);
        return expect(findView.resultCounter.text()).toEqual('3 of 6');
      });
      it("places the selected text into the find editor when find-and-replace:set-find-pattern is triggered", function() {
        editor.setSelectedBufferRange([[1, 6], [1, 10]]);
        atom.workspaceView.trigger('find-and-replace:use-selection-as-find-pattern');
        expect(findView.findEditor.getText()).toBe('sort');
        expect(editor.getSelectedBufferRange()).toEqual([[1, 6], [1, 10]]);
        atom.workspaceView.trigger('find-and-replace:find-next');
        return expect(editor.getSelectedBufferRange()).toEqual([[8, 11], [8, 15]]);
      });
      it("does not highlight the found text when the find view is hidden", function() {
        var findResultsView;
        findView.findEditor.trigger('core:cancel');
        findView.findEditor.trigger('find-and-replace:find-next');
        findResultsView = editorView.find('.search-results');
        return expect(findResultsView.parent()).not.toExist();
      });
      describe("when the active pane item changes", function() {
        describe("when a new edit session is activated", function() {
          it("reruns the search on the new edit session", function() {
            atom.workspaceView.openSync('sample.coffee');
            editor = atom.workspaceView.getActivePaneItem();
            expect(findView.resultCounter.text()).toEqual('7 found');
            return expect(editor.getSelectedBufferRange()).toEqual([[0, 0], [0, 0]]);
          });
          it("initially highlights the found text in the new edit session", function() {
            var findResultsView;
            findResultsView = editorView.find('.search-results');
            atom.workspaceView.openSync('sample.coffee');
            return expect(findResultsView.children()).toHaveLength(7);
          });
          return it("highlights the found text in the new edit session when find next is triggered", function() {
            var findResultsView;
            findResultsView = editorView.find('.search-results');
            atom.workspaceView.openSync('sample.coffee');
            editorView = atom.workspaceView.getActiveView();
            findView.findEditor.trigger('find-and-replace:find-next');
            expect(findResultsView.children()).toHaveLength(7);
            return expect(findResultsView.parent()[0]).toBe(editorView.underlayer[0]);
          });
        });
        describe("when all active pane items are closed", function() {
          it("updates the result count", function() {
            editorView.trigger('core:close');
            return expect(findView.resultCounter.text()).toEqual('no results');
          });
          return it("removes all highlights", function() {
            var findResultsView;
            findResultsView = editorView.find('.search-results');
            editorView.trigger('core:close');
            return expect(findResultsView.children()).toHaveLength(0);
          });
        });
        describe("when the active pane item is not an edit session", function() {
          var anotherOpener;
          anotherOpener = [][0];
          beforeEach(function() {
            anotherOpener = function(pathToOpen, options) {
              return $('another');
            };
            return atom.project.registerOpener(anotherOpener);
          });
          afterEach(function() {
            return atom.project.unregisterOpener(anotherOpener);
          });
          it("updates the result view", function() {
            atom.workspaceView.openSync("another");
            return expect(findView.resultCounter.text()).toEqual('no results');
          });
          return it("removes all highlights", function() {
            var findResultsView;
            findResultsView = editorView.find('.search-results');
            atom.workspaceView.openSync("another");
            return expect(findResultsView.children()).toHaveLength(0);
          });
        });
        return describe("when a new edit session is activated on a different pane", function() {
          it("reruns the search on the new editSession", function() {
            var newEditorView;
            newEditorView = editorView.getPane().splitRight(atom.project.openSync('sample.coffee')).activeView;
            expect(findView.resultCounter.text()).toEqual('7 found');
            expect(newEditorView.getEditor().getSelectedBufferRange()).toEqual([[0, 0], [0, 0]]);
            findView.findEditor.trigger('find-and-replace:find-next');
            expect(findView.resultCounter.text()).toEqual('1 of 7');
            return expect(newEditorView.getEditor().getSelectedBufferRange()).toEqual([[1, 9], [1, 14]]);
          });
          return it("highlights the found text in the new edit session (and removes the highlights from the other)", function() {
            var findResultsView;
            findResultsView = editorView.find('.search-results');
            expect(findResultsView.children()).toHaveLength(6);
            editorView.getPane().splitRight(atom.project.openSync('sample.coffee'));
            return expect(findResultsView.children()).toHaveLength(7);
          });
        });
      });
      describe("when the buffer contents change", function() {
        it("re-runs the search", function() {
          var findResultsView;
          findResultsView = editorView.find('.search-results');
          editor.setSelectedBufferRange([[1, 26], [1, 27]]);
          editor.insertText("");
          window.advanceClock(1000);
          expect(findResultsView.children()).toHaveLength(5);
          expect(findView.resultCounter.text()).toEqual('5 found');
          editor.insertText("s");
          window.advanceClock(1000);
          expect(findResultsView.children()).toHaveLength(6);
          return expect(findView.resultCounter.text()).toEqual('6 found');
        });
        return it("does not beep if no matches were found", function() {
          editor.setCursorBufferPosition([2, 0]);
          findView.findEditor.setText('notinthefilebro');
          findView.findEditor.trigger('core:confirm');
          atom.beep.reset();
          editor.insertText("blah blah");
          return expect(atom.beep).not.toHaveBeenCalled();
        });
      });
      describe("when finding within a selection", function() {
        beforeEach(function() {
          return editor.setSelectedBufferRange([[2, 0], [4, 0]]);
        });
        it("toggles find within a selction via and event and only finds matches within the selection", function() {
          findView.findEditor.setText('items');
          findView.findEditor.trigger('find-and-replace:toggle-selection-option');
          expect(editor.getSelectedBufferRange()).toEqual([[2, 8], [2, 13]]);
          return expect(findView.resultCounter.text()).toEqual('1 of 3');
        });
        return it("toggles find within a selction via and button and only finds matches within the selection", function() {
          findView.findEditor.setText('items');
          findView.selectionOptionButton.click();
          expect(editor.getSelectedBufferRange()).toEqual([[2, 8], [2, 13]]);
          return expect(findView.resultCounter.text()).toEqual('1 of 3');
        });
      });
      describe("when regex is toggled", function() {
        it("toggles regex via an event and finds text matching the pattern", function() {
          editor.setCursorBufferPosition([2, 0]);
          findView.findEditor.trigger('find-and-replace:toggle-regex-option');
          findView.findEditor.setText('i[t]em+s');
          return expect(editor.getSelectedBufferRange()).toEqual([[2, 8], [2, 13]]);
        });
        it("toggles regex via a button and finds text matching the pattern", function() {
          editor.setCursorBufferPosition([2, 0]);
          findView.regexOptionButton.click();
          findView.findEditor.setText('i[t]em+s');
          return expect(editor.getSelectedBufferRange()).toEqual([[2, 8], [2, 13]]);
        });
        it("re-runs the search using the new find text when toggled", function() {
          editor.setCursorBufferPosition([1, 0]);
          findView.findEditor.setText('s(o)rt');
          findView.findEditor.trigger('find-and-replace:toggle-regex-option');
          return expect(editor.getSelectedBufferRange()).toEqual([[1, 6], [1, 10]]);
        });
        return describe("when an invalid regex is entered", function() {
          return it("displays an error", function() {
            editor.setCursorBufferPosition([2, 0]);
            findView.findEditor.trigger('find-and-replace:toggle-regex-option');
            findView.findEditor.setText('i[t');
            findView.findEditor.trigger('core:confirm');
            return expect(findView.errorMessages.children()).toHaveLength(1);
          });
        });
      });
      describe("when case sensitivity is toggled", function() {
        beforeEach(function() {
          editor.setText("-----\nwords\nWORDs\n");
          return editor.setCursorBufferPosition([0, 0]);
        });
        it("toggles case sensitivity via an event and finds text matching the pattern", function() {
          findView.findEditor.setText('WORDs');
          findView.findEditor.trigger('core:confirm');
          expect(editor.getSelectedBufferRange()).toEqual([[1, 0], [1, 5]]);
          editor.setCursorBufferPosition([0, 0]);
          findView.findEditor.trigger('find-and-replace:toggle-case-option');
          return expect(editor.getSelectedBufferRange()).toEqual([[2, 0], [2, 5]]);
        });
        return it("toggles case sensitivity via a button and finds text matching the pattern", function() {
          findView.findEditor.setText('WORDs');
          findView.findEditor.trigger('core:confirm');
          expect(editor.getSelectedBufferRange()).toEqual([[1, 0], [1, 5]]);
          editor.setCursorBufferPosition([0, 0]);
          findView.caseOptionButton.click();
          return expect(editor.getSelectedBufferRange()).toEqual([[2, 0], [2, 5]]);
        });
      });
      describe("highlighting search results", function() {
        var findResultsView;
        findResultsView = [][0];
        beforeEach(function() {
          return findResultsView = editorView.find('.search-results');
        });
        return it("only highlights matches", function() {
          expect(findResultsView.parent()[0]).toBe(editorView.underlayer[0]);
          expect(findResultsView.children()).toHaveLength(6);
          findView.findEditor.setText('notinthefilebro');
          findView.findEditor.trigger('core:confirm');
          return expect(findResultsView.children()).toHaveLength(0);
        });
      });
      describe("when user types in the find editor", function() {
        var advance;
        advance = function() {
          return advanceClock(findView.findEditor.getEditor().getBuffer().stoppedChangingDelay + 1);
        };
        beforeEach(function() {
          return findView.findEditor.focus();
        });
        return it("updates the search results", function() {
          expect(findView.descriptionLabel.text()).toContain("6 results");
          findView.findEditor.setText('why do I need these 2 lines? The editor does not trigger contents-modified without them');
          advance();
          findView.findEditor.setText('');
          advance();
          expect(findView.descriptionLabel.text()).toContain("No results");
          expect(findView).toHaveFocus();
          findView.findEditor.setText('sort');
          advance();
          expect(findView.descriptionLabel.text()).toContain("5 results");
          expect(findView).toHaveFocus();
          findView.findEditor.setText('items');
          advance();
          expect(findView.descriptionLabel.text()).toContain("6 results");
          return expect(findView).toHaveFocus();
        });
      });
      return describe("when another find is called", function() {
        var previousMarkers;
        previousMarkers = null;
        beforeEach(function() {
          return previousMarkers = _.clone(editor.getMarkers());
        });
        it("clears existing markers for another search", function() {
          findView.findEditor.setText('notinthefile');
          findView.findEditor.trigger('core:confirm');
          return expect(editor.getMarkers().length).toEqual(1);
        });
        return it("clears existing markers for an empty search", function() {
          findView.findEditor.setText('');
          findView.findEditor.trigger('core:confirm');
          return expect(editor.getMarkers().length).toEqual(1);
        });
      });
    });
    describe("replacing", function() {
      beforeEach(function() {
        editor.setCursorBufferPosition([2, 0]);
        editorView.trigger('find-and-replace:show-replace');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          findView.findEditor.setText('items');
          return findView.replaceEditor.setText('cats');
        });
      });
      describe("when the replacement string contains an escaped char", function() {
        it("inserts tabs and newlines", function() {
          findView.replaceEditor.setText('\\t\\n');
          findView.replaceEditor.trigger('core:confirm');
          return expect(editor.getText()).toMatch(/\t\n/);
        });
        it("inserts carriage returns", function() {
          var textWithCarriageReturns;
          textWithCarriageReturns = editor.getText().replace(/\n/g, "\r");
          editor.setText(textWithCarriageReturns);
          findView.replaceEditor.setText('\\t\\r');
          findView.replaceEditor.trigger('core:confirm');
          return expect(editor.getText()).toMatch(/\t\r/);
        });
        return it("doesn't insert a escaped char if there are multiple backslashs in front of the char", function() {
          findView.replaceEditor.setText('\\\\t\\\t');
          findView.replaceEditor.trigger('core:confirm');
          return expect(editor.getText()).toMatch(/\\t\\\t/);
        });
      });
      describe("replace next", function() {
        describe("when core:confirm is triggered", function() {
          it("replaces the match after the cursor and selects the next match", function() {
            findView.replaceEditor.trigger('core:confirm');
            expect(findView.resultCounter.text()).toEqual('2 of 5');
            expect(editor.lineForBufferRow(2)).toBe("    if (cats.length <= 1) return items;");
            return expect(editor.getSelectedBufferRange()).toEqual([[2, 33], [2, 38]]);
          });
          return it("replaces the _current_ match and selects the next match", function() {
            findView.findEditor.trigger('core:confirm');
            editor.setSelectedBufferRange([[2, 8], [2, 13]]);
            expect(findView.resultCounter.text()).toEqual('2 of 6');
            findView.replaceEditor.trigger('core:confirm');
            expect(findView.resultCounter.text()).toEqual('2 of 5');
            expect(editor.lineForBufferRow(2)).toBe("    if (cats.length <= 1) return items;");
            expect(editor.getSelectedBufferRange()).toEqual([[2, 33], [2, 38]]);
            findView.replaceEditor.trigger('core:confirm');
            expect(findView.resultCounter.text()).toEqual('2 of 4');
            expect(editor.lineForBufferRow(2)).toBe("    if (cats.length <= 1) return cats;");
            return expect(editor.getSelectedBufferRange()).toEqual([[3, 16], [3, 21]]);
          });
        });
        describe("when the replace next button is pressed", function() {
          return it("replaces the match after the cursor and selects the next match", function() {
            $('.find-and-replace .btn-next').click();
            expect(findView.resultCounter.text()).toEqual('2 of 5');
            expect(editor.lineForBufferRow(2)).toBe("    if (cats.length <= 1) return items;");
            return expect(editor.getSelectedBufferRange()).toEqual([[2, 33], [2, 38]]);
          });
        });
        return describe("when the 'find-and-replace:replace-next' event is triggered", function() {
          return it("replaces the match after the cursor and selects the next match", function() {
            editorView.trigger('find-and-replace:replace-next');
            expect(findView.resultCounter.text()).toEqual('2 of 5');
            expect(editor.lineForBufferRow(2)).toBe("    if (cats.length <= 1) return items;");
            return expect(editor.getSelectedBufferRange()).toEqual([[2, 33], [2, 38]]);
          });
        });
      });
      describe("replace previous", function() {
        describe("when button is clicked", function() {
          return it("replaces the match after the cursor and selects the previous match", function() {
            findView.findEditor.trigger('core:confirm');
            findView.replacePreviousButton.click();
            expect(findView.resultCounter.text()).toEqual('1 of 5');
            expect(editor.lineForBufferRow(2)).toBe("    if (cats.length <= 1) return items;");
            return expect(editor.getSelectedBufferRange()).toEqual([[1, 22], [1, 27]]);
          });
        });
        return describe("when command is triggered", function() {
          return it("replaces the match after the cursor and selects the previous match", function() {
            findView.findEditor.trigger('core:confirm');
            findView.trigger('find-and-replace:replace-previous');
            expect(findView.resultCounter.text()).toEqual('1 of 5');
            expect(editor.lineForBufferRow(2)).toBe("    if (cats.length <= 1) return items;");
            return expect(editor.getSelectedBufferRange()).toEqual([[1, 22], [1, 27]]);
          });
        });
      });
      describe("replace all", function() {
        describe("when the replace all button is pressed", function() {
          it("replaces all matched text", function() {
            $('.find-and-replace .btn-all').click();
            expect(findView.resultCounter.text()).toEqual('no results');
            expect(editor.getText()).not.toMatch(/items/);
            expect(editor.getText().match(/\bcats\b/g)).toHaveLength(6);
            return expect(editor.getSelectedBufferRange()).toEqual([[2, 0], [2, 0]]);
          });
          return it("all changes are undoable in one transaction", function() {
            $('.find-and-replace .btn-all').click();
            editor.undo();
            return expect(editor.getText()).not.toMatch(/\bcats\b/g);
          });
        });
        return describe("when the 'find-and-replace:replace-all' event is triggered", function() {
          return it("replaces all matched text", function() {
            editorView.trigger('find-and-replace:replace-all');
            expect(findView.resultCounter.text()).toEqual('no results');
            expect(editor.getText()).not.toMatch(/items/);
            expect(editor.getText().match(/\bcats\b/g)).toHaveLength(6);
            return expect(editor.getSelectedBufferRange()).toEqual([[2, 0], [2, 0]]);
          });
        });
      });
      return describe("replacement patterns", function() {
        describe("when the regex option is true", function() {
          return it("replaces $1, $2, etc... with substring matches", function() {
            findView.findEditor.trigger('find-and-replace:toggle-regex-option');
            findView.findEditor.setText('(items)([\\.;])');
            findView.replaceEditor.setText('$2$1');
            editorView.trigger('find-and-replace:replace-all');
            expect(editor.getText()).toMatch(/;items/);
            return expect(editor.getText()).toMatch(/\.items/);
          });
        });
        return describe("when the regex option is false", function() {
          return it("replaces the matches with without any regex subsitions", function() {
            findView.findEditor.setText('items');
            findView.replaceEditor.setText('$&cats');
            editorView.trigger('find-and-replace:replace-all');
            expect(editor.getText()).not.toMatch(/items/);
            return expect(editor.getText().match(/\$&cats\b/g)).toHaveLength(6);
          });
        });
      });
    });
    return describe("history", function() {
      beforeEach(function() {
        editorView.trigger('find-and-replace:show');
        return waitsForPromise(function() {
          return activationPromise;
        });
      });
      describe("when there is no history", function() {
        return it("retains unsearched text", function() {
          var text;
          text = 'something I want to search for but havent yet';
          findView.findEditor.setText(text);
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('');
          findView.findEditor.trigger('core:move-down');
          return expect(findView.findEditor.getText()).toEqual(text);
        });
      });
      return describe("when there is history", function() {
        var oneRange, threeRange, twoRange, _ref2;
        _ref2 = [], oneRange = _ref2[0], twoRange = _ref2[1], threeRange = _ref2[2];
        beforeEach(function() {
          editorView.trigger('find-and-replace:show');
          editor.setText("zero\none\ntwo\nthree\n");
          findView.findEditor.setText('one');
          findView.findEditor.trigger('core:confirm');
          findView.findEditor.setText('two');
          findView.findEditor.trigger('core:confirm');
          findView.findEditor.setText('three');
          return findView.findEditor.trigger('core:confirm');
        });
        it("can navigate the entire history stack", function() {
          expect(findView.findEditor.getText()).toEqual('three');
          findView.findEditor.trigger('core:move-down');
          expect(findView.findEditor.getText()).toEqual('');
          findView.findEditor.trigger('core:move-down');
          expect(findView.findEditor.getText()).toEqual('');
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('three');
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('two');
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('one');
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('one');
          findView.findEditor.trigger('core:move-down');
          return expect(findView.findEditor.getText()).toEqual('two');
        });
        it("retains the current unsearched text", function() {
          var text;
          text = 'something I want to search for but havent yet';
          findView.findEditor.setText(text);
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('three');
          findView.findEditor.trigger('core:move-down');
          expect(findView.findEditor.getText()).toEqual(text);
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('three');
          findView.findEditor.trigger('core:move-down');
          findView.findEditor.trigger('core:confirm');
          findView.findEditor.trigger('core:move-down');
          return expect(findView.findEditor.getText()).toEqual('');
        });
        it("adds confirmed patterns to the history", function() {
          findView.findEditor.setText("cool stuff");
          findView.findEditor.trigger('core:confirm');
          findView.findEditor.setText("cooler stuff");
          findView.findEditor.trigger('core:move-up');
          expect(findView.findEditor.getText()).toEqual('cool stuff');
          findView.findEditor.trigger('core:move-up');
          return expect(findView.findEditor.getText()).toEqual('three');
        });
        return describe("when user types in the find editor", function() {
          var advance;
          advance = function() {
            return advanceClock(findView.findEditor.getEditor().getBuffer().stoppedChangingDelay + 1);
          };
          beforeEach(function() {
            return findView.findEditor.focus();
          });
          return it("does not add live searches to the history", function() {
            expect(findView.descriptionLabel.text()).toContain("1 result");
            findView.findEditor.setText('FIXME: necessary first search for some reason');
            advance();
            findView.findEditor.setText('nope');
            advance();
            expect(findView.descriptionLabel.text()).toContain('nope');
            findView.findEditor.setText('zero');
            advance();
            expect(findView.descriptionLabel.text()).toContain("zero");
            findView.findEditor.trigger('core:move-up');
            return expect(findView.findEditor.getText()).toEqual('three');
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/spec/find-view-spec.js.map
