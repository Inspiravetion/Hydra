(function() {
  var SelectNext, WorkspaceView, path;

  path = require('path');

  WorkspaceView = require('atom').WorkspaceView;

  SelectNext = require('../lib/select-next');

  describe("SelectNext", function() {
    var editor, editorView, _ref;
    _ref = [], editorView = _ref[0], editor = _ref[1];
    beforeEach(function() {
      var promise;
      atom.workspaceView = new WorkspaceView();
      atom.project.setPath(path.join(__dirname, 'fixtures'));
      atom.workspaceView.openSync('sample.js');
      atom.workspaceView.attachToDom();
      editorView = atom.workspaceView.getActiveView();
      editor = editorView.getEditor();
      promise = atom.packages.activatePackage("find-and-replace");
      editorView.trigger('find-and-replace:show');
      return waitsForPromise(function() {
        return promise;
      });
    });
    describe("find-and-replace:select-next", function() {
      describe("when nothing is selected", function() {
        return it("selects the word under the cursor", function() {
          editor.setCursorBufferPosition([1, 3]);
          editorView.trigger('find-and-replace:select-next');
          return expect(editor.getSelectedBufferRanges()).toEqual([[[1, 2], [1, 5]]]);
        });
      });
      describe("when a word is selected", function() {
        return it("selects the next occurrence of the selected word skipping any non-word matches", function() {
          editor.setText("for\ninformation\nformat\nanother for\nfork\na 3rd for is here");
          editor.setSelectedBufferRange([[0, 0], [0, 3]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 3]], [[3, 8], [3, 11]]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 3]], [[3, 8], [3, 11]], [[5, 6], [5, 9]]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 3]], [[3, 8], [3, 11]], [[5, 6], [5, 9]]]);
          editor.setText("Testing reallyTesting");
          editor.setCursorBufferPosition([0, 0]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 7]]]);
          editorView.trigger('find-and-replace:select-next');
          return expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 7]]]);
        });
      });
      describe("when part of a word is selected", function() {
        return it("selects the next occurrence of the selected text", function() {
          editor.setText("for\ninformation\nformat\nanother for\nfork\na 3rd for is here");
          editor.setSelectedBufferRange([[1, 2], [1, 5]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[1, 2], [1, 5]], [[2, 0], [2, 3]]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[1, 2], [1, 5]], [[2, 0], [2, 3]], [[3, 8], [3, 11]]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[1, 2], [1, 5]], [[2, 0], [2, 3]], [[3, 8], [3, 11]], [[4, 0], [4, 3]]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[1, 2], [1, 5]], [[2, 0], [2, 3]], [[3, 8], [3, 11]], [[4, 0], [4, 3]], [[5, 6], [5, 9]]]);
          editorView.trigger('find-and-replace:select-next');
          return expect(editor.getSelectedBufferRanges()).toEqual([[[1, 2], [1, 5]], [[2, 0], [2, 3]], [[3, 8], [3, 11]], [[4, 0], [4, 3]], [[5, 6], [5, 9]]]);
        });
      });
      return describe("when the word is at a line boundary", function() {
        return it("does not select the newlines", function() {
          editor.setText("a\n\na");
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 1]]]);
          editorView.trigger('find-and-replace:select-next');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 1]], [[2, 0], [2, 1]]]);
          editorView.trigger('find-and-replace:select-next');
          return expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 1]], [[2, 0], [2, 1]]]);
        });
      });
    });
    return describe("find-and-replace:select-all", function() {
      describe("when there is no selection", function() {
        return it("find and selects all occurrences", function() {
          editor.setText("for\ninformation\nformat\nanother for\nfork\na 3rd for is here");
          editorView.trigger('find-and-replace:select-all');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 3]], [[3, 8], [3, 11]], [[5, 6], [5, 9]]]);
          editorView.trigger('find-and-replace:select-all');
          return expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 3]], [[3, 8], [3, 11]], [[5, 6], [5, 9]]]);
        });
      });
      return describe("when a word is selected", function() {
        return it("find and selects all occurrences", function() {
          editor.setText("for\ninformation\nformat\nanother for\nfork\na 3rd for is here");
          editor.setSelectedBufferRange([[3, 8], [3, 11]]);
          editorView.trigger('find-and-replace:select-all');
          expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 3]], [[3, 8], [3, 11]], [[5, 6], [5, 9]]]);
          editorView.trigger('find-and-replace:select-all');
          return expect(editor.getSelectedBufferRanges()).toEqual([[[0, 0], [0, 3]], [[3, 8], [3, 11]], [[5, 6], [5, 9]]]);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/spec/select-next-spec.js.map
