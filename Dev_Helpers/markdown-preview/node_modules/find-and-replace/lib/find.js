(function() {
  var $, FindModel, FindView, ProjectFindView, ResultsModel, ResultsPaneView, SelectNext;

  $ = require('atom').$;

  SelectNext = require('./select-next');

  FindModel = require('./find-model');

  FindView = require('./find-view');

  ProjectFindView = require('./project-find-view');

  ResultsModel = require('./project/results-model');

  ResultsPaneView = require('./project/results-pane');

  module.exports = {
    configDefaults: {
      focusEditorAfterSearch: false,
      openProjectFindResultsInRightPane: false
    },
    activate: function(_arg) {
      var _ref;
      _ref = _arg != null ? _arg : {}, this.viewState = _ref.viewState, this.projectViewState = _ref.projectViewState, this.resultsModelState = _ref.resultsModelState;
      atom.project.registerOpener((function(_this) {
        return function(filePath) {
          if (filePath === ResultsPaneView.URI) {
            return new ResultsPaneView();
          }
        };
      })(this));
      atom.workspaceView.command('project-find:show', (function(_this) {
        return function() {
          var _ref1;
          _this.createProjectFindView();
          if ((_ref1 = _this.findView) != null) {
            _ref1.detach();
          }
          return _this.projectFindView.attach();
        };
      })(this));
      atom.workspaceView.command('project-find:show-in-current-directory', (function(_this) {
        return function(e) {
          var _ref1;
          _this.createProjectFindView();
          if ((_ref1 = _this.findView) != null) {
            _ref1.detach();
          }
          _this.projectFindView.attach();
          return _this.projectFindView.findInCurrentlySelectedDirectory($(e.target));
        };
      })(this));
      atom.workspaceView.command('find-and-replace:use-selection-as-find-pattern', (function(_this) {
        return function() {
          var _ref1, _ref2, _ref3;
          if (((_ref1 = _this.projectFindView) != null ? _ref1.isOnDom() : void 0) || ((_ref2 = _this.findView) != null ? _ref2.isOnDom() : void 0)) {
            return;
          }
          _this.createFindView();
          if ((_ref3 = _this.projectFindView) != null) {
            _ref3.detach();
          }
          return _this.findView.showFind();
        };
      })(this));
      atom.workspaceView.command('find-and-replace:show', (function(_this) {
        return function() {
          var _ref1;
          _this.createFindView();
          if ((_ref1 = _this.projectFindView) != null) {
            _ref1.detach();
          }
          return _this.findView.showFind();
        };
      })(this));
      atom.workspaceView.command('find-and-replace:show-replace', (function(_this) {
        return function() {
          var _ref1;
          _this.createFindView();
          if ((_ref1 = _this.projectFindView) != null) {
            _ref1.detach();
          }
          return _this.findView.showReplace();
        };
      })(this));
      atom.workspaceView.on('core:cancel core:close', (function(_this) {
        return function(event) {
          var editor, target, _ref1, _ref2;
          target = $(event.target);
          editor = target.parents('.editor:not(.mini)');
          if (!editor.length) {
            return;
          }
          if ((_ref1 = _this.findView) != null) {
            _ref1.detach();
          }
          return (_ref2 = _this.projectFindView) != null ? _ref2.detach() : void 0;
        };
      })(this));
      return atom.workspaceView.eachEditorView(function(editorView) {
        var selectNext;
        selectNext = new SelectNext(editorView.editor);
        editorView.command('find-and-replace:select-next', function() {
          return selectNext.findAndSelectNext();
        });
        return editorView.command('find-and-replace:select-all', function() {
          return selectNext.findAndSelectAll();
        });
      });
    },
    createProjectFindView: function() {
      if (this.resultsModel == null) {
        this.resultsModel = new ResultsModel(this.resultsModelState);
      }
      if (this.projectFindView == null) {
        this.projectFindView = new ProjectFindView(this.resultsModel, this.projectViewState);
      }
      return ResultsPaneView.model = this.resultsModel;
    },
    createFindView: function() {
      return this.findView != null ? this.findView : this.findView = new FindView(this.viewState);
    },
    deactivate: function() {
      var _ref, _ref1;
      if ((_ref = this.findView) != null) {
        _ref.remove();
      }
      this.findView = null;
      if ((_ref1 = this.projectFindView) != null) {
        _ref1.remove();
      }
      this.projectFindView = null;
      ResultsPaneView.model = null;
      this.resultsModel = null;
      atom.workspaceView.off('project-find:show');
      atom.workspaceView.off('core:cancel core:close');
      atom.workspaceView.off('find-and-replace:show-replace');
      atom.workspaceView.off('find-and-replace:show');
      atom.workspaceView.off('find-and-replace:use-selection-as-find-pattern');
      return atom.workspaceView.off('project-find:show-in-current-directory');
    },
    serialize: function() {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      return {
        viewState: (_ref = (_ref1 = this.findView) != null ? _ref1.serialize() : void 0) != null ? _ref : this.viewState,
        projectViewState: (_ref2 = (_ref3 = this.projectFindView) != null ? _ref3.serialize() : void 0) != null ? _ref2 : this.projectViewState,
        resultsModelState: (_ref4 = (_ref5 = this.resultsModel) != null ? _ref5.serialize() : void 0) != null ? _ref4 : this.resultsModelState
      };
    }
  };

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/lib/find.js.map
