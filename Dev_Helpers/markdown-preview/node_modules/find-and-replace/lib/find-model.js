(function() {
  var Emitter, FindModel, escapeHelper, _;

  _ = require('underscore-plus');

  Emitter = require('emissary').Emitter;

  escapeHelper = require('./escape-helper');

  module.exports = FindModel = (function() {
    Emitter.includeInto(FindModel);

    FindModel.markerClass = 'find-result';

    function FindModel(state) {
      var _ref, _ref1, _ref2;
      if (state == null) {
        state = {};
      }
      this.pattern = '';
      this.useRegex = (_ref = state.useRegex) != null ? _ref : false;
      this.inCurrentSelection = (_ref1 = state.inCurrentSelection) != null ? _ref1 : false;
      this.caseSensitive = (_ref2 = state.caseSensitive) != null ? _ref2 : false;
      this.valid = false;
      this.activePaneItemChanged();
      atom.workspaceView.on('pane-container:active-pane-item-changed', (function(_this) {
        return function() {
          return _this.activePaneItemChanged();
        };
      })(this));
    }

    FindModel.prototype.activePaneItemChanged = function() {
      var paneItem, _ref;
      if ((_ref = this.editSession) != null) {
        _ref.getBuffer().off(".find");
      }
      this.editSession = null;
      paneItem = atom.workspaceView.getActivePaneItem();
      this.destroyAllMarkers();
      if ((paneItem != null ? typeof paneItem.getBuffer === "function" ? paneItem.getBuffer() : void 0 : void 0) != null) {
        this.editSession = paneItem;
        this.editSession.getBuffer().on("contents-modified.find", (function(_this) {
          return function(args) {
            if (!_this.replacing) {
              return _this.updateMarkers();
            }
          };
        })(this));
        return this.updateMarkers();
      }
    };

    FindModel.prototype.serialize = function() {
      return {
        useRegex: this.useRegex,
        inCurrentSelection: this.inCurrentSelection,
        caseSensitive: this.caseSensitive
      };
    };

    FindModel.prototype.update = function(newParams) {
      var currentParams;
      if (newParams == null) {
        newParams = {};
      }
      currentParams = {
        pattern: this.pattern,
        useRegex: this.useRegex,
        inCurrentSelection: this.inCurrentSelection,
        caseSensitive: this.caseSensitive
      };
      _.defaults(newParams, currentParams);
      if (!(this.valid && _.isEqual(newParams, currentParams))) {
        _.extend(this, newParams);
        return this.updateMarkers();
      }
    };

    FindModel.prototype.replace = function(markers, replacementPattern) {
      if (!((markers != null ? markers.length : void 0) > 0)) {
        return;
      }
      replacementPattern = escapeHelper.unescapeEscapeSequence(replacementPattern);
      this.replacing = true;
      this.editSession.transact((function(_this) {
        return function() {
          var bufferRange, marker, replacementText, textToReplace, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = markers.length; _i < _len; _i++) {
            marker = markers[_i];
            bufferRange = marker.getBufferRange();
            replacementText = null;
            if (_this.useRegex) {
              textToReplace = _this.editSession.getTextInBufferRange(bufferRange);
              replacementText = textToReplace.replace(_this.getRegex(), replacementPattern);
            }
            _this.editSession.setTextInBufferRange(bufferRange, replacementText != null ? replacementText : replacementPattern);
            marker.destroy();
            _results.push(_this.markers.splice(_this.markers.indexOf(marker), 1));
          }
          return _results;
        };
      })(this));
      this.replacing = false;
      return this.emit('updated', _.clone(this.markers));
    };

    FindModel.prototype.updateMarkers = function() {
      var bufferRange, e, id, marker, markersToRemoveById, updatedMarkers, _i, _len, _ref;
      if ((this.editSession == null) || !this.pattern) {
        this.destroyAllMarkers();
        return;
      }
      this.valid = true;
      if (this.inCurrentSelection) {
        bufferRange = this.editSession.getSelectedBufferRange();
      } else {
        bufferRange = [[0, 0], [Infinity, Infinity]];
      }
      updatedMarkers = [];
      markersToRemoveById = {};
      _ref = this.markers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        markersToRemoveById[marker.id] = marker;
      }
      try {
        this.editSession.scanInBufferRange(this.getRegex(), bufferRange, (function(_this) {
          return function(_arg) {
            var range;
            range = _arg.range;
            if (marker = _this.findMarker(range)) {
              delete markersToRemoveById[marker.id];
            } else {
              marker = _this.createMarker(range);
            }
            return updatedMarkers.push(marker);
          };
        })(this));
        for (id in markersToRemoveById) {
          marker = markersToRemoveById[id];
          marker.destroy();
        }
        this.markers = updatedMarkers;
        return this.emit('updated', _.clone(this.markers));
      } catch (_error) {
        e = _error;
        this.destroyAllMarkers();
        throw e;
      }
    };

    FindModel.prototype.findMarker = function(range) {
      var attributes;
      attributes = {
        "class": this.constructor.markerClass,
        startPosition: range.start,
        endPosition: range.end
      };
      return _.find(this.editSession.findMarkers(attributes), function(marker) {
        return marker.isValid();
      });
    };

    FindModel.prototype.createMarker = function(range) {
      var markerAttributes;
      markerAttributes = {
        "class": this.constructor.markerClass,
        invalidation: 'inside',
        replicate: false,
        persist: false,
        isCurrent: false
      };
      return this.editSession.markBufferRange(range, markerAttributes);
    };

    FindModel.prototype.destroyAllMarkers = function() {
      var marker, _i, _len, _ref, _ref1;
      this.valid = false;
      _ref1 = (_ref = this.markers) != null ? _ref : [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        marker = _ref1[_i];
        marker.destroy();
      }
      this.markers = [];
      return this.emit('updated', _.clone(this.markers));
    };

    FindModel.prototype.getEditSession = function() {
      return this.editSession;
    };

    FindModel.prototype.getRegex = function() {
      var flags, pattern;
      flags = 'g';
      if (!this.caseSensitive) {
        flags += 'i';
      }
      pattern = escapeHelper.unescapeEscapeSequence(this.pattern);
      if (this.useRegex) {
        return new RegExp(pattern, flags);
      } else {
        return new RegExp(_.escapeRegExp(pattern), flags);
      }
    };

    return FindModel;

  })();

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/lib/find-model.js.map
