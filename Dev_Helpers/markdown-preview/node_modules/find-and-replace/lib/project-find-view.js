(function() {
  var $, $$$, EditorView, History, ProjectFindView, Q, ResultsModel, ResultsPaneView, Util, View, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Q = require('q');

  _ = require('underscore-plus');

  _ref = require('atom'), $ = _ref.$, $$$ = _ref.$$$, EditorView = _ref.EditorView, View = _ref.View;

  History = require('./history');

  Util = require('./project/util');

  ResultsModel = require('./project/results-model');

  ResultsPaneView = require('./project/results-pane');

  module.exports = ProjectFindView = (function(_super) {
    __extends(ProjectFindView, _super);

    function ProjectFindView() {
      this.setSelectionAsFindPattern = __bind(this.setSelectionAsFindPattern, this);
      this.generateResultsMessage = __bind(this.generateResultsMessage, this);
      return ProjectFindView.__super__.constructor.apply(this, arguments);
    }

    ProjectFindView.content = function() {
      return this.div({
        tabIndex: -1,
        "class": 'project-find tool-panel panel-bottom padded'
      }, (function(_this) {
        return function() {
          _this.div({
            "class": 'block'
          }, function() {
            _this.span({
              outlet: 'descriptionLabel',
              "class": 'description'
            });
            return _this.span({
              "class": 'options-label pull-right'
            }, function() {
              _this.span('Finding with Options: ');
              return _this.span({
                outlet: 'optionsLabel',
                "class": 'options'
              });
            });
          });
          _this.ul({
            outlet: 'errorMessages',
            "class": 'error-messages block'
          });
          _this.div({
            outlet: 'replacmentInfoBlock',
            "class": 'block'
          }, function() {
            _this.progress({
              outlet: 'replacementProgress',
              "class": 'inline-block'
            });
            return _this.span({
              outlet: 'replacmentInfo',
              "class": 'inline-block'
            }, 'Replaced 2 files of 10 files');
          });
          _this.div({
            "class": 'find-container block'
          }, function() {
            _this.div({
              "class": 'editor-container'
            }, function() {
              return _this.subview('findEditor', new EditorView({
                mini: true,
                placeholderText: 'Find in project'
              }));
            });
            return _this.div({
              "class": 'btn-group btn-toggle btn-group-options'
            }, function() {
              _this.button({
                outlet: 'regexOptionButton',
                "class": 'btn option-regex'
              }, '.*');
              return _this.button({
                outlet: 'caseOptionButton',
                "class": 'btn option-case-sensitive'
              }, 'Aa');
            });
          });
          _this.div({
            "class": 'replace-container block'
          }, function() {
            _this.div({
              "class": 'editor-container'
            }, function() {
              return _this.subview('replaceEditor', new EditorView({
                mini: true,
                placeholderText: 'Replace in project'
              }));
            });
            return _this.div({
              "class": 'btn-group btn-group-replace-all'
            }, function() {
              return _this.button({
                outlet: 'replaceAllButton',
                "class": 'btn'
              }, 'Replace All');
            });
          });
          return _this.div({
            "class": 'paths-container block'
          }, function() {
            return _this.div({
              "class": 'editor-container'
            }, function() {
              return _this.subview('pathsEditor', new EditorView({
                mini: true,
                placeholderText: 'File/directory pattern. eg. `src` to search in the "src" directory or `*.js` to search all javascript files.'
              }));
            });
          });
        };
      })(this));
    };

    ProjectFindView.prototype.initialize = function(model, _arg) {
      var findHistory, modelState, pathsHistory, replaceHistory, _ref1;
      this.model = model;
      _ref1 = _arg != null ? _arg : {}, modelState = _ref1.modelState, findHistory = _ref1.findHistory, replaceHistory = _ref1.replaceHistory, pathsHistory = _ref1.pathsHistory;
      this.handleEvents();
      this.findHistory = new History(this.findEditor, findHistory);
      this.replaceHistory = new History(this.replaceEditor, replaceHistory);
      this.pathsHistory = new History(this.pathsEditor, pathsHistory);
      if (this.model.useRegex) {
        this.regexOptionButton.addClass('selected');
      }
      if (this.model.caseSensitive) {
        this.caseOptionButton.addClass('selected');
      }
      this.clearMessages();
      return this.updateOptionsLabel();
    };

    ProjectFindView.prototype.afterAttach = function() {
      if (!this.tooltipsInitialized) {
        this.regexOptionButton.setTooltip("Use Regex", {
          command: 'project-find:toggle-regex-option',
          commandElement: this.findEditor
        });
        this.caseOptionButton.setTooltip("Match Case", {
          command: 'project-find:toggle-case-option',
          commandElement: this.findEditor
        });
        this.replaceAllButton.setTooltip("Replace All", {
          command: 'project-find:replace-all',
          commandElement: this.replaceEditor
        });
        return this.tooltipsInitialized = true;
      }
    };

    ProjectFindView.prototype.hideAllTooltips = function() {
      this.regexOptionButton.hideTooltip();
      this.caseOptionButton.hideTooltip();
      return this.replaceAllButton.hideTooltip();
    };

    ProjectFindView.prototype.serialize = function() {
      return {
        findHistory: this.findHistory.serialize(),
        replaceHistory: this.replaceHistory.serialize(),
        pathsHistory: this.pathsHistory.serialize(),
        modelState: this.model.serialize()
      };
    };

    ProjectFindView.prototype.handleEvents = function() {
      this.on('core:confirm', (function(_this) {
        return function() {
          return _this.confirm();
        };
      })(this));
      this.on('find-and-replace:focus-next', (function(_this) {
        return function() {
          return _this.focusNextElement(1);
        };
      })(this));
      this.on('find-and-replace:focus-previous', (function(_this) {
        return function() {
          return _this.focusNextElement(-1);
        };
      })(this));
      this.on('core:cancel core:close', (function(_this) {
        return function() {
          return _this.detach();
        };
      })(this));
      this.on('project-find:toggle-regex-option', (function(_this) {
        return function() {
          return _this.toggleRegexOption();
        };
      })(this));
      this.regexOptionButton.click((function(_this) {
        return function() {
          return _this.toggleRegexOption();
        };
      })(this));
      this.on('project-find:toggle-case-option', (function(_this) {
        return function() {
          return _this.toggleCaseOption();
        };
      })(this));
      this.caseOptionButton.click((function(_this) {
        return function() {
          return _this.toggleCaseOption();
        };
      })(this));
      this.replaceAllButton.on('click', (function(_this) {
        return function() {
          return _this.replaceAll();
        };
      })(this));
      this.on('project-find:replace-all', (function(_this) {
        return function() {
          return _this.replaceAll();
        };
      })(this));
      this.subscribe(this.model, 'cleared', (function(_this) {
        return function() {
          return _this.clearMessages();
        };
      })(this));
      this.subscribe(this.model, 'replacement-state-cleared', (function(_this) {
        return function(results) {
          return _this.generateResultsMessage(results);
        };
      })(this));
      this.subscribe(this.model, 'finished-searching', (function(_this) {
        return function(results) {
          return _this.generateResultsMessage(results);
        };
      })(this));
      atom.workspaceView.command('find-and-replace:use-selection-as-find-pattern', this.setSelectionAsFindPattern);
      return this.handleEventsForReplace();
    };

    ProjectFindView.prototype.handleEventsForReplace = function() {
      this.replaceEditor.getEditor().getBuffer().on('changed', (function(_this) {
        return function() {
          return _this.model.clearReplacementState();
        };
      })(this));
      this.replaceEditor.getEditor().on('contents-modified', (function(_this) {
        return function() {
          return _this.model.updateReplacementPattern(_this.replaceEditor.getText());
        };
      })(this));
      this.replacementsMade = 0;
      this.subscribe(this.model, 'replace', (function(_this) {
        return function(promise) {
          _this.replacementsMade = 0;
          _this.replacmentInfoBlock.show();
          return _this.replacementProgress.removeAttr('value');
        };
      })(this));
      this.subscribe(this.model, 'path-replaced', (function(_this) {
        return function(result) {
          _this.replacementsMade++;
          _this.replacementProgress[0].value = _this.replacementsMade / _this.model.getPathCount();
          return _this.replacmentInfo.text("Replaced " + _this.replacementsMade + " of " + (_.pluralize(_this.model.getPathCount(), 'file')));
        };
      })(this));
      return this.subscribe(this.model, 'finished-replacing', (function(_this) {
        return function(result) {
          return _this.onFinishedReplacing(result);
        };
      })(this));
    };

    ProjectFindView.prototype.attach = function() {
      if (!this.hasParent()) {
        atom.workspaceView.prependToBottom(this);
      }
      if (!this.findEditor.getText()) {
        this.setSelectionAsFindPattern();
      }
      this.findEditor.focus();
      return this.findEditor.getEditor().selectAll();
    };

    ProjectFindView.prototype.detach = function() {
      if (!this.hasParent()) {
        return;
      }
      this.hideAllTooltips();
      atom.workspaceView.focus();
      return ProjectFindView.__super__.detach.call(this);
    };

    ProjectFindView.prototype.toggleRegexOption = function() {
      this.model.toggleUseRegex();
      if (this.model.useRegex) {
        this.regexOptionButton.addClass('selected');
      } else {
        this.regexOptionButton.removeClass('selected');
      }
      this.updateOptionsLabel();
      return this.search({
        onlyRunIfActive: true
      });
    };

    ProjectFindView.prototype.toggleCaseOption = function() {
      this.model.toggleCaseSensitive();
      if (this.model.caseSensitive) {
        this.caseOptionButton.addClass('selected');
      } else {
        this.caseOptionButton.removeClass('selected');
      }
      this.updateOptionsLabel();
      return this.search({
        onlyRunIfActive: true
      });
    };

    ProjectFindView.prototype.focusNextElement = function(direction) {
      var elements, focusedElement, focusedIndex, _base;
      elements = [this.findEditor, this.replaceEditor, this.pathsEditor].filter(function(el) {
        return el.has(':visible').length > 0;
      });
      focusedElement = _.find(elements, function(el) {
        return el.has(':focus').length > 0 || el.is(':focus');
      });
      focusedIndex = elements.indexOf(focusedElement);
      focusedIndex = focusedIndex + direction;
      if (focusedIndex >= elements.length) {
        focusedIndex = 0;
      }
      if (focusedIndex < 0) {
        focusedIndex = elements.length - 1;
      }
      elements[focusedIndex].focus();
      return typeof (_base = elements[focusedIndex]).getEditor === "function" ? _base.getEditor().selectAll() : void 0;
    };

    ProjectFindView.prototype.confirm = function() {
      if (this.findEditor.getText().length === 0) {
        this.model.clear();
        return;
      }
      this.findHistory.store();
      this.replaceHistory.store();
      this.pathsHistory.store();
      return this.search({
        onlyRunIfChanged: true
      });
    };

    ProjectFindView.prototype.search = function(_arg) {
      var onlyRunIfActive, onlyRunIfChanged, _ref1;
      _ref1 = _arg != null ? _arg : {}, onlyRunIfActive = _ref1.onlyRunIfActive, onlyRunIfChanged = _ref1.onlyRunIfChanged;
      if (onlyRunIfActive && !this.model.active) {
        return Q();
      }
      this.errorMessages.empty();
      return this.showResultPane().then((function(_this) {
        return function() {
          var e;
          try {
            return _this.model.search(_this.findEditor.getText(), _this.getPaths(), _this.replaceEditor.getText(), {
              onlyRunIfChanged: onlyRunIfChanged
            });
          } catch (_error) {
            e = _error;
            return _this.addErrorMessage(e.message);
          }
        };
      })(this));
    };

    ProjectFindView.prototype.replaceAll = function() {
      this.errorMessages.empty();
      return this.showResultPane().then((function(_this) {
        return function() {
          var pattern, replacementPattern;
          pattern = _this.findEditor.getText();
          replacementPattern = _this.replaceEditor.getText();
          return _this.model.search(pattern, _this.getPaths(), replacementPattern, {
            onlyRunIfChanged: true
          }).then(function() {
            _this.clearMessages();
            return _this.model.replace(pattern, _this.getPaths(), replacementPattern, _this.model.getPaths());
          });
        };
      })(this));
    };

    ProjectFindView.prototype.getPaths = function() {
      var path, _i, _len, _ref1, _results;
      _ref1 = this.pathsEditor.getText().trim().split(',');
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        path = _ref1[_i];
        if (path) {
          _results.push(path.trim());
        }
      }
      return _results;
    };

    ProjectFindView.prototype.findFileParent = function(node) {
      var parent;
      parent = node.parent();
      if (parent.is('.file') || parent.is('.directory')) {
        return parent;
      }
      return this.findFileParent(parent);
    };

    ProjectFindView.prototype.findInCurrentlySelectedDirectory = function(selectedNode) {
      var absPath, relPath, selected;
      selected = this.findFileParent(selectedNode);
      if (selected.is('.file')) {
        selected = selected.parents('.directory:eq(0)');
      }
      absPath = selected.view().getPath();
      relPath = atom.project.relativize(absPath);
      return this.pathsEditor.setText(relPath);
    };

    ProjectFindView.prototype.showResultPane = function() {
      var options;
      options = null;
      if (atom.config.get('find-and-replace.openProjectFindResultsInRightPane')) {
        options = {
          split: 'right'
        };
      }
      return atom.workspaceView.open(ResultsPaneView.URI, options);
    };

    ProjectFindView.prototype.onFinishedReplacing = function(results) {
      if (!results.replacedPathCount) {
        atom.beep();
      }
      return this.replacmentInfoBlock.hide();
    };

    ProjectFindView.prototype.generateResultsMessage = function(results) {
      var message;
      message = Util.getSearchResultsMessage(results);
      if (results.replacedPathCount != null) {
        message = Util.getReplacementResultsMessage(results);
      }
      return this.setInfoMessage(message);
    };

    ProjectFindView.prototype.clearMessages = function() {
      this.descriptionLabel.text('Find in Project');
      this.replacmentInfoBlock.hide();
      return this.errorMessages.hide().empty();
    };

    ProjectFindView.prototype.addErrorMessage = function(message) {
      this.errorMessages.append($$$(function() {
        return this.li(message);
      }));
      return this.errorMessages.show();
    };

    ProjectFindView.prototype.setInfoMessage = function(message) {
      return this.descriptionLabel.html(message);
    };

    ProjectFindView.prototype.updateOptionsLabel = function() {
      var label;
      label = [];
      if (this.model.useRegex) {
        label.push('Regex');
      }
      if (this.model.caseSensitive) {
        label.push('Case Sensitive');
      } else {
        label.push('Case Insensitive');
      }
      return this.optionsLabel.text(label.join(', '));
    };

    ProjectFindView.prototype.setSelectionAsFindPattern = function() {
      var editor, pattern;
      editor = atom.workspaceView.getActivePaneItem();
      if ((editor != null ? editor.getSelectedText : void 0) != null) {
        pattern = editor.getSelectedText();
        return this.findEditor.setText(pattern);
      }
    };

    return ProjectFindView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/lib/project-find-view.js.map
