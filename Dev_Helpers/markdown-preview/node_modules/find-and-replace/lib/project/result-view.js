(function() {
  var $, MatchView, ResultView, View, fs, path, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  _ref = require('atom'), $ = _ref.$, View = _ref.View;

  fs = require('fs-plus');

  MatchView = require('./match-view');

  path = require('path');

  module.exports = ResultView = (function(_super) {
    __extends(ResultView, _super);

    function ResultView() {
      return ResultView.__super__.constructor.apply(this, arguments);
    }

    ResultView.content = function(model, filePath, result) {
      var iconClass;
      iconClass = fs.isReadmePath(filePath) ? 'icon-book' : 'icon-file-text';
      return this.li({
        "class": 'path list-nested-item',
        'data-path': _.escapeAttribute(filePath)
      }, (function(_this) {
        return function() {
          _this.div({
            outlet: 'pathDetails',
            "class": 'path-details list-item'
          }, function() {
            _this.span({
              "class": 'disclosure-arrow'
            });
            _this.span({
              "class": iconClass + ' icon'
            });
            _this.span({
              "class": 'path-name bright'
            }, filePath.replace(atom.project.getPath() + path.sep, ''));
            return _this.span({
              outlet: 'description',
              "class": 'path-match-number'
            });
          });
          return _this.ul({
            outlet: 'matches',
            "class": 'matches list-tree'
          }, function() {});
        };
      })(this));
    };

    ResultView.prototype.initialize = function(model, filePath, result) {
      this.model = model;
      this.filePath = filePath;
      return this.renderResult(result);
    };

    ResultView.prototype.renderResult = function(result) {
      var match, matches, selectedIndex, _i, _len;
      matches = result != null ? result.matches : void 0;
      selectedIndex = this.matches.find('.selected').index();
      this.matches.empty();
      if (result) {
        this.description.show().text("(" + (matches != null ? matches.length : void 0) + ")");
      } else {
        this.description.hide();
      }
      if (!matches || matches.length === 0) {
        this.hide();
      } else {
        this.show();
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          match = matches[_i];
          this.matches.append(new MatchView(this.model, {
            filePath: this.filePath,
            match: match
          }));
        }
      }
      if (selectedIndex > -1) {
        return this.matches.children().eq(selectedIndex).addClass('selected');
      }
    };

    ResultView.prototype.confirm = function() {
      return atom.workspaceView.open(this.filePath, {
        split: 'left'
      });
    };

    return ResultView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/lib/project/result-view.js.map
