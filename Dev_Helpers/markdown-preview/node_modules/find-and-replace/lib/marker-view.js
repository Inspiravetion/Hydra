(function() {
  var $, MarkerView, Subscriber;

  $ = require('atom').$;

  Subscriber = require('emissary').Subscriber;

  module.exports = MarkerView = (function() {
    Subscriber.includeInto(MarkerView);

    function MarkerView(_arg) {
      var _ref;
      _ref = _arg != null ? _arg : {}, this.editor = _ref.editor, this.marker = _ref.marker;
      this.regions = [];
      this.editSession = this.editor.editor;
      this.element = document.createElement('div');
      this.element.className = 'marker';
      this.updateNeeded = this.marker.isValid();
      this.oldScreenRange = this.getScreenRange();
      this.subscribe(this.marker, 'changed', (function(_this) {
        return function(event) {
          return _this.onMarkerChanged(event);
        };
      })(this));
      this.subscribe(this.marker, 'attributes-changed', (function(_this) {
        return function(_arg1) {
          var isCurrent;
          isCurrent = _arg1.isCurrent;
          return _this.updateCurrentClass(isCurrent);
        };
      })(this));
      this.subscribe(this.marker, 'destroyed', (function(_this) {
        return function() {
          return _this.remove();
        };
      })(this));
      this.subscribe(this.editor, 'editor:display-updated', (function(_this) {
        return function() {
          return _this.updateDisplay();
        };
      })(this));
    }

    MarkerView.prototype.remove = function() {
      this.unsubscribe();
      this.marker = null;
      this.editor = null;
      return this.element.remove();
    };

    MarkerView.prototype.show = function() {
      return this.element.style.display = "";
    };

    MarkerView.prototype.hide = function() {
      return this.element.style.display = "none";
    };

    MarkerView.prototype.onMarkerChanged = function(_arg) {
      var isValid;
      isValid = _arg.isValid;
      this.updateNeeded = isValid;
      if (isValid) {
        return this.show();
      } else {
        return this.hide();
      }
    };

    MarkerView.prototype.isUpdateNeeded = function() {
      var newScreenRange, oldScreenRange;
      if (!(this.updateNeeded && this.editSession === this.editor.editor)) {
        return false;
      }
      oldScreenRange = this.oldScreenRange;
      newScreenRange = this.getScreenRange();
      this.oldScreenRange = newScreenRange;
      return this.intersectsRenderedScreenRows(oldScreenRange) || this.intersectsRenderedScreenRows(newScreenRange);
    };

    MarkerView.prototype.intersectsRenderedScreenRows = function(range) {
      return range.intersectsRowRange(this.editor.firstRenderedScreenRow, this.editor.lastRenderedScreenRow);
    };

    MarkerView.prototype.updateCurrentClass = function(isCurrent) {
      if (isCurrent) {
        return $(this.element).addClass('current-result');
      } else {
        return $(this.element).removeClass('current-result');
      }
    };

    MarkerView.prototype.updateDisplay = function() {
      var range, rowSpan;
      if (!this.isUpdateNeeded()) {
        return;
      }
      this.updateNeeded = false;
      this.clearRegions();
      range = this.getScreenRange();
      if (range.isEmpty()) {
        return;
      }
      rowSpan = range.end.row - range.start.row;
      if (rowSpan === 0) {
        return this.appendRegion(1, range.start, range.end);
      } else {
        this.appendRegion(1, range.start, null);
        if (rowSpan > 1) {
          this.appendRegion(rowSpan - 1, {
            row: range.start.row + 1,
            column: 0
          }, null);
        }
        return this.appendRegion(1, {
          row: range.end.row,
          column: 0
        }, range.end);
      }
    };

    MarkerView.prototype.appendRegion = function(rows, start, end) {
      var charWidth, css, lineHeight, name, region, value, _ref;
      _ref = this.editor, lineHeight = _ref.lineHeight, charWidth = _ref.charWidth;
      css = this.editor.pixelPositionForScreenPosition(start);
      css.height = lineHeight * rows;
      if (end) {
        css.width = this.editor.pixelPositionForScreenPosition(end).left - css.left;
      } else {
        css.right = 0;
      }
      region = document.createElement('div');
      region.className = 'region';
      for (name in css) {
        value = css[name];
        region.style[name] = value + 'px';
      }
      this.element.appendChild(region);
      return this.regions.push(region);
    };

    MarkerView.prototype.clearRegions = function() {
      var region, _i, _len, _ref;
      _ref = this.regions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        region = _ref[_i];
        region.remove();
      }
      return this.regions = [];
    };

    MarkerView.prototype.getScreenRange = function() {
      return this.marker.getScreenRange();
    };

    MarkerView.prototype.getBufferRange = function() {
      return this.marker.getBufferRange();
    };

    return MarkerView;

  })();

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/lib/marker-view.js.map
