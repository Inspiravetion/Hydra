(function() {
  var EditorView, FindResultsView, MarkerView, View, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require('underscore-plus');

  _ref = require('atom'), EditorView = _ref.EditorView, View = _ref.View;

  MarkerView = require('./marker-view');

  module.exports = FindResultsView = (function(_super) {
    __extends(FindResultsView, _super);

    function FindResultsView() {
      return FindResultsView.__super__.constructor.apply(this, arguments);
    }

    FindResultsView.content = function() {
      return this.div({
        "class": 'search-results'
      });
    };

    FindResultsView.prototype.initialize = function(findModel) {
      this.findModel = findModel;
      this.markerViews = {};
      return this.subscribe(this.findModel, 'updated', (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.markersUpdated.apply(_this, args);
        };
      })(this));
    };

    FindResultsView.prototype.attach = function() {
      var _ref1;
      return (_ref1 = this.getEditor()) != null ? _ref1.underlayer.append(this) : void 0;
    };

    FindResultsView.prototype.detach = function() {
      return FindResultsView.__super__.detach.apply(this, arguments);
    };

    FindResultsView.prototype.beforeRemove = function() {
      return this.destroyAllViews();
    };

    FindResultsView.prototype.getEditor = function() {
      var activeView;
      activeView = atom.workspaceView.getActiveView();
      if (activeView instanceof EditorView) {
        return activeView;
      } else {
        return null;
      }
    };

    FindResultsView.prototype.markersUpdated = function(markers) {
      var editor, id, marker, markerView, markerViewsToRemoveById, _i, _len;
      editor = this.getEditor();
      if (editor == null) {
        return this.destroyAllViews();
      } else {
        markerViewsToRemoveById = _.clone(this.markerViews);
        for (_i = 0, _len = markers.length; _i < _len; _i++) {
          marker = markers[_i];
          if (this.markerViews[marker.id]) {
            delete markerViewsToRemoveById[marker.id];
          } else {
            markerView = new MarkerView({
              editor: editor,
              marker: marker
            });
            this.append(markerView.element);
            this.markerViews[marker.id] = markerView;
          }
        }
        for (id in markerViewsToRemoveById) {
          markerView = markerViewsToRemoveById[id];
          delete this.markerViews[id];
          markerView.remove();
        }
        return editor.requestDisplayUpdate();
      }
    };

    FindResultsView.prototype.destroyAllViews = function() {
      this.empty();
      return this.markerViews = {};
    };

    return FindResultsView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/lib/find-results-view.js.map
