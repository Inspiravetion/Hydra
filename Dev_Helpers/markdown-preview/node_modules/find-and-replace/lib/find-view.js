(function() {
  var $$$, EditorView, FindModel, FindResultsView, FindView, History, View, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  _ref = require('atom'), $$$ = _ref.$$$, EditorView = _ref.EditorView, View = _ref.View;

  FindModel = require('./find-model');

  FindResultsView = require('./find-results-view');

  History = require('./history');

  module.exports = FindView = (function(_super) {
    __extends(FindView, _super);

    function FindView() {
      this.toggleSelectionOption = __bind(this.toggleSelectionOption, this);
      this.toggleCaseOption = __bind(this.toggleCaseOption, this);
      this.toggleRegexOption = __bind(this.toggleRegexOption, this);
      this.setSelectionAsFindPattern = __bind(this.setSelectionAsFindPattern, this);
      this.setCurrentMarkerFromSelection = __bind(this.setCurrentMarkerFromSelection, this);
      this.selectFirstMarkerBeforeCursor = __bind(this.selectFirstMarkerBeforeCursor, this);
      this.selectFirstMarkerAfterCursor = __bind(this.selectFirstMarkerAfterCursor, this);
      this.markersUpdated = __bind(this.markersUpdated, this);
      this.replaceAll = __bind(this.replaceAll, this);
      this.replacePrevious = __bind(this.replacePrevious, this);
      this.replaceNext = __bind(this.replaceNext, this);
      this.findAndSelectResult = __bind(this.findAndSelectResult, this);
      this.findPrevious = __bind(this.findPrevious, this);
      this.findNext = __bind(this.findNext, this);
      this.toggleFocus = __bind(this.toggleFocus, this);
      this.detach = __bind(this.detach, this);
      this.attach = __bind(this.attach, this);
      this.showReplace = __bind(this.showReplace, this);
      this.showFind = __bind(this.showFind, this);
      return FindView.__super__.constructor.apply(this, arguments);
    }

    FindView.content = function() {
      return this.div({
        tabIndex: -1,
        "class": 'find-and-replace tool-panel panel-bottom'
      }, (function(_this) {
        return function() {
          _this.div({
            "class": 'block'
          }, function() {
            _this.span({
              outlet: 'descriptionLabel',
              "class": 'description'
            }, 'Find in Current Buffer');
            return _this.span({
              "class": 'options-label pull-right'
            }, function() {
              _this.span('Finding with Options: ');
              return _this.span({
                outlet: 'optionsLabel',
                "class": 'options'
              });
            });
          });
          _this.ul({
            outlet: 'errorMessages',
            "class": 'error-messages block'
          });
          _this.div({
            "class": 'find-container block'
          }, function() {
            _this.div({
              "class": 'editor-container'
            }, function() {
              _this.subview('findEditor', new EditorView({
                mini: true,
                placeholderText: 'Find in current buffer'
              }));
              return _this.div({
                "class": 'find-meta-container'
              }, function() {
                return _this.span({
                  outlet: 'resultCounter',
                  "class": 'text-subtle result-counter'
                }, '');
              });
            });
            _this.div({
              "class": 'btn-group btn-group-find'
            }, function() {
              _this.button({
                outlet: 'previousButton',
                "class": 'btn'
              }, 'Find Prev');
              return _this.button({
                outlet: 'nextButton',
                "class": 'btn'
              }, 'Find Next');
            });
            return _this.div({
              "class": 'btn-group btn-toggle btn-group-options'
            }, function() {
              _this.button({
                outlet: 'regexOptionButton',
                "class": 'btn'
              }, '.*');
              _this.button({
                outlet: 'caseOptionButton',
                "class": 'btn'
              }, 'Aa');
              return _this.button({
                outlet: 'selectionOptionButton',
                "class": 'btn option-selection'
              }, '"');
            });
          });
          return _this.div({
            "class": 'replace-container block'
          }, function() {
            _this.div({
              "class": 'editor-container'
            }, function() {
              return _this.subview('replaceEditor', new EditorView({
                mini: true,
                placeholderText: 'Replace in current buffer'
              }));
            });
            _this.div({
              "class": 'btn-group btn-group-replace'
            }, function() {
              _this.button({
                outlet: 'replacePreviousButton',
                "class": 'btn btn-prev'
              }, 'Replace Prev');
              return _this.button({
                outlet: 'replaceNextButton',
                "class": 'btn btn-next'
              }, 'Replace Next');
            });
            return _this.div({
              "class": 'btn-group btn-group-replace-all'
            }, function() {
              return _this.button({
                outlet: 'replaceAllButton',
                "class": 'btn btn-all'
              }, 'Replace All');
            });
          });
        };
      })(this));
    };

    FindView.prototype.initialize = function(_arg) {
      var findHistory, modelState, replaceHistory, showFind, showReplace, _ref1;
      _ref1 = _arg != null ? _arg : {}, showFind = _ref1.showFind, showReplace = _ref1.showReplace, findHistory = _ref1.findHistory, replaceHistory = _ref1.replaceHistory, modelState = _ref1.modelState;
      this.findModel = new FindModel(modelState);
      this.findHistory = new History(this.findEditor, findHistory);
      this.replaceHistory = new History(this.replaceEditor, replaceHistory);
      this.findResultsView = new FindResultsView(this.findModel);
      this.handleEvents();
      this.updateOptionButtons();
      if (showFind) {
        this.showFind();
      } else if (showReplace) {
        this.showReplace();
      }
      this.clearMessages();
      return this.updateOptionsLabel();
    };

    FindView.prototype.afterAttach = function() {
      if (!this.tooltipsInitialized) {
        this.regexOptionButton.setTooltip("Use Regex", {
          command: 'find-and-replace:toggle-regex-option',
          commandElement: this.findEditor
        });
        this.caseOptionButton.setTooltip("Match Case", {
          command: 'find-and-replace:toggle-case-option',
          commandElement: this.findEditor
        });
        this.selectionOptionButton.setTooltip("Only In Selection", {
          command: 'find-and-replace:toggle-selection-option',
          commandElement: this.findEditor
        });
        this.previousButton.setTooltip("Find Previous", {
          command: 'find-and-replace:find-previous',
          commandElement: this.findEditor
        });
        this.nextButton.setTooltip("Find Next", {
          command: 'find-and-replace:find-next',
          commandElement: this.findEditor
        });
        this.replacePreviousButton.setTooltip("Replace Previous", {
          command: 'find-and-replace:replace-previous',
          commandElement: this.replaceEditor
        });
        this.replaceNextButton.setTooltip("Replace Next", {
          command: 'find-and-replace:replace-next',
          commandElement: this.replaceEditor
        });
        this.replaceAllButton.setTooltip("Replace All", {
          command: 'find-and-replace:replace-all',
          commandElement: this.replaceEditor
        });
        return this.tooltipsInitialized = true;
      }
    };

    FindView.prototype.hideAllTooltips = function() {
      this.regexOptionButton.hideTooltip();
      this.caseOptionButton.hideTooltip();
      this.selectionOptionButton.hideTooltip();
      this.previousButton.hideTooltip();
      this.nextButton.hideTooltip();
      this.replacePreviousButton.hideTooltip();
      this.replaceNextButton.hideTooltip();
      return this.replaceAllButton.hideTooltip();
    };

    FindView.prototype.serialize = function() {
      return {
        findHistory: this.findHistory.serialize(),
        replaceHistory: this.replaceHistory.serialize(),
        modelState: this.findModel.serialize()
      };
    };

    FindView.prototype.handleEvents = function() {
      this.handleFindEvents();
      this.handleReplaceEvents();
      this.findEditor.on('core:confirm', (function(_this) {
        return function() {
          return _this.confirm();
        };
      })(this));
      this.replaceEditor.on('core:confirm', (function(_this) {
        return function() {
          return _this.replaceNext();
        };
      })(this));
      this.on('find-and-replace:focus-next', this.toggleFocus);
      this.on('find-and-replace:focus-previous', this.toggleFocus);
      this.on('core:cancel core:close', this.detach);
      this.command('find-and-replace:toggle-regex-option', this.toggleRegexOption);
      this.command('find-and-replace:toggle-case-option', this.toggleCaseOption);
      this.command('find-and-replace:toggle-selection-option', this.toggleSelectionOption);
      this.regexOptionButton.on('click', this.toggleRegexOption);
      this.caseOptionButton.on('click', this.toggleCaseOption);
      this.selectionOptionButton.on('click', this.toggleSelectionOption);
      this.subscribe(this.findModel, 'updated', this.markersUpdated);
      return atom.workspaceView.on('selection:changed', this.setCurrentMarkerFromSelection);
    };

    FindView.prototype.handleFindEvents = function() {
      this.findEditor.getEditor().on('contents-modified', (function(_this) {
        return function() {
          return _this.liveSearch();
        };
      })(this));
      this.nextButton.on('click', (function(_this) {
        return function() {
          return _this.findNext(true);
        };
      })(this));
      this.previousButton.on('click', (function(_this) {
        return function() {
          return _this.findPrevious(true);
        };
      })(this));
      atom.workspaceView.command('find-and-replace:find-next', (function(_this) {
        return function() {
          return _this.findNext(true);
        };
      })(this));
      atom.workspaceView.command('find-and-replace:find-previous', (function(_this) {
        return function() {
          return _this.findPrevious(true);
        };
      })(this));
      return atom.workspaceView.command('find-and-replace:use-selection-as-find-pattern', this.setSelectionAsFindPattern);
    };

    FindView.prototype.handleReplaceEvents = function() {
      this.replacePreviousButton.on('click', this.replacePrevious);
      this.replaceNextButton.on('click', this.replaceNext);
      this.replaceAllButton.on('click', this.replaceAll);
      atom.workspaceView.command('find-and-replace:replace-previous', this.replacePrevious);
      atom.workspaceView.command('find-and-replace:replace-next', this.replaceNext);
      return atom.workspaceView.command('find-and-replace:replace-all', this.replaceAll);
    };

    FindView.prototype.showFind = function() {
      var editor, selectedText;
      editor = atom.workspaceView.getActivePaneItem();
      selectedText = editor != null ? typeof editor.getSelectedText === "function" ? editor.getSelectedText() : void 0 : void 0;
      if (selectedText && selectedText.indexOf('\n') < 0) {
        this.findEditor.setText(editor.getSelectedText());
      }
      if (!this.hasParent()) {
        this.attach();
      }
      this.findEditor.focus();
      return this.findEditor.getEditor().selectAll();
    };

    FindView.prototype.showReplace = function() {
      this.attach();
      this.replaceEditor.redraw();
      this.replaceEditor.focus();
      return this.replaceEditor.getEditor().selectAll();
    };

    FindView.prototype.attach = function() {
      this.findResultsView.attach();
      return atom.workspaceView.prependToBottom(this);
    };

    FindView.prototype.detach = function() {
      if (!this.hasParent()) {
        return;
      }
      this.hideAllTooltips();
      this.findResultsView.detach();
      atom.workspaceView.focus();
      return FindView.__super__.detach.call(this);
    };

    FindView.prototype.toggleFocus = function() {
      if (this.findEditor.find(':focus').length > 0) {
        return this.replaceEditor.focus();
      } else {
        return this.findEditor.focus();
      }
    };

    FindView.prototype.confirm = function() {
      return this.findNext(atom.config.get('find-and-replace.focusEditorAfterSearch'));
    };

    FindView.prototype.liveSearch = function() {
      var pattern;
      pattern = this.findEditor.getText();
      return this.updateModel({
        pattern: pattern
      });
    };

    FindView.prototype.findNext = function(focusEditorAfter) {
      if (focusEditorAfter == null) {
        focusEditorAfter = false;
      }
      return this.findAndSelectResult(this.selectFirstMarkerAfterCursor, focusEditorAfter);
    };

    FindView.prototype.findPrevious = function(focusEditorAfter) {
      if (focusEditorAfter == null) {
        focusEditorAfter = false;
      }
      return this.findAndSelectResult(this.selectFirstMarkerBeforeCursor, focusEditorAfter);
    };

    FindView.prototype.findAndSelectResult = function(selectFunction, focusEditorAfter) {
      var pattern;
      pattern = this.findEditor.getText();
      this.updateModel({
        pattern: pattern
      });
      this.findHistory.store();
      if (this.markers.length === 0) {
        return atom.beep();
      } else {
        selectFunction();
        if (focusEditorAfter) {
          return atom.workspaceView.focus();
        }
      }
    };

    FindView.prototype.replaceNext = function() {
      return this.replace('findNext', 'firstMarkerIndexAfterCursor');
    };

    FindView.prototype.replacePrevious = function() {
      return this.replace('findPrevious', 'firstMarkerIndexBeforeCursor');
    };

    FindView.prototype.replace = function(nextOrPreviousFn, nextIndexFn) {
      var currentMarker, markerIndex, pattern;
      pattern = this.findEditor.getText();
      this.updateModel({
        pattern: pattern
      });
      this.findHistory.store();
      this.replaceHistory.store();
      if (this.markers.length === 0) {
        return atom.beep();
      } else {
        if (!(currentMarker = this.currentResultMarker)) {
          markerIndex = this[nextIndexFn]();
          currentMarker = this.markers[markerIndex];
        }
        this.findModel.replace([currentMarker], this.replaceEditor.getText());
        return this[nextOrPreviousFn](false);
      }
    };

    FindView.prototype.replaceAll = function() {
      this.updateModel({
        pattern: this.findEditor.getText()
      });
      this.replaceHistory.store();
      this.findHistory.store();
      return this.findModel.replace(this.markers, this.replaceEditor.getText());
    };

    FindView.prototype.markersUpdated = function(markers) {
      this.markers = markers;
      this.setCurrentMarkerFromSelection();
      this.updateOptionButtons();
      this.updateDescription();
      if (this.isVisible()) {
        this.findResultsView.attach();
      }
      if (this.findModel.pattern !== this.findEditor.getText()) {
        return this.findEditor.setText(this.findModel.pattern);
      }
    };

    FindView.prototype.updateModel = function(options) {
      var e;
      this.clearMessages();
      try {
        return this.findModel.update(options);
      } catch (_error) {
        e = _error;
        return this.addErrorMessage(e.message);
      }
    };

    FindView.prototype.updateResultCounter = function() {
      var index, text;
      if (this.currentResultMarker) {
        index = this.markers.indexOf(this.currentResultMarker);
        text = "" + (index + 1) + " of " + this.markers.length;
      } else {
        if ((this.markers == null) || this.markers.length === 0) {
          text = "no results";
        } else if (this.markers.length === 1) {
          text = "1 found";
        } else {
          text = "" + this.markers.length + " found";
        }
      }
      return this.resultCounter.text(text);
    };

    FindView.prototype.updateDescription = function() {
      var results, resultsStr;
      results = this.markers.length;
      resultsStr = results ? _.pluralize(results, 'result') : 'No results';
      return this.descriptionLabel.text("" + resultsStr + " found for '" + this.findModel.pattern + "'");
    };

    FindView.prototype.selectFirstMarkerAfterCursor = function() {
      var markerIndex;
      markerIndex = this.firstMarkerIndexAfterCursor();
      return this.selectMarkerAtIndex(markerIndex);
    };

    FindView.prototype.firstMarkerIndexAfterCursor = function() {
      var editSession, end, index, marker, markerStartPosition, selection, start, _i, _len, _ref1, _ref2;
      editSession = this.findModel.getEditSession();
      if (!editSession) {
        return -1;
      }
      selection = editSession.getSelection();
      _ref1 = selection.getBufferRange(), start = _ref1.start, end = _ref1.end;
      if (selection.isReversed()) {
        start = end;
      }
      _ref2 = this.markers;
      for (index = _i = 0, _len = _ref2.length; _i < _len; index = ++_i) {
        marker = _ref2[index];
        markerStartPosition = marker.bufferMarker.getStartPosition();
        if (markerStartPosition.isGreaterThan(start)) {
          return index;
        }
      }
      return 0;
    };

    FindView.prototype.selectFirstMarkerBeforeCursor = function() {
      var markerIndex;
      markerIndex = this.firstMarkerIndexBeforeCursor();
      return this.selectMarkerAtIndex(markerIndex);
    };

    FindView.prototype.firstMarkerIndexBeforeCursor = function() {
      var editSession, end, index, marker, markerEndPosition, selection, start, _i, _ref1, _ref2;
      editSession = this.findModel.getEditSession();
      if (!editSession) {
        return -1;
      }
      selection = this.findModel.getEditSession().getSelection();
      _ref1 = selection.getBufferRange(), start = _ref1.start, end = _ref1.end;
      if (selection.isReversed()) {
        start = end;
      }
      _ref2 = this.markers;
      for (index = _i = _ref2.length - 1; _i >= 0; index = _i += -1) {
        marker = _ref2[index];
        markerEndPosition = marker.bufferMarker.getEndPosition();
        if (markerEndPosition.isLessThan(start)) {
          return index;
        }
      }
      return this.markers.length - 1;
    };

    FindView.prototype.selectMarkerAtIndex = function(markerIndex) {
      var marker, _ref1;
      if (!(((_ref1 = this.markers) != null ? _ref1.length : void 0) > 0)) {
        return;
      }
      if (marker = this.markers[markerIndex]) {
        return this.findModel.getEditSession().setSelectedBufferRange(marker.getBufferRange(), {
          autoscroll: true
        });
      }
    };

    FindView.prototype.setCurrentMarkerFromSelection = function() {
      var editSession, selectedBufferRange;
      if (this.currentResultMarker) {
        this.currentResultMarker.setAttributes({
          isCurrent: false
        });
        this.currentResultMarker.emit('attributes-changed', {
          isCurrent: false
        });
      }
      this.currentResultMarker = null;
      if ((this.markers != null) && this.markers.length && (editSession = this.findModel.getEditSession())) {
        selectedBufferRange = editSession.getSelectedBufferRange();
        this.currentResultMarker = this.findModel.findMarker(selectedBufferRange);
        if (this.currentResultMarker) {
          this.currentResultMarker.setAttributes({
            isCurrent: true
          });
          this.currentResultMarker.emit('attributes-changed', {
            isCurrent: true
          });
        }
      }
      return this.updateResultCounter();
    };

    FindView.prototype.setSelectionAsFindPattern = function() {
      var pattern;
      pattern = this.findModel.getEditSession().getSelectedText();
      return this.updateModel({
        pattern: pattern
      });
    };

    FindView.prototype.clearMessages = function() {
      return this.errorMessages.hide().empty();
    };

    FindView.prototype.addErrorMessage = function(message) {
      this.errorMessages.append($$$(function() {
        return this.li(message);
      }));
      return this.errorMessages.show();
    };

    FindView.prototype.hasErrors = function() {
      return !!this.errorMessages.children().length;
    };

    FindView.prototype.updateOptionsLabel = function() {
      var label;
      label = [];
      if (this.findModel.useRegex) {
        label.push('Regex');
      }
      if (this.findModel.caseSensitive) {
        label.push('Case Sensitive');
      } else {
        label.push('Case Insensitive');
      }
      if (this.findModel.inCurrentSelection) {
        label.push('Within Current Selection');
      }
      return this.optionsLabel.text(label.join(', '));
    };

    FindView.prototype.toggleRegexOption = function() {
      this.updateModel({
        pattern: this.findEditor.getText(),
        useRegex: !this.findModel.useRegex
      });
      this.selectFirstMarkerAfterCursor();
      return this.updateOptionsLabel();
    };

    FindView.prototype.toggleCaseOption = function() {
      this.updateModel({
        pattern: this.findEditor.getText(),
        caseSensitive: !this.findModel.caseSensitive
      });
      this.selectFirstMarkerAfterCursor();
      return this.updateOptionsLabel();
    };

    FindView.prototype.toggleSelectionOption = function() {
      this.updateModel({
        pattern: this.findEditor.getText(),
        inCurrentSelection: !this.findModel.inCurrentSelection
      });
      this.selectFirstMarkerAfterCursor();
      return this.updateOptionsLabel();
    };

    FindView.prototype.setOptionButtonState = function(optionButton, selected) {
      if (selected) {
        return optionButton.addClass('selected');
      } else {
        return optionButton.removeClass('selected');
      }
    };

    FindView.prototype.updateOptionButtons = function() {
      this.setOptionButtonState(this.regexOptionButton, this.findModel.useRegex);
      this.setOptionButtonState(this.caseOptionButton, this.findModel.caseSensitive);
      return this.setOptionButtonState(this.selectionOptionButton, this.findModel.inCurrentSelection);
    };

    return FindView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/find-and-replace/lib/find-view.js.map
