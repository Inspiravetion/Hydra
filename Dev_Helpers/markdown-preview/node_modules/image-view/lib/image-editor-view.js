(function() {
  var $, ImageEditorView, ScrollView, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore-plus');

  _ref = require('atom'), $ = _ref.$, ScrollView = _ref.ScrollView;

  module.exports = ImageEditorView = (function(_super) {
    __extends(ImageEditorView, _super);

    function ImageEditorView() {
      return ImageEditorView.__super__.constructor.apply(this, arguments);
    }

    ImageEditorView.content = function() {
      return this.div({
        "class": 'image-view',
        tabindex: -1
      }, (function(_this) {
        return function() {
          return _this.div({
            "class": 'image-container'
          }, function() {
            return _this.img({
              outlet: 'image'
            });
          });
        };
      })(this));
    };

    ImageEditorView.prototype.initialize = function(editor) {
      ImageEditorView.__super__.initialize.apply(this, arguments);
      this.loaded = false;
      this.image.hide().attr('src', editor.getUri());
      this.image.load((function(_this) {
        return function() {
          _this.originalHeight = _this.image.height();
          _this.originalWidth = _this.image.width();
          _this.loaded = true;
          return _this.centerImage();
        };
      })(this));
      this.subscribe($(window), 'resize', _.debounce(((function(_this) {
        return function() {
          return _this.centerImage();
        };
      })(this)), 300));
      this.command('image-view:zoom-in', (function(_this) {
        return function() {
          return _this.zoomIn();
        };
      })(this));
      this.command('image-view:zoom-out', (function(_this) {
        return function() {
          return _this.zoomOut();
        };
      })(this));
      return this.command('image-view:reset-zoom', (function(_this) {
        return function() {
          return _this.resetZoom();
        };
      })(this));
    };

    ImageEditorView.prototype.afterAttach = function(onDom) {
      var pane;
      if (!onDom) {
        return;
      }
      if (pane = this.getPane()) {
        this.active = this.is(pane.activeView);
        this.subscribe(pane, 'pane:active-item-changed', (function(_this) {
          return function(event, item) {
            var wasActive;
            wasActive = _this.active;
            _this.active = _this.is(pane.activeView);
            if (_this.active && !wasActive) {
              return _this.centerImage();
            }
          };
        })(this));
        return this.subscribe(atom.workspaceView, 'pane:attached pane:removed', (function(_this) {
          return function() {
            return _this.centerImage();
          };
        })(this));
      }
    };

    ImageEditorView.prototype.centerImage = function() {
      if (!(this.loaded && this.isVisible())) {
        return;
      }
      this.image.css({
        top: Math.max((this.height() - this.image.outerHeight()) / 2, 0),
        left: Math.max((this.width() - this.image.outerWidth()) / 2, 0)
      });
      return this.image.show();
    };

    ImageEditorView.prototype.getPane = function() {
      return this.parents('.pane').view();
    };

    ImageEditorView.prototype.zoomOut = function() {
      return this.adjustSize(0.9);
    };

    ImageEditorView.prototype.zoomIn = function() {
      return this.adjustSize(1.1);
    };

    ImageEditorView.prototype.resetZoom = function() {
      if (!(this.loaded && this.isVisible())) {
        return;
      }
      this.image.width(this.originalWidth);
      this.image.height(this.originalHeight);
      return this.centerImage();
    };

    ImageEditorView.prototype.adjustSize = function(factor) {
      var newHeight, newWidth;
      if (!(this.loaded && this.isVisible())) {
        return;
      }
      newWidth = this.image.width() * factor;
      newHeight = this.image.height() * factor;
      this.image.width(newWidth);
      this.image.height(newHeight);
      return this.centerImage();
    };

    return ImageEditorView;

  })(ScrollView);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/image-view/lib/image-editor-view.js.map
