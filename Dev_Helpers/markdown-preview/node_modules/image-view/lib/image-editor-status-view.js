(function() {
  var ImageEditor, ImageEditorStatusView, View,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = require('atom').View;

  ImageEditor = require('./image-editor');

  module.exports = ImageEditorStatusView = (function(_super) {
    __extends(ImageEditorStatusView, _super);

    function ImageEditorStatusView() {
      return ImageEditorStatusView.__super__.constructor.apply(this, arguments);
    }

    ImageEditorStatusView.content = function() {
      return this.div({
        "class": 'status-image inline-block'
      }, (function(_this) {
        return function() {
          return _this.span({
            "class": 'image-size',
            outlet: 'imageSizeStatus'
          });
        };
      })(this));
    };

    ImageEditorStatusView.prototype.initialize = function(statusBar) {
      this.statusBar = statusBar;
      this.attach();
      return this.subscribe(atom.workspaceView, 'pane-container:active-pane-item-changed', (function(_this) {
        return function() {
          return _this.updateImageSize();
        };
      })(this));
    };

    ImageEditorStatusView.prototype.attach = function() {
      return this.statusBar.appendLeft(this);
    };

    ImageEditorStatusView.prototype.afterAttach = function() {
      return this.updateImageSize();
    };

    ImageEditorStatusView.prototype.getImageSize = function(_arg) {
      var originalHeight, originalWidth;
      originalHeight = _arg.originalHeight, originalWidth = _arg.originalWidth;
      return this.imageSizeStatus.text("" + originalWidth + "x" + originalHeight).show();
    };

    ImageEditorStatusView.prototype.updateImageSize = function() {
      var editor, view;
      editor = atom.workspaceView.getActivePaneItem();
      if (editor instanceof ImageEditor) {
        view = atom.workspaceView.getActiveView();
        if (view.loaded) {
          return this.getImageSize(view);
        } else {
          return view.image.load((function(_this) {
            return function() {
              if (view === atom.workspaceView.getActiveView()) {
                return _this.getImageSize(view);
              }
            };
          })(this));
        }
      } else {
        return this.imageSizeStatus.hide();
      }
    };

    return ImageEditorStatusView;

  })(View);

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/image-view/lib/image-editor-status-view.js.map
