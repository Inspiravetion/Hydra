(function() {
  var ImageEditor, ImageEditorView, StatusBarMock, View, WorkspaceView, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('atom'), WorkspaceView = _ref.WorkspaceView, View = _ref.View;

  ImageEditorView = require('../lib/image-editor-view');

  ImageEditor = require('../lib/image-editor');

  StatusBarMock = (function(_super) {
    __extends(StatusBarMock, _super);

    function StatusBarMock() {
      return StatusBarMock.__super__.constructor.apply(this, arguments);
    }

    StatusBarMock.content = function() {
      return this.div({
        "class": 'status-bar tool-panel panel-bottom'
      }, (function(_this) {
        return function() {
          return _this.div({
            outlet: 'leftPanel',
            "class": 'status-bar-left'
          });
        };
      })(this));
    };

    StatusBarMock.prototype.attach = function() {
      return atom.workspaceView.appendToTop(this);
    };

    StatusBarMock.prototype.appendLeft = function(item) {
      return this.leftPanel.append(item);
    };

    return StatusBarMock;

  })(View);

  describe("ImageEditorView", function() {
    var editor, filePath, view, _ref1;
    _ref1 = [], editor = _ref1[0], view = _ref1[1], filePath = _ref1[2];
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView;
      filePath = atom.project.resolve('binary-file.png');
      editor = new ImageEditor(filePath);
      view = new ImageEditorView(editor);
      view.attachToDom();
      view.height(100);
      return waitsFor(function() {
        return view.loaded;
      });
    });
    it("displays the image for a path", function() {
      return expect(view.image.attr('src')).toBe(filePath);
    });
    it("centers the image in the editor", function() {
      expect(view.image.width()).toBe(10);
      expect(view.image.height()).toBe(10);
      expect(view.image.css('left')).toBe("" + ((view.width() - view.image.outerWidth()) / 2) + "px");
      return expect(view.image.css('top')).toBe("" + ((view.height() - view.image.outerHeight()) / 2) + "px");
    });
    describe("image-view:zoom-in", function() {
      return it("increases the image size by 10%", function() {
        view.trigger('image-view:zoom-in');
        expect(view.image.width()).toBe(11);
        return expect(view.image.height()).toBe(11);
      });
    });
    describe("image-view:zoom-out", function() {
      return it("decreases the image size by 10%", function() {
        view.trigger('image-view:zoom-out');
        expect(view.image.width()).toBe(9);
        return expect(view.image.height()).toBe(9);
      });
    });
    describe("image-view:reset-zoom", function() {
      return it("restores the image to the original size", function() {
        view.trigger('image-view:zoom-in');
        expect(view.image.width()).not.toBe(10);
        expect(view.image.height()).not.toBe(10);
        view.trigger('image-view:reset-zoom');
        expect(view.image.width()).toBe(10);
        return expect(view.image.height()).toBe(10);
      });
    });
    return describe("ImageEditorStatusView", function() {
      var imageSizeStatus;
      imageSizeStatus = [][0];
      beforeEach(function() {
        atom.workspaceView.attachToDom();
        waitsForPromise(function() {
          return atom.packages.activatePackage('image-view');
        });
        waitsForPromise(function() {
          return atom.workspaceView.open(filePath);
        });
        runs(function() {
          editor = atom.workspaceView.getActivePaneItem();
          view = atom.workspaceView.getActiveView();
          return view.height(100);
        });
        waitsFor(function() {
          return view.loaded;
        });
        atom.workspaceView.statusBar = new StatusBarMock();
        atom.workspaceView.statusBar.attach();
        atom.packages.emit('activated');
        imageSizeStatus = atom.workspaceView.statusBar.leftPanel.children().view();
        return expect(imageSizeStatus).toExist();
      });
      afterEach(function() {
        atom.workspaceView.statusBar.remove();
        return atom.workspaceView.statusBar = null;
      });
      return it("displays the size of the image", function() {
        return expect(imageSizeStatus.text()).toBe('10x10');
      });
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/image-view/spec/image-editor-view-spec.js.map
