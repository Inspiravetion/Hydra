(function() {
  var EditorView, WorkspaceView, _ref;

  _ref = require('atom'), EditorView = _ref.EditorView, WorkspaceView = _ref.WorkspaceView;

  describe("WrapGuide", function() {
    var editorView, wrapGuide, _ref1;
    _ref1 = [], editorView = _ref1[0], wrapGuide = _ref1[1];
    beforeEach(function() {
      atom.workspaceView = new WorkspaceView;
      atom.workspaceView.openSync('sample.js');
      waitsForPromise(function() {
        return atom.packages.activatePackage('wrap-guide');
      });
      return runs(function() {
        atom.workspaceView.attachToDom();
        atom.workspaceView.height(200);
        atom.workspaceView.width(1500);
        editorView = atom.workspaceView.getActiveView();
        wrapGuide = atom.workspaceView.find('.wrap-guide').view();
        return editorView.trigger('resize');
      });
    });
    describe("@initialize", function() {
      return it("appends a wrap guide to all existing and new editor", function() {
        expect(atom.workspaceView.panes.find('.pane').length).toBe(1);
        expect(atom.workspaceView.panes.find('.underlayer > .wrap-guide').length).toBe(1);
        editorView.splitRight();
        expect(atom.workspaceView.find('.pane').length).toBe(2);
        return expect(atom.workspaceView.panes.find('.underlayer > .wrap-guide').length).toBe(2);
      });
    });
    describe("@updateGuide", function() {
      return it("positions the guide at the configured column", function() {
        var width;
        width = editorView.charWidth * wrapGuide.getDefaultColumn();
        expect(width).toBeGreaterThan(0);
        expect(wrapGuide.position().left).toBe(width);
        return expect(wrapGuide).toBeVisible();
      });
    });
    describe("when the font size changes", function() {
      return it("updates the wrap guide position", function() {
        var fontSize, initial;
        initial = wrapGuide.position().left;
        expect(initial).toBeGreaterThan(0);
        fontSize = atom.config.get("editor.fontSize");
        atom.config.set("editor.fontSize", fontSize + 10);
        expect(wrapGuide.position().left).toBeGreaterThan(initial);
        return expect(wrapGuide).toBeVisible();
      });
    });
    describe("when the column config changes", function() {
      return it("updates the wrap guide position", function() {
        var column, initial;
        initial = wrapGuide.position().left;
        expect(initial).toBeGreaterThan(0);
        column = atom.config.get("editor.preferredLineLength");
        atom.config.set("editor.preferredLineLength", column + 10);
        expect(wrapGuide.position().left).toBeGreaterThan(initial);
        expect(wrapGuide).toBeVisible();
        atom.config.set("wrap-guide.columns", [
          {
            pattern: ".*",
            column: column - 10
          }
        ]);
        expect(wrapGuide.position().left).toBeLessThan(initial);
        return expect(wrapGuide).toBeVisible();
      });
    });
    describe("using a custom config column", function() {
      it("places the wrap guide at the custom column", function() {
        var width;
        atom.config.set('wrap-guide.columns', [
          {
            pattern: '\.js$',
            column: 20
          }
        ]);
        wrapGuide.updateGuide();
        width = editorView.charWidth * 20;
        expect(width).toBeGreaterThan(0);
        return expect(wrapGuide.position().left).toBe(width);
      });
      it("uses the default column when no custom column matches the path", function() {
        var width;
        atom.config.set('wrap-guide.columns', [
          {
            pattern: '\.jsp$',
            column: '100'
          }
        ]);
        wrapGuide.updateGuide();
        width = editorView.charWidth * wrapGuide.getDefaultColumn();
        expect(width).toBeGreaterThan(0);
        return expect(wrapGuide.position().left).toBe(width);
      });
      it("hides the guide when the config column is less than 1", function() {
        atom.config.set('wrap-guide.columns', [
          {
            pattern: 'sample\.js$',
            column: -1
          }
        ]);
        wrapGuide.updateGuide();
        return expect(wrapGuide).toBeHidden();
      });
      return it("ignores invalid regexes", function() {
        atom.config.set('wrap-guide.columns', [
          {
            pattern: '(',
            column: -1
          }
        ]);
        return expect(function() {
          return wrapGuide.updateGuide();
        }).not.toThrow();
      });
    });
    describe("when no lines exceed the guide column and the editor width is smaller than the guide column position", function() {
      return it("hides the guide", function() {
        atom.workspaceView.width(10);
        editorView.resize();
        wrapGuide.updateGuide();
        return expect(wrapGuide).toBeHidden();
      });
    });
    return it("only attaches to editorViews that are part of a pane", function() {
      var editorView2;
      editorView2 = new EditorView({
        mini: true
      });
      editorView.overlayer.append(editorView2);
      return expect(editorView2.find('.wrap-guide').length).toBe(0);
    });
  });

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/wrap-guide/spec/wrap-guide-spec.js.map
