(function() {
  var SnippetExpansion, Subscriber, _;

  _ = require('underscore-plus');

  Subscriber = require('emissary').Subscriber;

  module.exports = SnippetExpansion = (function() {
    Subscriber.includeInto(SnippetExpansion);

    SnippetExpansion.prototype.tabStopMarkers = null;

    SnippetExpansion.prototype.settingTabStop = false;

    function SnippetExpansion(snippet, editor) {
      var startPosition;
      this.snippet = snippet;
      this.editor = editor;
      startPosition = this.editor.getSelectedBufferRange().start;
      this.editor.transact((function(_this) {
        return function() {
          var newRange;
          newRange = _this.editor.insertText(snippet.body, {
            autoIndent: false
          })[0];
          if (snippet.tabStops.length > 0) {
            _this.subscribe(_this.editor, 'cursor-moved', function(event) {
              return _this.cursorMoved(event);
            });
            _this.placeTabStopMarkers(startPosition, snippet.tabStops);
            _this.editor.snippetExpansion = _this;
            _this.editor.normalizeTabsInBufferRange(newRange);
          }
          if (snippet.lineCount > 1) {
            return _this.indentSubsequentLines(startPosition.row, snippet);
          }
        };
      })(this));
    }

    SnippetExpansion.prototype.cursorMoved = function(_arg) {
      var newBufferPosition, newTabStops, oldBufferPosition, oldTabStops, textChanged;
      oldBufferPosition = _arg.oldBufferPosition, newBufferPosition = _arg.newBufferPosition, textChanged = _arg.textChanged;
      if (this.settingTabStop || textChanged) {
        return;
      }
      oldTabStops = this.tabStopsForBufferPosition(oldBufferPosition);
      newTabStops = this.tabStopsForBufferPosition(newBufferPosition);
      if (!_.intersection(oldTabStops, newTabStops).length) {
        return this.destroy();
      }
    };

    SnippetExpansion.prototype.placeTabStopMarkers = function(startPosition, tabStopRanges) {
      this.tabStopMarkers = tabStopRanges.map((function(_this) {
        return function(_arg) {
          var end, start;
          start = _arg.start, end = _arg.end;
          return _this.editor.markBufferRange([startPosition.add(start), startPosition.add(end)]);
        };
      })(this));
      return this.setTabStopIndex(0);
    };

    SnippetExpansion.prototype.indentSubsequentLines = function(startRow, snippet) {
      var initialIndent, row, _i, _ref, _ref1, _results;
      initialIndent = this.editor.lineForBufferRow(startRow).match(/^\s*/)[0];
      _results = [];
      for (row = _i = _ref = startRow + 1, _ref1 = startRow + snippet.lineCount; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; row = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(this.editor.buffer.insert([row, 0], initialIndent));
      }
      return _results;
    };

    SnippetExpansion.prototype.goToNextTabStop = function() {
      var nextIndex;
      nextIndex = this.tabStopIndex + 1;
      if (nextIndex < this.tabStopMarkers.length) {
        if (this.setTabStopIndex(nextIndex)) {
          return true;
        } else {
          return this.goToNextTabStop();
        }
      } else {
        this.destroy();
        return false;
      }
    };

    SnippetExpansion.prototype.goToPreviousTabStop = function() {
      if (this.tabStopIndex > 0) {
        return this.setTabStopIndex(this.tabStopIndex - 1);
      }
    };

    SnippetExpansion.prototype.setTabStopIndex = function(tabStopIndex) {
      var markerSelected;
      this.tabStopIndex = tabStopIndex;
      this.settingTabStop = true;
      markerSelected = this.editor.selectMarker(this.tabStopMarkers[this.tabStopIndex]);
      this.settingTabStop = false;
      return markerSelected;
    };

    SnippetExpansion.prototype.tabStopsForBufferPosition = function(bufferPosition) {
      return _.intersection(this.tabStopMarkers, this.editor.findMarkers({
        containsBufferPosition: bufferPosition
      }));
    };

    SnippetExpansion.prototype.destroy = function() {
      var marker, _i, _len, _ref;
      this.unsubscribe();
      _ref = this.tabStopMarkers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        marker.destroy();
      }
      return this.editor.snippetExpansion = null;
    };

    SnippetExpansion.prototype.restore = function(editor) {
      this.editor = editor;
      return this.editor.snippetExpansion = this;
    };

    return SnippetExpansion;

  })();

}).call(this);

//# sourceMappingURL=/../../../../../../../../..//tmp/atom-build/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippet-expansion.js.map
